{
  "openapi": "3.0.0",
  "servers": [
    {
      "description": "BitGo API",
      "url": "https://app.bitgo.com"
    }
  ],
  "info": {
    "version": "0.1.0",
    "title": "BitGo API Reference",
    "x-logo": {
      "url": "./docs-logo.png",
      "backgroundColor": "#000000",
      "altText": "BitGo API Logo"
    },
    "contact": {
      "name": "BitGo Engineering",
      "email": "support@bitgo.com"
    }
  },
  "paths": {
    "/api/v2/{coin}/wallet/{walletId}/addresses": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "List addresses",
        "description": "List receive addresses on a wallet",
        "operationId": "v2.wallet.addresses",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "name": "labelContains",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "A case-insensitive regular expression which will be used to filter returned addresses based on their address label."
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "mine",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to return only the addresses which the current user has created."
          },
          {
            "$ref": "#/components/parameters/prevId"
          },
          {
            "$ref": "#/components/parameters/segwit"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "integer",
              "enum": [
                -1,
                1
              ],
              "default": 1
            },
            "description": "Sort order of returned addresses. (1 for ascending, -1 for descending)."
          },
          {
            "$ref": "#/components/parameters/chain"
          },
          {
            "name": "includeBalances",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to include address balances"
          },
          {
            "name": "includeTokens",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether to include token addresses"
          },
          {
            "name": "includeTotalAddressCount",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "For large wallets (>100k addresses), include total count of addresses (including addresses pending on-chain) matching the query."
          },
          {
            "name": "returnBalancesForToken",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Name of the token that the response should include balances for. (Eth and Celo only)\n"
          },
          {
            "name": "pendingDeployment",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter the addresses based on their deployment status. Return the deployed addresses if this param is passed as false and return undeployed addresses if it is passed as true. (Eth only)\n"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAddressesResponse"
                }
              }
            }
          },
          "202": {
            "description": "Wallet is pending on-chain initialization"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "wallet.addresses().then(function (addresses) {\n  // print addresses\n  console.dir(addresses);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/address": {
      "post": {
        "tags": [
          "Address",
          "Wallet",
          "Express"
        ],
        "summary": "Create address",
        "operationId": "v2.wallet.newaddress",
        "description": "This API call is used to create a new receive address for your wallet. You may choose to call this API whenever a deposit is made. The BitGo API supports millions of addresses.\nPlease check the “Coin-Specific Implementation” with regards to fee address management for Ethereum and consolidation transactions for Algorand and Tezos.\n\nNote, in Ethereum, new addresses are not returned immediately. This is because creating a new Ethereum address requires a blockchain transaction, which must be confirmed before\nthe address can be used. You can save the \"id\" field in the response and use it to query for the address value after a short delay.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "wallet.createAddress({ label: 'My address' }).then(function (address) {\n  // print new address\n  console.dir(address);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/address/{addressId}/deployment": {
      "post": {
        "tags": [
          "Address"
        ],
        "summary": "Deploy address",
        "operationId": "v2.wallet.deployForwarder",
        "description": "This API call is to manually deploy an ETH address",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathAddressId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployForwarderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployForwarderAndForwardTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/address/{addressId}/tokenforward": {
      "post": {
        "tags": [
          "Address"
        ],
        "summary": "Forward tokens from address",
        "operationId": "v2.wallet.forwardToken",
        "description": "This API call is to manually forward tokens from an ETH or CELO address",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathAddressId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForwardTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployForwarderAndForwardTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/address/{addressOrId}": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Get address",
        "description": "Gets a receive address on a wallet",
        "operationId": "v2.wallet.singlewalletaddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/addressOrId"
          },
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "name": "dt",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "For XRP addresses"
          },
          {
            "name": "memoId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "For XLM addresses"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSingleAddressResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "wallet.getAddress({ address: '2NCzBK2Yf7PFAAfKsgc6cfTSG8FxtgMGG9C' }).then(function (address) {\n  // print address\n  console.dir(address);\n});\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Address"
        ],
        "summary": "Update address",
        "description": "Update a receive address on a wallet",
        "operationId": "v2.wallet.updateaddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/addressOrId"
          },
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "name": "dt",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "For XRP addresses"
          },
          {
            "name": "memoId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "For XLM addresses"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSingleAddressResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/address/{addressOrId}/proof": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Get proof of address ownership",
        "description": "Gets proof of ownership for an address on a wallet",
        "operationId": "v2.wallet.addressProof",
        "parameters": [
          {
            "$ref": "#/components/parameters/addressOrId"
          },
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAddressProofResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "//api/v2/{coin}/wallet/{walletId}/potentialStuckTxs": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get list of potentially stuck transactions and their nonces for eth-like coins",
        "description": "Gets a list of potentially problematic transactions, their nonces, the reason they are stuck, and possible solutions for a given wallet",
        "operationId": "v2.wallet.getpotentialstucktxs",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPotentialStuckTxsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    },
                    {
                      "$ref": "#/components/schemas/CoinOperationNotSupported"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/enterprise/{enterpriseId}": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get enterprise",
        "operationId": "enterprise.getById",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathEnterpriseId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EnterpriseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "wallets": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "description": "base address a v1 btc wallet"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`EnterpriseNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update enterprise",
        "operationId": "enterprise.update",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathEnterpriseId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnterprise"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enterprise"
                }
              }
            }
          },
          "202": {
            "description": "A Pending Approval for the Update has been created and is waiting for approval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V1PendingApproval"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "`NotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/enterprise": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "List enterprises",
        "operationId": "enterprise.list",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnterprisesResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "`EnterpriseNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/enterprise/{enterpriseId}/user": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "List enterprise users",
        "operationId": "enterprise.user.list",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathEnterpriseId"
          },
          {
            "name": "allowInactiveAdmins",
            "in": "query",
            "description": "Whether inactive admins should be returned as well",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnterpriseUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`EnterpriseNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Add user to enterprise",
        "operationId": "v1.enterprise.user.add",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathEnterpriseId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddEnterpriseUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "202": {
            "description": "Pending Approval(s) for adding the User(s) ha(s|ve) been created and (is|are) waiting for approval",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/V1PendingApproval"
                    },
                    {
                      "$ref": "#/components/schemas/V1PendingApprovals"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`EnterpriseNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Remove user from enterprise",
        "operationId": "v1.enterprise.user.remove",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathEnterpriseId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteEnterpriseUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "202": {
            "description": "A Pending Approval for removing the User has been created and is waiting for approval",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pendingApprovals": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/V1PendingApproval"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`UserNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/enterprise/{enterpriseId}/user": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Add user to enterprise",
        "operationId": "v2.enterprise.user.add",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathEnterpriseId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddEnterpriseUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "202": {
            "description": "Pending Approval for adding a user was created and is waiting to be approved",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PendingApproval"
                    },
                    {
                      "$ref": "#/components/schemas/PendingApprovals"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`EnterpriseNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Remove user from enterprise",
        "operationId": "v2.enterprise.user.remove",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathEnterpriseId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteEnterpriseUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "202": {
            "description": "A Pending Approval for removing the User has been created and is waiting for approval",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pendingApprovals": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PendingApproval"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`UserNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/enterprise/{enterpriseId}/freeze": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Freeze the enterprise",
        "operationId": "enterprise.freeze",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathEnterpriseId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreezeEnterprise"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Freeze"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The User needs to unlock with OTP first"
          }
        }
      }
    },
    "/api/v2/enterprise/{enterpriseId}/walletLimits": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get enterprise's wallet limits",
        "operationId": "enterprise.walletLimits",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathEnterpriseId"
          },
          {
            "$ref": "#/components/parameters/coinSingleOrList"
          },
          {
            "name": "isCustodial",
            "in": "query",
            "description": "Whether custodial limits should be returned",
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletLimitsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`EnterpriseNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/enterprise/{enterpriseId}/transfer": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "List all transfers on all wallets in an enterprise",
        "description": "Returns all the transfers without blockchain information (inputs, outputs, confirms). Use the coin specific route\nto annotate blockchain information.\n",
        "operationId": "v2.enterprise.listtransfers",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathEnterpriseId"
          },
          {
            "$ref": "#/components/parameters/dateGte"
          },
          {
            "$ref": "#/components/parameters/dateLt"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/prevId"
          },
          {
            "$ref": "#/components/parameters/state"
          },
          {
            "$ref": "#/components/parameters/type"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transfers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Transfer"
                      }
                    },
                    "nextBatchPrevId": {
                      "$ref": "#/components/schemas/NextBatchPrevId"
                    }
                  },
                  "required": [
                    "transfers"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`EnterpriseNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/transfer": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "List transfers on all wallets in an enterprise for a given coin and block height",
        "description": "Returns all the transfers. Currently requires an enterpriseId and block height.\n",
        "operationId": "v2.listtransfers",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "name": "enterpriseId",
            "in": "query",
            "description": "The enterprise ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "The block or ledger height to query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegerString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransfersResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`EnterpriseNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/tx/fee": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get fee estimate",
        "description": "Returns the estimated fee for a transaction. UTXO coins will return a fee per kB, while Account-based coins will return a flat fee estimate",
        "operationId": "v2.tx.getfeeestimate",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "name": "numBlocks",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "description": "target number of blocks"
          },
          {
            "name": "recipient",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "Recipient of the tx to estimate for (only for ETH)"
          },
          {
            "name": "data",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "ETH data of the tx to estimate for (only for ETH)"
          },
          {
            "name": "amount",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "Amount in base units being sent to estimate for (only for ETH)"
          },
          {
            "name": "hop",
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "description": "True if we are estimating for a hop tx, false or unspecified for a wallet tx (only ETH and AVAXC)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EstimateTransactionFees"
                    },
                    {
                      "$ref": "#/components/schemas/EstimateTransactionFeesEth"
                    },
                    {
                      "$ref": "#/components/schemas/EstimateTransactionFeesAccountCoin"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "`CoinUnsupported` or `Invalid`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/averagefee": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get average fee",
        "description": "Returns the average fee for a specific number of blocks. Only for ETH and TETH.",
        "operationId": "v2.wallet.getaveragefee",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "name": "numBlocks",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "description": "target number of blocks"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AverageFee"
                }
              }
            }
          },
          "400": {
            "description": "`CoinUnsupported` or `Invalid`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user",
        "description": "Returns the associated user\n",
        "operationId": "user.get",
        "parameters": [
          {
            "name": "id",
            "description": "The user ID, email address, or `me` for the currently authenticated user",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidUserId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo.me({}, function callback(err, user) {\n  if (err) {\n    // handle error\n  }\n  // etc\n});\n"
          }
        ]
      }
    },
    "/api/v2/user/sharingkey": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get another users public key for wallet sharing",
        "operationId": "user.sharingkey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSharingKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/key/{id}": {
      "get": {
        "tags": [
          "Key"
        ],
        "summary": "Get key",
        "operationId": "v2.key.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Key"
                    },
                    {
                      "$ref": "#/components/schemas/KeyTSS"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid coin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let keyId = '58c1f8a0781a5df8380e0e304b228c68';\n\nbitgo\n  .coin('tbtc')\n  .keychains()\n  .get({ id: keyId })\n  .then(function (keychain) {\n    // print the keychain\n    console.dir(keychain);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/key": {
      "get": {
        "tags": [
          "Key"
        ],
        "summary": "List keys",
        "operationId": "v2.key.list",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeysResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Coin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo\n  .coin('tbtc')\n  .keychains()\n  .list()\n  .then(function (keychain) {\n    // print the keychains\n    console.dir(keychains);\n  });\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Key"
        ],
        "summary": "Create key",
        "operationId": "v2.key.add",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new independent or TSS Key",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Key"
                    },
                    {
                      "$ref": "#/components/schemas/KeyTSSCreated"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid Coin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "// Create user key.\nlet userKey = bitgo.coin('tbtc').keychains().create();\n\n// Create BitGo key.\nlet bitGoKey = bitgo.coin('tbtc').keychains().createBitGo();\n\n// Create backup key.\nlet backupKey = bitgo.coin('tbtc').keychains().createBackup({ provider: 'cme' });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/policy/rule": {
      "post": {
        "tags": [
          "Policy"
        ],
        "summary": "Add policy rule",
        "description": "Adds a rule to a wallet’s policy. A wallet policy’s rules control the\nconditions under which BitGo will use its single key to sign a\ntransaction. An email notification will be sent to all wallet users\nwhen a policy is updated. This email is NOT sent for the first time\npolicy is added.\n",
        "operationId": "v2.wallet.createpolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyRule"
              },
              "examples": {
                "Add Advanced Whitelist Example": {
                  "value": {
                    "id": "my-rule-id",
                    "type": "advancedWhitelist",
                    "condition": {
                      "add": {
                        "type": "my-wallet-id",
                        "item": "my-item-id",
                        "metaData": {
                          "label": "Recipient Wallet"
                        }
                      }
                    },
                    "action": {
                      "type": "getApproval",
                      "userIds": []
                    }
                  }
                },
                "Remove Advanced Whitelist Example": {
                  "value": {
                    "id": "my-rule-id",
                    "type": "advancedWhitelist",
                    "condition": {
                      "remove": "my-address"
                    },
                    "action": {
                      "type": "getApproval"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "202": {
            "description": "A Pending Approval for the update has been created and is waiting for approval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingApproval"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Policy"
        ],
        "summary": "Update policy rule",
        "description": "Updates a rule on the policy attached to a wallet",
        "operationId": "v2.wallet.updatepolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRemovePolicyRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "202": {
            "description": "A Pending Approval for the update has been created and is waiting for approval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingApproval"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Policy"
        ],
        "summary": "Delete policy rule",
        "description": "Deletes a rule from the policy attached to a wallet",
        "operationId": "v2.wallet.removepolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRemovePolicyRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "202": {
            "description": "A Pending Approval for the update has been created and is waiting for approval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingApproval"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/pendingApprovals": {
      "get": {
        "tags": [
          "Pending approval"
        ],
        "summary": "List pending approvals",
        "operationId": "v2.approval.list",
        "parameters": [
          {
            "$ref": "#/components/parameters/prevId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/coinArray"
          },
          {
            "$ref": "#/components/parameters/enterpriseId"
          },
          {
            "name": "state",
            "description": "Filter by state.  The default behavior is to return objects where state is `awaitingSignature`, `pending`, or `pendingFinalApproval`\n",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PendingApprovalStatePending"
              }
            }
          },
          {
            "$ref": "#/components/parameters/walletId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingApprovals"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let walletId = '590bb3598005caaf07b5bffbe35f3c11';\n\npendingapproval()\n  .list(walletId)\n  .then(function (list) {\n    // Print approval list\n    console.dir(list);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/pendingApprovals/{id}": {
      "get": {
        "tags": [
          "Pending approval"
        ],
        "summary": "Get pending approval",
        "operationId": "v2.approval.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingApproval"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pending approval"
        ],
        "summary": "Update pending approval",
        "description": "Updates the state of a pending approval to `approved` or `rejected`.\nYou can manage pending approvals programmatically by API or with the\nBigGo web UI. Ensure your authentication token has the proper scope.\nWhen creating an access token in the web UI, check the permission,\n\"Update Pending Approvals\" (under \"Account Settings\" &gt; \"Developer\nOptions\" &gt; \"Access Tokens\").\n\nBitGo recommends that you create a webhook policy so that you can\nautomate approving and rejecting transactions.\n",
        "operationId": "v2.approval.update",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated pending approval state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingApproval"
                }
              }
            }
          },
          "202": {
            "description": "Further approvals are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingApproval"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/user/login": {
      "post": {
        "description": "Creates a short-lived (1 hour) access token for use with the API.  The token must be specified to subsequent\nAPI calls via the `Authorization` HTTP header:\n```text\nAuthorization: Bearer 9b72c68ef394f5146f0f3efc1feafb7a971752cb00e79fafcfd8c1d2db83639c\n```\nWe don't recommend using this endpoint for scripting.  The preferred\napproach is to create a long-lived token in the web UI (see the\nDeveloper Options section in User Settings).\n",
        "tags": [
          "User",
          "Express"
        ],
        "summary": "Login",
        "operationId": "user.login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the access token and user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo.authenticate({ username: user, password: password, otp: '0000000' }).then(function (response) {\n  var token = response.token;\n  var user = response.user;\n  // etc\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/transfer": {
      "get": {
        "tags": [
          "Transfer",
          "Wallet"
        ],
        "summary": "List transfers",
        "description": "Returns deposits and withdrawals for a wallet.  Transfers are sorted\nin descending order by `height`, then `id`. Transfers with `rejected`\nand `pendingApproval` states are excluded by default.\n",
        "operationId": "v2.wallet.listtransfers",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/allTokens"
          },
          {
            "$ref": "#/components/parameters/dateGte"
          },
          {
            "$ref": "#/components/parameters/dateLt"
          },
          {
            "$ref": "#/components/parameters/height"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/prevId"
          },
          {
            "$ref": "#/components/parameters/state"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/valueGte"
          },
          {
            "$ref": "#/components/parameters/valueLt"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter for a transfer by one or more transfer ids",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "pendingApprovalId",
            "in": "query",
            "description": "Filter for a transfer with a matching pendingApprovalId",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Return transfers with elements in `entries` that have an `address` field set to this value",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AddressString"
              }
            }
          },
          {
            "name": "includeHex",
            "in": "query",
            "description": "Include the raw hex data of the transaction in the response (this may be a large amount of data)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "memoId",
            "in": "query",
            "description": "Return transfers with any of the payment identifiers in this array. Available for Stellar and EOS.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IntegerString"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransfersResponse"
                }
              }
            }
          },
          "400": {
            "description": "`CoinUnsupported` or `Invalid`",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`EnterpriseNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "wallet.transfers().then(function (transfers) {\n  // print transfers\n  console.dir(transfers);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/transfer/{transferId}": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get transfer",
        "description": "A transfer is a wallet specific object. Each transfer will only output the respective wallet id which the\ntransfer is associated with.\n\nIf there is a transaction between two BitGo wallets, then two transfers will be created, one for wallet A,\nand one for wallet B. Transfer A will only annotate the walletId on entries where the address belongs to\nwallet A. Transfer B will only annotate the walletId on entries where the address belongs to wallet B.\n",
        "operationId": "v2.wallet.gettransfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathTransferId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotatedTransferWithInputsOutputs"
                }
              }
            }
          },
          "206": {
            "description": "Incomplete data. Transaction inputs and outputs not available yet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotatedTransfer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidTransferId"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let transferId = '591623989c043ab2079857ee53d812f0';\nwallet.getTransfer({ id: transferId }).then(function (transfer) {\n  // print the transfer object\n  console.dir(transfer);\n});\n\n// we can also pass a on-chain txid (BTC)\nlet txId = 'f5d8ee39a430901c91a5917b9f2dc19d6d1a0e9cea205b009ca73dd04470b9a5';\nwallet.getTransfer({ id: txId }).then(function (transfer) {\n  console.dir(transfer);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/transfer/sequenceId/{sequenceId}": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get transfer by sequence id",
        "operationId": "v2.wallet.gettransferbysequenceid",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathSequenceId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotatedTransferWithInputsOutputs"
                }
              }
            }
          },
          "206": {
            "description": "Partial content -- unconfirmed transfer, does not contain inputs or outputs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotatedTransfer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-sample": [
          {
            "lang": "javascript",
            "source": "let sequenceId = 'hello123';\nwallet.transferBySequenceId({ sequenceId: sequenceId }).then(function (transfer) {\n  // print the transfer object\n  console.dir(transfer);\n});\n"
          }
        ]
      }
    },
    "/api/v2/user/logout": {
      "get": {
        "summary": "Logout",
        "description": "Disables an access token",
        "tags": [
          "User"
        ],
        "operationId": "user.logout",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v2/user/session": {
      "get": {
        "description": "Returns the session associated with access token passed via the `Authorization` header.\n",
        "tags": [
          "User"
        ],
        "summary": "Get session",
        "operationId": "user.getsession",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session": {
                      "$ref": "#/components/schemas/Session"
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo.session({}, function callback(err, session) {\n  if (err) {\n    // handle error\n  }\n  console.dir(session);\n});\n"
          }
        ]
      }
    },
    "/api/v2/user/lock": {
      "post": {
        "description": "Locks the current user session.  This disallows operations that require\nan unlocked token, such as sending a transaction.\n",
        "tags": [
          "User"
        ],
        "summary": "Lock session",
        "operationId": "user.lock",
        "responses": {
          "200": {
            "description": "Returns the access token and User",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session": {
                      "$ref": "#/components/schemas/LockedSession"
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo.lock({}).then(function (lockResponse) {\n  // …\n});\n"
          }
        ]
      }
    },
    "/api/v2/user/unlock": {
      "post": {
        "description": "Unlocks thes current user session.  This allows operations that require\nan unlocked token, such as sending a transaction.  Call this endpoint\nwhen an API returns a `401` response with the `needsUnlock`\nbody parameter set to `true`.\n",
        "tags": [
          "User"
        ],
        "summary": "Unlock session",
        "operationId": "user.unlock",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session": {
                      "$ref": "#/components/schemas/Session"
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo.unlock({ otp: '0000000' }).then(function (unlockResponse) {\n  console.dir(unlockResponse);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Add wallet (advanced only)",
        "description": "Add Wallet is for advanced API users. It lets you manually create and\nspecify keys. The recommended (and simpler) method is [Generate Wallet](https://app.bitgo.com/docs/#operation/express.wallet.generate)\nwith the SDK or BitGo Express. You can also create wallets in the BitGo UI.\n\nThis API creates a new wallet for the user or enterprise. The keys to\nuse with the new wallet (passed in the 'keys' parameter) must be\nregistered with BitGo prior to using this API.\n\nBitGo currently only supports 2-of-3 (e.g., m=2 and n=3) wallets. The\nthird key, and only the third key, must be a BitGo key. The first key\nis by convention the user key, with its encrypted xprv stored on BitGo.\n\nEthereum and XRP wallets can only be created under an enterprise. Pass in the\nid of the enterprise to associate the wallet with. Your enterprise id\ncan be seen by clicking on the \"Manage Organization\" link in the\nenterprise dropdown. Using the Add Wallet API, you can create a wallet\nusing either the enterprise fee address (used by default for all\nwallets in the enterprise), or a unique fee address (created manually\nwith the Keychains API). Pass the desired key as the third key ID in\nthe 'keys' array. In either case, the fee address must be funded\nbefore creating the wallet.\n\nYou cannot generate a wallet by passing in a subtoken (i.e. ERC20 token) as the coin.\nSubtokens use the wallet of their parent coin and it is not possible to create a\nwallet specific to one token. For example, to create a wallet for an ERC20 token,\ncreate an Ethereum wallet. It can hold any ERC20 tokens as well as Ether.\n\nBitGo Ethereum wallet is a smart-contract implementing multi-signature scheme.\nBecause contracts itself can not initiate transactions, fee addresses are used\nfor this purpose. Ethereum transactions initiated by a given address, are\nconfirmed by the network in order of creation, so one lower fee transaction can\npotentially delay all subsequent transactions. To help lower network fee costs,\ntwo fee addresses are provided.\n\n`feeAddress` is a main fee address usable for all operations.\n`lowPriorityFeeAddress` is a secondary fee address that can be used to pay\nlower fee for Create Address operations without risking delaying subsequent\nhigher-priority transactions initiated by main fee address.\n",
        "operationId": "v2.wallet.add",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWallet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "`CustodialWalletLimitReachedError`, `MustHaveColdWalletLicenseError`, `MustHaveCustodialWalletLicenseError`, `WalletLimitReachedError`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo\n  .coin('teth')\n  .wallets()\n  .add({\n    label: 'My Wallet',\n    m: 2,\n    n: 3,\n    keys: ['591a40dc422326ff248919e62a02b2be', '591a40dd422326ff248919e91caa8b6a', '591a40dc9fdde805252f0d87f76577f8'],\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n"
          }
        ]
      },
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "List wallets by coin",
        "operationId": "v2.wallet.listbycoin",
        "description": "Get a list of all wallets per coin, for example, all <i>Bitcoin</i> wallets in your enterprise.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/prevId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/allTokens"
          },
          {
            "$ref": "#/components/parameters/searchLabelWallets"
          },
          {
            "$ref": "#/components/parameters/showAllWallets"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletsWithCoinResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid prev id or invalid coin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo\n  .coin('tbtc')\n  .wallets()\n  .list({})\n  .then(function (wallets) {\n    // print the wallets\n    console.dir(wallets);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/wallets": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "List wallets",
        "operationId": "v2.wallet.list",
        "description": "Get a list of all wallets for which you have permission. To narrow your search, use the <b>List wallets</b> parameters below or call <b>List wallets by coin</b>, <b>Get Wallet</b> (by `coin` and `walletId`) or <b>Get wallet by address</b> (by `coin` and `address`).<br><br>\nCompare the List/Get wallet APIs&#58; <ul> <li><b>List wallets</b> returns 1 or more wallets for 1 or more coins across 1 or more enterprises (within an array).</li> <li><b>List wallets by coin</b> returns 1 or more wallets <i>for one coin only</i> across 1 or more enterprises (within an array).</li> <li><b>Get wallet</b> and <b>Get wallet by address</b> return one wallet.</li> </ul>\nTest the List/Get wallet APIs. With the same parameter values, these calls should return the same wallet (with minor differences in the responses)&#58;\n<table> <tr> <th>API</th> <th>URL</th></tr> <tr> <td><b>List wallets</b></td> <td><code>{{baseUrl}}/api/v2/wallets?coin={coin}&enterprise={enterpriseid}&id={walletId}&expandBalance=true</code></td></tr> <tr> <td><b>List wallets by coin</b></td> <td><code>{{baseUrl}}/api/v2/{coin}/wallet?enterprise={enterpriseid}&searchLabel={wallet name}</code></td></tr> <tr> <td><b>Get wallet</b></td> <td><code>{{baseUrl}}/api/v2/{coin}/wallet/{walletId}</code></td></tr> <tr> <td><b>Get wallet by address</b></td> <td><code>{{baseUrl}}/api/v2/{coin}/wallet/address/{address}</code></td></tr> </table>",
        "parameters": [
          {
            "$ref": "#/components/parameters/coinArray"
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted state",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              },
              "default": [
                false
              ]
            }
          },
          {
            "$ref": "#/components/parameters/queryEnterpriseArray"
          },
          {
            "name": "enterpriseIsNull",
            "in": "query",
            "description": "Filter by whether the enterprise field is null",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "expandBalance",
            "in": "query",
            "description": "Add `balanceString` and `spendableBalanceString` to each wallet",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/queryIdArray"
          },
          {
            "name": "labelContains",
            "in": "query",
            "description": "Filter by label substring",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/prevId"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by wallet type",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WalletTypePublic"
              }
            }
          },
          {
            "name": "expandCustodialWallet",
            "description": "Whether linked custodial wallets should be expanded inline",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/BalanceNotAvailable"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/address/{address}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get wallet by address",
        "operationId": "v2.wallet.getwalletbyaddress",
        "description": "Get one wallet by its `coin` and receive `address`. Multiple receive addresses can map to one `walletId`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathAddress"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "400": {
            "description": "invalid wallet address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "`WalletNotFound` or invalid coin"
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let address = '2MyzG53Z6nF7UdNt7otEMtGNiEAEe2t2eSY';\nbitgo\n  .coin('tbtc')\n  .wallets()\n  .getWalletByAddress({ address: address })\n  .then(function (wallet) {\n    // print the wallet\n    console.dir(wallet._wallet);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get wallet",
        "operationId": "v2.wallet.get",
        "description": "Get one wallet by its `coin` and `walletId`. One `walletId` can map to multiple receive addresses.",
        "parameters": [
          {
            "$ref": "#/components/parameters/allTokens"
          },
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Wallet"
                    },
                    {
                      "$ref": "#/components/schemas/WalletBalance"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let walletId = '585c51a5df8380e0e3082e46';\nbitgo\n  .coin('tbtc')\n  .wallets()\n  .get({ id: walletId })\n  .then(function (wallet) {\n    // print the wallet\n    console.dir(wallet._wallet);\n  });\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Wallet"
        ],
        "summary": "Update wallet",
        "operationId": "v2.wallet.update",
        "description": "Update a wallet by its `coin` and `walletId`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWallet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated wallet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Wallet"
        ],
        "summary": "Delete wallet",
        "description": "Delete one wallet by its `coin` and `walletId`. Once removed, you can no longer view or access this wallet, but it does remain accessible to other wallet users. If you are the only user on this wallet, you can only delete it if it has a 0 balance.",
        "operationId": "v2.wallet.remove",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated wallet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "`WalletHasNonZeroBalanceError`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/user/{userId}": {
      "delete": {
        "tags": [
          "Wallet"
        ],
        "summary": "Remove user from wallet",
        "description": "After a user has accepted a wallet share, they become a party on a\nwallet and the wallet share is considered “complete”. In order to\nrevoke the share after they have accepted, you can remove the user\nfrom the wallet.\n\nThis operation requires approval by another wallet administrator\nif there is more than a single administrator on a wallet.\n",
        "operationId": "v2.wallet.removeuser",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathUserId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/CannotRemoveAdmin"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidUserId"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`WalletNotFound` or invalid coin"
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo\n  .coin('tbtc')\n  .wallets()\n  .get({ id: walletId })\n  .then(function (wallet) {\n    wallet.removeUser({ user: userId }).then(function (wallet) {\n      console.dir(wallet);\n    });\n  });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/freeze": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Freeze wallet",
        "description": "Lock the wallet, preventing any outgoing transactions for a specified number of seconds",
        "operationId": "v2.wallet.freeze",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "duration": {
                    "type": "number",
                    "description": "time in seconds"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Freeze"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "'needs unlock', 'Access token lacks required scope for this action'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "`WalletNotFound` or invalid coin"
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "wallet.freeze({ otp: '0000000' }).then(function (freeze) {\n  console.dir(freeze);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/unspents": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get unspents",
        "description": "Returns unspent transaction outputs for a wallet",
        "operationId": "v2.wallet.unspents",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/maxValue"
          },
          {
            "$ref": "#/components/parameters/minConfirms"
          },
          {
            "$ref": "#/components/parameters/enforceMinConfirmsForChange"
          },
          {
            "$ref": "#/components/parameters/minHeight"
          },
          {
            "$ref": "#/components/parameters/minValue"
          },
          {
            "$ref": "#/components/parameters/prevId"
          },
          {
            "$ref": "#/components/parameters/segwit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletUnspents"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "`Forbidden` when wallet count exceeds limit of 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "`WalletNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "wallet.unspents().then(function (unspents) {\n  // print unspents\n  console.dir(unspents);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/maximumSpendable": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get maximum spendable",
        "description": "Returns the maximum amount that can be spent with a single transaction\non the wallet.\n\nThe maximum spendable amount can differ from a wallet’s total balance.\nA transaction can only use up to 200 unspents. Wallets that have more\nthan 200 unspents cannot spend the full balance in one transaction.\nAdditionally, the value returned for the maximum spendable amount\naccounts for the current fee level by deducting the estimated fees.\nThe amount will only be calculated based on the unspents that fit the\nparameters passed.\n",
        "operationId": "v2.wallet.maximumspendable",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/allTokens"
          },
          {
            "$ref": "#/components/parameters/enforceMinConfirmsForChange"
          },
          {
            "$ref": "#/components/parameters/feeRate"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/maxFeeRate"
          },
          {
            "$ref": "#/components/parameters/maxValue"
          },
          {
            "$ref": "#/components/parameters/minConfirms"
          },
          {
            "$ref": "#/components/parameters/minHeight"
          },
          {
            "$ref": "#/components/parameters/minValue"
          },
          {
            "$ref": "#/components/parameters/numBlocks"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletMaximumSpendable"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`WalletNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "wallet.maximumSpendable(params).then(function (amount) {\n  // print maximum spendable amount\n  console.dir(amount);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/spending": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get spending limits and current amount spent",
        "description": "Returns the wallet's currently configured spending limits and the current\namount spent during the periods defined by the spending limits.\n",
        "operationId": "v2.wallet.spending",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletSpending"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "`WalletNotFound`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/reservedunspents": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Make unspent reservation",
        "description": "Mark the unspents as reserved and cannot be used in transactions until the given expire time.",
        "operationId": "v2.wallet.reservedunspent.add",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unspentIds": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "$ref": "#/components/schemas/UnspentId"
                    }
                  },
                  "expireTime": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "unspentIds",
                  "expireTime"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unspents": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ReservedUnspent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "`Invalid` query properties",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Wallet"
        ],
        "summary": "Release unspent reservation",
        "description": "Release unspents from reservation to be accessible for transactions.",
        "operationId": "v2.wallet.reservedunspent.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UnspentId"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unspents": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ReservedUnspent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "`Invalid` query properties or reservation doesn't exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "List unspent reservation",
        "description": "Query reserved unspents in the wallet.",
        "operationId": "v2.wallet.reservedunspent.list",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "name": "prevId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "expireTimeGt",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "expireTimeLte",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unspents": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ReservedUnspent"
                      }
                    },
                    "nextBatchPrevId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "`Invalid` query properties or reservation doesn't exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Wallet"
        ],
        "summary": "Modifying unspent reservation",
        "description": "Modify expire time of reserved unspents.",
        "operationId": "v2.wallet.reservedunspent.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unspentIds": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "$ref": "#/components/schemas/UnspentId"
                    }
                  },
                  "changes": {
                    "type": "object",
                    "properties": {
                      "expireTime": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                },
                "required": [
                  "unspentIds",
                  "changes"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unspents": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ReservedUnspent"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "`Invalid` query properties or reservation doesn't exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/balances": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "List total balances",
        "description": "Selects wallets based on the given filter parameters. Gets all balances for the selected wallets and sums up the\nbalances by coin.\n",
        "operationId": "v2.wallet.gettotalbalances",
        "parameters": [
          {
            "$ref": "#/components/parameters/coinArray"
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted state",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              },
              "default": [
                false
              ]
            }
          },
          {
            "$ref": "#/components/parameters/queryEnterpriseArray"
          },
          {
            "$ref": "#/components/parameters/queryIdArray"
          },
          {
            "name": "labelContains",
            "in": "query",
            "description": "Filter by label substring",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by wallet type",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WalletTypePublic"
              }
            }
          },
          {
            "name": "expandCustodialWallet",
            "description": "Whether balances of linked custodial wallets should be included",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotalBalances"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/requestreshare": {
      "post": {
        "tags": [
          "Wallet share"
        ],
        "summary": "Request wallet reshare",
        "description": "Indicates that the calling user has lost access to the user key and would like to it to be reshared with them.",
        "operationId": "v2.wallet.sharing.requestreshare",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "//api/v2/{coin}/wallet/{walletId}/share": {
      "post": {
        "tags": [
          "Wallet share"
        ],
        "summary": "Create a wallet share",
        "description": "Share wallet with an existing BitGo user",
        "operationId": "v2.wallet.sharing.createshare",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareWalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/rejectreshare": {
      "post": {
        "tags": [
          "Wallet share"
        ],
        "summary": "Reject a wallet reshare request",
        "description": "If a user requested a reshare, another admin on the wallet can use this endpoint to reject their reshare request.",
        "operationId": "v2.wallet.sharing.rejectreshare",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectReshare"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/walletshares": {
      "get": {
        "tags": [
          "Wallet share"
        ],
        "summary": "List wallet shares",
        "description": "List shares of all wallets with other BitGo users. Returns only wallets on which the current user has spend permission.",
        "operationId": "v2.wallet.sharing.listallshares",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWalletSharesResponse"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo\n  .coin('tbtc')\n  .wallets()\n  .listShares({})\n  .then(function (shares) {\n    console.dir(shares);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/walletshare/{shareId}": {
      "get": {
        "tags": [
          "Wallet share"
        ],
        "summary": "Get a wallet share",
        "description": "Get a wallet share, including the encrypted shared keychain. Token unlock is required if the wallet share includes a keychain.",
        "operationId": "v2.wallet.sharing.getshare",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathShareId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletShare"
                }
              }
            }
          },
          "401": {
            "description": "`Unauthorized` when the current user lacks permission to either manage or create wallets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo\n  .coin('tbtc')\n  .wallets()\n  .getShare({ walletShareId: shareId })\n  .then(function (share) {\n    console.dir(share);\n  });\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Wallet share"
        ],
        "summary": "Update a wallet share",
        "operationId": "v2.wallet.sharing.updateshare",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathShareId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "$ref": "#/components/schemas/WalletShareState"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateWalletShareResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Wallet share"
        ],
        "summary": "Cancel a wallet share",
        "description": "Cancels a pending outgoing wallet share, or rejects an incoming share.\nThe share must not have been accepted yet.\n",
        "operationId": "v2.wallet.sharing.cancelshare",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathShareId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateWalletShareResponse"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo\n  .coin('tbtc')\n  .wallets()\n  .cancelShare({\n    walletShareId: shareId,\n  })\n  .then(function (result) {\n    console.dir(result);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/walletshare/{shareId}/resendemail": {
      "post": {
        "tags": [
          "Wallet share"
        ],
        "summary": "Resend a wallet share invitation email",
        "description": "Resends the wallet share invitation to the share recipient. The wallet\nshare must not have been accepted yet.\n",
        "operationId": "v2.wallet.sharing.resendemail",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathShareId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResendShareEmailResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Invalid` when either the share id is invalid or the wallet share is not active",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "`Unauthorized` when the current user lacks permission to manage wallets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo\n  .coin('tbtc')\n  .wallets()\n  .resendShareInvite({ walletShareId: shareId })\n  .then(function (share) {\n    console.dir(share);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/webhooks": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Add wallet webhook",
        "description": "Add a webhook that will result in an HTTP callback at the\nspecified URL from BitGo when events are triggered. There\nis a limit of 10 webhooks of each type per wallet.\n\nTypes of wallet webhooks available:\n\n1. Transfer webhooks will fire on any transfer on the wallet.\n2. Pending approval webhooks will fire when an event triggers\n  policy on the wallet (e.g send transaction, user change, policy\n  change, pending approval updated).\n3. (Ripple, ETH only) Address confirmation webhooks will fire\n  when an address has been initialized on the wallet.\n\nNote that an unconfirmed webhook notification won't be triggered if\na transaction is confirmed on chain immediately after it is sent, or if is an\n[RBF](https://bitcoinops.org/en/topics/replace-by-fee/) transaction. API\nusers are *not* supposed to expect 'unconfirmed' notifications in these cases.\n",
        "operationId": "v2.wallet.addwebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "allToken": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/Webhook"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "var walletId = '58d99…39604';\nvar url = 'http://your.server.com/webhook';\n\nbitgo\n  .coin('tbtc')\n  .wallets()\n  .get({ id: walletId })\n  .then(function (wallet) {\n    return wallet.addWebhook({\n      url: url,\n      type: 'transfer',\n    });\n  })\n  .then(function (webhook) {\n    // print the new webhook\n    console.dir(webhook);\n  });\n"
          }
        ]
      },
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "List wallet webhooks",
        "description": "List webhooks set up on the wallet. Currently, the types of\nwebhooks that can be attached to a wallet are `transfer`,\n`pendingapproval`, and `address_confirmation` notifications.\n",
        "operationId": "v2.wallet.listwebhooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhooks": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Webhook"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "walletId": {
                                "$ref": "#/components/schemas/Id"
                              },
                              "allToken": {
                                "type": "boolean",
                                "example": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "var walletId = '58d99…39604';\n\nbitgo\n  .coin('tbtc')\n  .wallets()\n  .get({ id: walletId })\n  .then(function (wallet) {\n    return wallet.listWebhooks();\n  })\n  .then(function (webhooks) {\n    console.dir(webhooks);\n  });\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Remove wallet webhook",
        "description": "Removing a webhook will cause new events of the specified type to no\nlonger trigger HTTP callbacks to your URLs\n",
        "operationId": "v2.wallet.removewebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/WebhookTypeWallet",
                    "description": "Type of the webhook (e.g. transfer, pendingapproval)."
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://your.server.com/user_webhook"
                  },
                  "id": {
                    "$ref": "#/components/schemas/Id"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "removed": {
                      "type": "integer",
                      "example": 1,
                      "description": "Number of wallet webhooks removed."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "var walletId = '58d99…39604';\nvar url = 'http://your.server.com/webhook';\n\nbitgo\n  .coin('tbtc')\n  .wallets()\n  .get({ id: walletId })\n  .then(function (wallet) {\n    return wallet.removeWebhook({\n      url: url,\n      type: 'transfer',\n    });\n  })\n  .then(function (result) {\n    console.dir(result);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/webhooks/{webhookId}/simulate": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Simulate wallet webhook",
        "description": "Simulates and tests a webhook so you can view its response. A\n`transferId` or `pendingApprovalId` is required.\n",
        "operationId": "v2.wallet.simulatewebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathWebhookId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transferId": {
                    "$ref": "#/components/schemas/Id"
                  },
                  "pendingApprovalId": {
                    "$ref": "#/components/schemas/Id"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhookNotifications": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "wallet": {
                                "$ref": "#/components/schemas/Id"
                              },
                              "transfer": {
                                "$ref": "#/components/schemas/Id"
                              },
                              "hash": {
                                "$ref": "#/components/schemas/TxId"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/WebhookNotification"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "wallet\n  .simulateWebhook({\n    webhookId: '590cd…35835',\n    transferId: '59b70…dbd44',\n  })\n  .then(function (result) {\n    console.dir(result);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/webhooks": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Add block webhook",
        "description": "Adds a webhook that will result in an HTTP callback at the\nspecified URL from BitGo when events are triggered.\n\nTypes of block webhooks:\n\n1. Block webhooks will fire when a new block is seen on the coin network.\n2. Wallet confirmation webhooks will fire when a wallet has been initialized.\n",
        "operationId": "v2.webhooks.add",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBlockWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "$ref": "#/components/schemas/WebhookTypeBlock"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/Id"
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/Webhook"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "'Webhook already exists', 'Invalid url'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "var baseCoin = bitgo.coin('tbtc');\nvar webhooks = baseCoin.webhooks();\n\nwebhooks\n  .add({\n    url: 'http://your.server.com/user_webhook',\n    type: 'block',\n    label: 'Test User Webhook',\n    numConfirmations: 1,\n  })\n  .then(function (result) {\n    console.dir(result);\n  });\n"
          }
        ]
      },
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "List block webhooks",
        "description": "Returns block webhooks. The types of webhooks are `block` and\n`wallet_confirmation` notifications.\n",
        "operationId": "v2.webhooks.list",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhooks": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "$ref": "#/components/schemas/WebhookTypeBlock"
                              },
                              "userId": {
                                "$ref": "#/components/schemas/Id"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/Webhook"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "var baseCoin = bitgo.coin('tbtc');\nvar webhooks = baseCoin.webhooks();\n\nwebhooks.list().then(function (result) {\n  console.dir(result);\n});\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Remove block webhook",
        "description": "Removing a webhook will cause new events of the specified type to no\nlonger trigger HTTP callbacks to your URLs.\n",
        "operationId": "v2.webhooks.remove",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/WebhookTypeBlock"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://your.server.com/user_webhook"
                  },
                  "id": {
                    "$ref": "#/components/schemas/Id"
                  }
                },
                "required": [
                  "type",
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "removed": {
                      "type": "integer",
                      "example": 1,
                      "description": "Number of block webhooks removed."
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "var baseCoin = bitgo.coin('tbtc');\nvar webhooks = baseCoin.webhooks();\n\nwebhooks\n  .remove({\n    url: 'http://your.server.com/user_webhook',\n    type: 'block',\n  })\n  .then(function (result) {\n    console.dir(result);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/webhooks/{webhookId}/simulate": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Simulate block webhook",
        "description": "Simulates and tests a block webhook so you can view its response.\n",
        "operationId": "v2.webhooks.simulate",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWebhookId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "blockId": {
                    "$ref": "#/components/schemas/BlockHash"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhookNotifications": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "hash": {
                                "$ref": "#/components/schemas/BlockHash"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/WebhookNotification"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "var baseCoin = bitgo.coin('tbtc');\nvar webhooks = baseCoin.webhooks();\n\nwebhooks\n  .simulate({\n    webhookId: '590cd…35835',\n    blockId: '00000…507d6',\n  })\n  .then(function (result) {\n    console.dir(result);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/xlm/federation": {
      "get": {
        "tags": [
          "Federation"
        ],
        "summary": "Look up user accounts by their Stellar address or id",
        "description": "Types of searches available:\n\n1. By name: Resolve a Stellar address into an account\n2. By id: Resolve an account id into an account\n",
        "operationId": "v2.federation",
        "parameters": [
          {
            "$ref": "#/components/parameters/queryFederationQ"
          },
          {
            "$ref": "#/components/parameters/queryFederationType"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "account_id": {
                      "type": "string"
                    },
                    "stellar_address": {
                      "type": "string"
                    },
                    "memo_type": {
                      "type": "string"
                    },
                    "memo": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "'Unsupported type', 'lookup queries not allowed for domain', 'invalid username', 'invalid id'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FederationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/sendlabels": {
      "get": {
        "tags": [
          "Send label"
        ],
        "summary": "List send labels",
        "description": "List all send labels for the enterprise. Address and coin parameters optional.",
        "operationId": "v2.sendlabels.list",
        "parameters": [
          {
            "$ref": "#/components/parameters/coin"
          },
          {
            "$ref": "#/components/parameters/address"
          },
          {
            "$ref": "#/components/parameters/enterpriseId"
          }
        ],
        "responses": {
          "200": {
            "description": "All send labels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SendLabel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Send label"
        ],
        "summary": "Create send label",
        "operationId": "v2.sendlabels.create",
        "description": "Create an address send label for an id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSendLabel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Send label was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendLabel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/sendlabels/{id}": {
      "get": {
        "tags": [
          "Send label"
        ],
        "summary": "Get send label by id",
        "operationId": "v2.sendlabels.get",
        "description": "Gets an address send label by the specified id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendLabel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Send label"
        ],
        "summary": "Update send label",
        "operationId": "v2.sendlabels.update",
        "description": "Updates an address send label by the specified id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSendLabel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated send label",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendLabel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Send label"
        ],
        "summary": "Delete send label",
        "operationId": "v2.sendlabels.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathId"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted send label",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendLabel"
                }
              }
            }
          },
          "400": {
            "description": "An error message describing what was incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/enterprise/{enterpriseId}/txrequests": {
      "get": {
        "tags": [
          "Transaction request"
        ],
        "summary": "Get transaction requests by enterprise",
        "description": "Get a paginated list of transaction requests filtered by enterprise.",
        "operationId": "v2.enterprise.txrequest.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathEnterpriseId"
          },
          {
            "$ref": "#/components/parameters/prevId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/txRequestLatest"
          },
          {
            "$ref": "#/components/parameters/txRequestStates"
          },
          {
            "$ref": "#/components/parameters/txRequestIds"
          },
          {
            "$ref": "#/components/parameters/idempotencyKeys"
          },
          {
            "$ref": "#/components/parameters/walletIds"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionRequestsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/txrequests": {
      "post": {
        "tags": [
          "Transaction request"
        ],
        "summary": "Create transaction request",
        "description": "Allows users to create a transaction request given they have spender permissions on the wallet. Use only with TSS wallets. For multisignature wallets, use [Build a transaction](https://api.bitgo.com/docs/#operation/v2.wallet.tx.build).",
        "operationId": "v2.wallet.txrequest.create",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction Request succesfully returned in preview mode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRequest"
                }
              }
            }
          },
          "201": {
            "description": "Transaction Request succesfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRequest"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Transaction request"
        ],
        "summary": "Get transaction requests by wallet",
        "description": "Get a paginated list of transaction requests filtered by wallet. Use only with TSS wallets.",
        "operationId": "v2.wallet.txrequest.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/prevId"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/txRequestLatest"
          },
          {
            "$ref": "#/components/parameters/txRequestStates"
          },
          {
            "$ref": "#/components/parameters/txRequestIds"
          },
          {
            "$ref": "#/components/parameters/idempotencyKeys"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionRequestsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/txrequests/{id}": {
      "put": {
        "tags": [
          "Transaction request"
        ],
        "summary": "Update transaction request",
        "description": "Allows users to update an existing transaction request given they have spender permissions on the wallet. Use only with TSS wallets.",
        "operationId": "v2.wallet.txrequest.update",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRequest"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Transaction request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/txrequests/{id}/signatureshares": {
      "post": {
        "tags": [
          "Transaction request"
        ],
        "summary": "Create a signature share for the transaction request",
        "description": "Allows users to supply their signature share for signing. Use only with TSS wallets.",
        "operationId": "v2.wallet.txrequest.signatureshare.create",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSignatureShareRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureShare"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Transaction request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Transaction request"
        ],
        "summary": "Delete signature shares on a transaction request.",
        "description": "Allows users to clear the signature shares on a transaction request. This will also set the state to pendingUserSignature. Use only with TSS wallets.",
        "operationId": "v2.wallet.txrequest.signatureshare.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SignatureShare"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Transaction request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/txrequests/{id}/transactions/{transactionIdx}/signatureshares": {
      "post": {
        "tags": [
          "Transaction request"
        ],
        "summary": "Create a signature share for a transaction on a transaction request",
        "description": "Allows users to supply their signature share for signing.\nThis route is only valid for transaction request full. Use only with TSS wallets.\n",
        "operationId": "v2.wallet.txrequest.transaction.signatureshare.create",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathId"
          },
          {
            "$ref": "#/components/parameters/transactionIdx"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSignatureShareRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureShare"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Transaction request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/txrequests/{id}/transfers": {
      "post": {
        "tags": [
          "Transaction request"
        ],
        "summary": "Create transfer for transaction request",
        "description": "Create a transfer for a transaction request and return that transfer. Use only with TSS wallets.",
        "operationId": "v2.wallet.txrequest.transfers.create",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/tx/build": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Build a transaction",
        "operationId": "v2.wallet.tx.build",
        "description": "Build a transaction from the wallet using provided options. Use only with multisignature wallets. For TSS wallets, use [Create transaction request](https://api.bitgo.com/docs/#operation/v2.wallet.txrequest.create). If you want to build, sign, and send all in one call, use [Send transaction](https://app.bitgo.com/docs/#operation/express.wallet.sendcoins).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TransactionBuildRequest"
                  },
                  {
                    "$ref": "#/components/schemas/NonParticipationTransactionBuildRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully built transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionBuildResult"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidAddress"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let params = {\n  recipients: [\n    {\n      amount: 0.01 * 1e8,\n      address: '2NFfxvXpAWjKng7enFougtvtxxCJ2hQEMo4',\n    },\n  ],\n};\nwallet.prebuildTransaction(params).then(function (transaction) {\n  // print transaction details\n  console.dir(transaction);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/tx/initiate": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Initiate a transaction",
        "operationId": "v2.wallet.tx.initiate",
        "description": "Initiate an unsigned transaction to create a pending approval. This is useful to request funds to be sent from custodial wallets. Use only with custodial wallets.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionInitiateRequest"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "videoApprovers": {
                        "$ref": "#/components/schemas/VideoApprovers"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "A Pending Approval for the transaction has been created and is waiting for approval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingApproval"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/tx/send": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Send a half-signed transaction",
        "operationId": "v2.wallet.tx.send",
        "description": "Send a half-signed transaction from the specified wallet.\nInstead of this endpoint, you likely want to use [send transaction](https://app.bitgo.com/docs/#operation/express.wallet.sendcoins)\nin the SDK.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "202": {
            "description": "A transaction has been created, but will require approval from admins on the wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingApproval"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidOFAC"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let params = {\n  txHex:\n    '010000000179b0b5ad6641de8fed13270395e52515236c922d1dd5bee3a9dae68c3cbbf57d0100000000ffffffff0240420f000000000017a914f600974688ccdf5e72ce3f2b187afabbf4f1d3ec878e7835000000000017a9140c0a513cb9d8e46113c57aa46ae42d1bad29063d8700000000',\n  otp: '0000000',\n};\nwallet.submitTransaction(params).then(function (transaction) {\n  // print transaction status\n  console.dir(transaction);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/trustline/initiate": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Initiate a trustline transaction",
        "operationId": "v2.wallet.trustline.initiate",
        "description": "Initiate an unsigned trustline transaction to create a pending approval. Trustline transactions manage trusted tokens on the account. Available for Stellar. Use only with custodial wallets.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateTrustlineParams"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "A Pending Approval for the transaction has been created and is waiting for approval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingApproval"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/requiredReserve": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get balance reserve data",
        "description": "Returns information about reserve requirements for an account. Currently only available for Stellar.",
        "operationId": "v2.tx.fetchReserve",
        "parameters": [
          {
            "name": "coin",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "txlm",
                "xlm",
                "tcspr",
                "cspr"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceReserve"
                }
              }
            }
          },
          "400": {
            "description": "`CoinUnsupported` or `Invalid`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/bankaccounts": {
      "post": {
        "tags": [
          "Bank account"
        ],
        "summary": "Create a bank account",
        "operationId": "v2.bankaccount.create",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccount"
                  },
                  {
                    "type": "object",
                    "required": [
                      "enterpriseId"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Bank account"
        ],
        "summary": "List bank accounts",
        "operationId": "v2.bankaccount.list",
        "description": "This route is potentially useful for finding the `idHash` of the desired account to use for fiat withdrawals. The `idHash` field\nis used as the recipient address along with an optional hyphen separator and memo (example: `5812dcaa9a285aa6-memohere`).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/queryEnterpriseIdArray"
          },
          {
            "name": "verificationState",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/BankAccountVerificationState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBankAccountsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidEnterpriseId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/bankaccounts/{bankAccountId}": {
      "get": {
        "tags": [
          "Bank account"
        ],
        "summary": "Get bank account",
        "description": "This route is potentially useful for finding the `idHash` of the desired account to use for fiat withdrawals. The `idHash` field\nis used as the recipient address along with an optional hyphen separator and memo (example: `5812dcaa9a285aa6-memohere`).\n",
        "operationId": "v2.bankaccount.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathBankAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidBankAccountId"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bank account"
        ],
        "summary": "Update bank account",
        "operationId": "v2.bankaccount.update",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathBankAccountId"
          }
        ],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBankAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidBankAccountId"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bank account"
        ],
        "summary": "Delete bank account",
        "operationId": "v2.bankaccount.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathBankAccountId"
          }
        ],
        "description": "Removes a bank account if not already verified",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidBankAccountId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/pingexpress": {
      "get": {
        "tags": [
          "Express"
        ],
        "summary": "Ping BitGo Express",
        "operationId": "express.ping",
        "description": "Ping bitgo express to ensure that it is still running. Unlike /ping, this does not try connecting to bitgo.com.\n",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressPingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/sendcoins": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Send transaction",
        "operationId": "express.wallet.sendcoins",
        "description": "This call allows you to create and send cryptocurrency to a destination address.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressSendCoinsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressSendCoinsResponse"
                }
              }
            }
          },
          "202": {
            "description": "A transaction has been created, but will require approval from admins on the wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressSendCoinsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let params = {\n  amount: 0.01 * 1e8,\n  address: '2NFfxvXpAWjKng7enFougtvtxxCJ2hQEMo4',\n  walletPassphrase: 'secretpassphrase1a5df8380e0e30',\n};\nwallet.send(params).then(function (transaction) {\n  // print transaction details\n  console.dir(transaction);\n});\n"
          },
          {
            "lang": "javascript",
            "source": "let params = {\n  amount: '1000000000000000000', // 1 ETH\n  address: '0xf7b30036154fbee843c4346b717528ab41eebf02',\n  walletPassphrase: 'secretpassphrase1a5df8380e0e30',\n};\nwallet.send(params).then(function (transaction) {\n  // print transaction details\n  console.dir(transaction);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/sendmany": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Send to many",
        "operationId": "express.wallet.sendmany",
        "description": "Send coins to multiple recipients. Currently supported by UTXO coins and ETH coin.\n\nThis may be useful if you schedule outgoing transactions in bulk, as you will be able to process multiple recipients and lower the aggregate amount of blockchain fees paid.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressSendManyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressSendCoinsResponse"
                }
              }
            }
          },
          "202": {
            "description": "A transaction has been created, but will require approval from admins on the wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressSendCoinsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let params = {\n  recipients: [\n    {\n      amount: 0.01 * 1e8,\n      address: '2NFfxvXpAWjKng7enFougtvtxxCJ2hQEMo4',\n    },\n    {\n      amount: 0.01 * 1e8,\n      address: '2MsMFw75RKRiMb548q6W4jrJ63jwvvDdR2w',\n    },\n  ],\n  walletPassphrase: 'secretpassphrase1a5df8380e0e30',\n};\nwallet.sendMany(params).then(function (transaction) {\n  // print transaction details\n  console.dir(transaction);\n});\n"
          }
        ]
      }
    },
    "/api/v2/encrypt": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Encrypt messages",
        "operationId": "express.encrypt",
        "description": "Symmetrically encrypt an arbitrary message with provided password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressEncryptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressEncryptResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/decrypt": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Decrypt messages",
        "operationId": "express.decrypt",
        "description": "Decrypt a ciphertext generated by encrypt route with provided password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressDecryptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressDecryptResponse"
                }
              }
            }
          },
          "500": {
            "description": "If given decryption key does not decrypt the message"
          }
        }
      }
    },
    "/api/v2/calculateminerfeeinfo": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Calculate mining fee",
        "operationId": "express.calculateminerfeeinfo",
        "description": "Calculate the fee and estimated size in bytes for a Bitcoin transaction",
        "deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressCalculateMinerFeeInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressCalculateMinerFeeInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/keychain/local": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Create key",
        "operationId": "express.keychain.local",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          }
        ],
        "description": "Local client-side function to create a new keychain.\n\nCreating your keychains is a critical step for safely securing your Bitcoin. When generating new keychains, this API uses a random number generator that adheres to industry standards. If you provide your own seed, you must take extreme caution when creating it.\nReturns an object containing the xprv and xpub for the new chain. The created keychain is not known to the BitGo service. To use it with the BitGo service, use the ‘Store Keychain’ API call.\n\nFor security reasons, it is highly recommended that you encrypt and destroy the original xprv immediately to prevent theft.\n",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressCreateKeychainResponse"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let key = bitgo.coin('tbtc').keychains().create();\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/generate": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Generate wallet",
        "operationId": "express.wallet.generate",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "name": "includeKeychains",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false,
              "description": "Include user, backup and bitgo keychains along with generated wallet"
            }
          }
        ],
        "description": "This API call creates a new wallet. Under the hood, the SDK (or BitGo Express) does the following:\n\n1. Creates the user keychain locally on the machine, and encrypts it with the provided passphrase (skipped if userKey is provided).\n2. Creates the backup keychain locally on the machine.\n3. Uploads the encrypted user keychain and public backup keychain.\n4. Creates the BitGo key (and the backup key if backupXpubProvider is set) on the service.\n5. Creates the wallet on BitGo with the 3 public keys above.\n\nⓘ Ethereum wallets can only be created under an enterprise. Pass in the id of the enterprise to associate the wallet with. Your enterprise id can be seen by clicking on the “Manage Organization” link on the enterprise dropdown. Each enterprise has a fee address which will be used to pay for transaction fees on all Ethereum wallets in that enterprise. The fee address is displayed in the dashboard of the website, please fund it before creating a wallet.\n\nⓘ You cannot generate a wallet by passing in a subtoken as the coin. Subtokens share wallets with their parent coin and it is not possible to create a wallet specific to one token. Please see Coin-Specific Implementation for details.\n\nⓘ This endpoint should be called through BitGo Express if used without the SDK, such as when using cURL.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressGenerateWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressGenerateWalletResponse"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "bitgo\n  .coin('tltc')\n  .wallets()\n  .generateWallet({ label: 'My Test Wallet', passphrase: 'secretpassphrase1a5df8380e0e30' })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/share": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Share wallet",
        "operationId": "express.wallet.share",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "description": "Share wallet with an existing BitGo user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressShareWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareWalletResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/walletshare/{walletId}/acceptshare": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Accept wallet share",
        "operationId": "express.wallet.acceptshare",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "description": "Accept a wallet share, adding the wallet to the user's list",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressAcceptShareRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressAcceptShareResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/signtx": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Sign transaction",
        "operationId": "express.signtx",
        "description": "This route is for users who would like to maintain their own keys, or otherwise would not like BitGo to decrypt their key, and instead provide it in the clear themselves",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressSignTxRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressSignTxResponse"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "// Before signing we need to get a half-built transaction\nconst buildParams = { recipients: [{ amount: 0.01 * 1e8, address: '2NFfxvXpAWjKng7enFougtvtxxCJ2hQEMo4' }] };\nbitgo\n  .coin('tbtc')\n  .wallets()\n  .get({ id: '5a9d9f8e1223833c4df673a07cf8bc5f' })\n  .then(function (wallet) {\n    wallet.prebuildTransaction(buildParams, function (err, result) {\n      bitgo\n        .coin('tbtc')\n        .signTransaction({ txPrebuild: result, prv: '<your xrpv>', pubs: ['<user xpub>', '<backup xpub>', '<bitgo xpub>'] })\n        .then(function (transaction) {\n          // print half-signed transaction hex\n          console.dir(transaction);\n        });\n    });\n  });\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/signtx": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Sign wallet transaction",
        "operationId": "express.wallet.signtx",
        "description": "This route is for users who want to use the normal encrypted private user key to sign, and would like BitGo to handle decryption of the private key for them",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressWalletSignTxRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressSignTxResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let params = {\n  txPrebuild: {\n    txHex:\n      '010000000179b0b5ad6641de8fed13270395e52515236c922d1dd5bee3a9dae68c3cbbf57d0100000000ffffffff0240420f000000000017a914f600974688ccdf5e72ce3f2b187afabbf4f1d3ec878e7835000000000017a9140c0a513cb9d8e46113c57aa46ae42d1bad29063d8700000000',\n    txInfo: {\n      nP2SHInputs: 1,\n      nSegwitInputs: 0,\n      nOutputs: 2,\n      unspents: [\n        {\n          chain: 1,\n          index: 10,\n          redeemScript:\n            '52210208906f13de98b88bc9f83886c39a1555ada816b12de6f029626af2ef9413708b2102bca01320026604530fc47068ce015b39b91bd72d8964b0c5023697645b1441ab210336d8e968990c8a5b2bad83a237c37957ce70586ed507b155941ea28ec953860153ae',\n          id: '7df5bb3c8ce6daa9e3bed51d2d926c231525e595032713ed8fde4166adb5b079:1',\n          address: '2MvevrYxML8NkRng4avXz7oMCgs5qxR7Mef',\n          value: 4508000,\n        },\n      ],\n      changeAddresses: ['2MtLtTSsC98dF4zriFGvCfmce3A17Zz1McK'],\n    },\n    feeInfo: {\n      size: 373,\n      fee: 3730,\n      feeRate: 10000,\n      payGoFee: 0,\n      payGoFeeString: '0',\n    },\n  },\n  prv: 'xprvmysecretprivatekey',\n};\nwallet.signTransaction(params).then(function (transaction) {\n  // print half-signed transaction hex\n  console.dir(transaction);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/recovertoken": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Recover ETH token",
        "operationId": "express.wallet.recovertoken",
        "description": "Recover an unsupported Ethereum token from a BitGo multisig wallet",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressWalletRecoverTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressWalletRecoverTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/consolidateAccount/build": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Consolidate account",
        "operationId": "v2.wallet.consolidateaccount.build",
        "description": "Consolidates the receive address balances in the main address of a wallet. Algorand is an account-based coin.\nFor some account-based coins, creation of receive addresses results in additional accounts, associated with the main\nwallet account.\nFunds can only be sent from the main address account. Therefore, funds must be consolidated before sending.\nSupported by Algorand, Tezos.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathAlgorand"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsolidateAccountBuildRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Consolidation transaction build successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsolidateAccountBuildResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidAddress"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let params = {\n  consolidateAddresses: [\n    'BVMEUTF37WNEQ6GYCZISRFHGLEMOKT5OCPPTTJXVED6JBSXKF6YJJRZRI4',\n    '7ITFVRNTLUHLD4F2PIIYXXIQOAJAPRGMA7JHSN3SFH2BACLK7WM6CHT524',\n  ],\n};\nwallet.consolidateAccount(params).then(function (transactions) {\n  // print generated transactions for signing\n  console.dir(transaction);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/consolidateunspents": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Consolidate unspents",
        "operationId": "express.wallet.consolidateunspents",
        "description": "Consolidate unspents on a wallet",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressConsolidateUnspentsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Consolidation transaction successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressSendCoinsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let params = {\n  numUnspentsToMake: 2,\n  minValue: 100000,\n  maxValue: 47000000,\n  minHeight: 1,\n  minConfirms: 2,\n  limit: 100,\n  walletPassphrase: 'secretpassphrase1a5df8380e0e30',\n};\nwallet.consolidateUnspents(params).then(function (transactionInfo) {\n  // print transaction info\n  console.dir(transactionInfo);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/fanoutunspents": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Fan out unspents",
        "operationId": "express.wallet.fanoutunspents",
        "description": "Fan out unspents on a wallet",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressFanOutUnspentsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Fanout transaction successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressSendCoinsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let params = {\n  maxNumInputsToUse: 20,\n  numUnspentsToMake: 200,\n  minValue: 100000,\n  maxValue: 47000000,\n  minHeight: 1,\n  minConfirms: 2,\n  walletPassphrase: 'secretpassphrase1a5df8380e0e30',\n};\nwallet.fanoutUnspents(params).then(function (transactionInfo) {\n  // print transaction info\n  console.dir(transactionInfo);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/sweep": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Sweep funds",
        "operationId": "express.wallet.sweep",
        "description": "The sweep call spends the full balance of the wallet to the provided address. On UTXO coins, the sweep call will\nfail if the wallet has any unconfirmed funds, or if there are more unspents than can be sent with a\nsingle transaction.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressSweepRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sweep transaction successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressSendCoinsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "let params = {\n  address: '2MwvR24yqym2CgHMp7zwvdeqBa4F8KTqunS',\n  walletPassphrase: 'secretpassphrase1a5df8380e0e30',\n};\nwallet.sweep(params).then(function (transactionInfo) {\n  // print transaction info\n  console.dir(transactionInfo);\n});\n"
          }
        ]
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/acceleratetx": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Accelerate Transaction",
        "operationId": "express.wallet.acceleratetx",
        "description": "Send a child-pays-for-parent (CPFP) transaction to accelerate the target unconfirmed transactions.\n\n**Background**:\nIn Bitcoin, a transaction can only be included in a block when all its inputs are confirmed.\nThis requirement can be used to increase the effective fee rate of a stuck low-fee transaction.\nOne of the stuck transaction's outputs is spent in a child transaction with a much higher fee.\nMiners include the transactions with the highest fees first to maximize their revenue,\nbut the high-fee child transaction can only be included once the parent transaction is confirmed.\nThe miners are therefore incentivized to include both the parent and the child transaction together in a block.\nA child-pays-for-parent transaction can be created by a recipient of the transaction or by the sender if the\ntarget transaction has a change output.\n\n**Notes**:\n1. As other coins do not have a blockspace market, this route is only available for Bitcoin at this time.<br/>\n2. If a target transaction depends on other unconfirmed transactions, this route adds sufficient fees\nto elevate the entire transaction ancestry's effective fee rate to the `cpfpFeeRate`.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathBitcoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressAccelerateTxRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "CPFP transaction successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressSendCoinsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/transfer/{transferId}/comment": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Update comment",
        "operationId": "v2.transfer.comment",
        "description": "Update the comment of a transfer\nRequirements:\n  - Transaction must be generated from a BitGo wallet\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "$ref": "#/components/parameters/pathTransferId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidTransferId"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Token lacks required scope for wallet_edit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/tx/changeFee": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Change Fee",
        "operationId": "v2.wallet.changefee",
        "description": "Change the fee rate of a transaction in an attempt to accelerate its confirmation.\nSupported by: ETH, ERC20 tokens, CELO, RSK, ETC\nRequirements:\n  - Transaction gas price must increase by at least 10 Gwei or 20% higher than the original transaction fee\n  - At least 15 minutes must have passed since original send\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeFeeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction fee successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeFeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/canonicaladdress": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Canonicalize address",
        "operationId": "express.canonicaladdress",
        "description": "Canonicalize an address. Supported by LTC, BCH",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressCanonicalAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Converted address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressString"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/verifyaddress": {
      "post": {
        "tags": [
          "Express"
        ],
        "summary": "Verify address",
        "operationId": "express.verifycoinaddress",
        "description": "Verify address for a given coin",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressVerifyCoinAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isValid": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/pendingapprovals/{approvalId}": {
      "put": {
        "tags": [
          "Express"
        ],
        "summary": "Resolve pending approval",
        "operationId": "express.pendingapprovals",
        "description": "Accept or reject a pending approval",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathApprovalId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressResolvePendingApprovalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingApproval"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/auditlog": {
      "get": {
        "tags": [
          "Audit log"
        ],
        "summary": "List audit logs",
        "description": "",
        "operationId": "v2.auditlog.list",
        "parameters": [
          {
            "name": "coin",
            "in": "query",
            "description": "Filter by coin(s). Must include coins to see activity on the wallets of those coins.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Coin"
              }
            }
          },
          {
            "$ref": "#/components/parameters/queryEnterpriseIdOrPersonal"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/prevId"
          },
          {
            "$ref": "#/components/parameters/auditLogType"
          },
          {
            "$ref": "#/components/parameters/walletId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLogsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/balances/staked": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get staked balance data",
        "description": "Returns staking information about validator and staked amount for the current wallet. Currently only available for Casper and Stacks.",
        "operationId": "v2.wallet.staked",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceStaked"
                }
              }
            }
          },
          "400": {
            "description": "`CoinUnsupported` or `Invalid`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/{coin}/wallet/{walletId}/balances/totalrewards": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get total rewards data",
        "description": "Returns staking information receiving address and the total rewards received for the current wallet. Currently only available for Stacks.",
        "operationId": "v2.wallet.totalrewards",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathCoin"
          },
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceTotalRewards"
                }
              }
            }
          },
          "400": {
            "description": "`CoinUnsupported` or `Invalid`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/lightning/withdrawal": {
      "post": {
        "tags": [
          "Lightning"
        ],
        "summary": "Withdraw from lightning balance",
        "description": "This API call is used to request a withdrawal of on-chain funds from the custodial lightning balance. Withdrawals are deducted from the wallet's lightning balance.",
        "operationId": "v2.wallet.lightning.withdraw",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LightningWithdrawRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The lightning withdrawal has been successfully queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LightningWithdrawResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/lightning/address": {
      "post": {
        "tags": [
          "Lightning"
        ],
        "summary": "Create address for lightning deposits",
        "operationId": "v2.wallet.lightning.newAddress",
        "description": "This API call is used to create a new address to deposit funds to the\nwallet's custodial lightning balance. Funds sent to this address will\nbe credited to the wallet's lightning balance.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "responses": {
          "200": {
            "description": "An address for lightning deposits has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LightningAddressResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/lightning/invoices": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "Fetch lightning invoices",
        "operationId": "v2.wallet.lightning.getInvoices",
        "description": "This API call is used to fetch previously created lightning invoices\nassociated with a given walletId.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          },
          {
            "name": "status",
            "description": "The status of lightning invoices to search for",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Limit the number of search results. Default 25",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lightning invoices have been successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LightningGetInvoicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/lightning/invoice": {
      "post": {
        "tags": [
          "Lightning"
        ],
        "summary": "Create a lightning invoice",
        "operationId": "v2.wallet.lightning.invoice",
        "description": "This API call is used to create a new lightning invoice which can be\nused for requesting and receiving payments over the lightning network.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvoiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A lightning invoice has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LightningInvoice"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/lightning/balance": {
      "get": {
        "tags": [
          "Lightning"
        ],
        "summary": "Get lightning balance",
        "description": "Get the custodial lightning balance for the wallet.",
        "operationId": "v2.wallet.lightning.balance",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "responses": {
          "200": {
            "description": "The wallet lightning balance query was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LightningBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/wallet/{walletId}/lightning/payment": {
      "post": {
        "tags": [
          "Lightning"
        ],
        "summary": "Send a lightning payment",
        "description": "Send a lightning payment that pays a provided payment request using the\nwallet's custodial lightning balance.\n",
        "operationId": "v2.wallet.lightning.payment",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathWalletId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LightningInvoicePaymentRequest"
                  },
                  {
                    "$ref": "#/components/schemas/LightningLnurlPaymentRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment successfully queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LightningPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidWalletId"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/user/current": {
      "get": {
        "summary": "Get Current User",
        "description": "Get the current user’s public information",
        "operationId": "portfolio.user.current",
        "tags": [
          "Portfolio REST API"
        ],
        "responses": {
          "200": {
            "description": "A user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioUser"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios": {
      "get": {
        "summary": "List Portfolios",
        "description": "Get a list of the portfolios to which the user with the access token belongs",
        "operationId": "portfolio.portfolios",
        "tags": [
          "Portfolio REST API"
        ],
        "responses": {
          "200": {
            "description": "An array of portfolios",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolios"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/historical_prices": {
      "get": {
        "summary": "List Historical Prices",
        "description": "Get a list of daily historical prices in the portfolio's functional currency - defaults to prior month",
        "operationId": "portfolio.prices",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instrument",
            "in": "query",
            "description": "Symbol of instrument to be queried",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "description": "Must be provided if endDate is provided. Otherwise, will default to one month ago",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "description": "Must have corresponding startDate if provided",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of instrument prices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentPrices"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/connections": {
      "get": {
        "summary": "List Connections",
        "description": "Get a list of the connections for a given portfolio to which the user with the access token belongs",
        "operationId": "portfolio.connections",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connections"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/connections/{connectionId}": {
      "get": {
        "summary": "Get Connection",
        "description": "Get information for a single connection within a given portfolio to which the user with the access token belongs",
        "operationId": "portfolio.connection",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "The id of the connection to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Connection object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/accounts": {
      "get": {
        "summary": "List Accounts",
        "description": "Get a list of the accounts for a given portfolio to which the user with the access token belongs",
        "operationId": "portfolio.accounts",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioAccounts"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/accounts/{accountId}": {
      "get": {
        "summary": "Get Account",
        "description": "Get information for a single account within a given portfolio to which the user with the access token belongs",
        "operationId": "portfolio.account",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A PortfolioAccount object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioAccount"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/balances": {
      "get": {
        "summary": "List Balances",
        "description": "Get balance information (grouped by instrument) for a single portfolio to which the user with the access token belongs",
        "operationId": "portfolio.balances",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of instrument balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentBalances"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/connections/{connectionId}/balances": {
      "get": {
        "summary": "List Connection Balances",
        "description": "Get balance information (grouped by instrument) for a single connection within a given portfolio to which the user with the access token belongs",
        "operationId": "portfolio.connection.balances",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "The id of the connection to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of instrument balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentBalances"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/accounts/{accountId}/balances": {
      "get": {
        "summary": "List Account Balances",
        "description": "Get balance information (grouped by instrument) for a single account within a given portfolio to which the user with the access token belongs",
        "operationId": "portfolio.account.balances",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of instrument balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentBalances"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/transactions": {
      "get": {
        "summary": "List Transactions",
        "description": "List all transactions for a given portfolio to which the user with the access token belongs",
        "operationId": "portfolio.transactions",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/transactions/{transactionId}": {
      "get": {
        "summary": "Get Transaction",
        "description": "Get details for a single transaction by Transaction ID within a given portfolio to which the user with the access token belongs",
        "operationId": "portfolio.transaction",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The id of the transaction to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single transaction object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/line_items": {
      "get": {
        "summary": "List Line Items",
        "description": "List all accounting line items within a given portfolio to which the user with the access token belongs",
        "operationId": "portfolio.line_items",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of line items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineItems"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio/v1/portfolios/{portfolioId}/line_items/{itemId}": {
      "get": {
        "summary": "Get Line Item",
        "description": "Get details for a single accounting line item by Line Item ID within a given portfolio to which the user with the access token belongs",
        "operationId": "portfolio.line_item",
        "tags": [
          "Portfolio REST API"
        ],
        "parameters": [
          {
            "name": "portfolioId",
            "in": "path",
            "description": "The id of the portfolio to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The id of the accounting line item to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single accounting line item object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineItem"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/user/current": {
      "get": {
        "summary": "Get Current User",
        "description": "Get the current user’s public information.",
        "operationId": "trade.user.current",
        "tags": [
          "Trade REST API"
        ],
        "responses": {
          "200": {
            "description": "A user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeUser"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/accounts": {
      "get": {
        "summary": "List Accounts",
        "description": "Get the list of trading accounts that the current user belongs to.",
        "operationId": "trade.accounts",
        "tags": [
          "Trade REST API"
        ],
        "responses": {
          "200": {
            "description": "An array of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Accounts"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/accounts/{accountId}/balances": {
      "get": {
        "summary": "Get Account Balance",
        "description": "Get balance information about a single trading account.",
        "operationId": "trade.accounts.balances",
        "tags": [
          "Trade REST API"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the trading account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of account balances",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AccountBalances"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/accounts/{accountId}/orders": {
      "get": {
        "summary": "List Orders",
        "description": "Lists all orders from the given trading account.",
        "operationId": "trade.orders.detail",
        "tags": [
          "Trade REST API"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the trading account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "clientOrderId",
            "in": "query",
            "description": "The clientOrderId of the order to retrieve",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateGte",
            "in": "query",
            "description": "Return client orders with a `creationDate` that is greater than or equal to the given timestamp",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateLt",
            "in": "query",
            "description": "Return client orders with a `creationDate` that is less than the given timestamp",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of orders",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Orders"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Place Order",
        "description": "Places a new order. There are several types of orders available - Market, Limit, and TWAP (with or without a limit). Orders can only be placed if your account has a sufficient balance. When an order is placed, funds will be reserved for the amount of the order.",
        "operationId": "trade.orders.add",
        "tags": [
          "Trade REST API"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the trading account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/accounts/{accountId}/orders/{orderId}": {
      "get": {
        "summary": "Get Order",
        "description": "Get a single order by order id.",
        "operationId": "trade.orders.order",
        "tags": [
          "Trade REST API"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the trading account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/accounts/{accountId}/orders/{orderId}/cancel": {
      "put": {
        "summary": "Cancel Order",
        "description": "Attempt to cancel an order that was previously placed. The response will return successful if the cancel request is submitted. Use Get Order endpoint or subscribe to the orders websocket to get the order details.",
        "operationId": "trade.orders.order.cancel",
        "tags": [
          "Trade REST API"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the trading account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/accounts/{accountId}/trades": {
      "get": {
        "summary": "List Trades",
        "description": "Lists trades from the trading account. This will include trades that have not yet settled.",
        "operationId": "trade.trades",
        "tags": [
          "Trade REST API"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the trading account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderId",
            "in": "query",
            "description": "The orderId of the trades to retrieve",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "dateGte",
            "in": "query",
            "description": "Return exchange trades with a trade date that is greater than or equal to the given timestamp",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateLt",
            "in": "query",
            "description": "Return exchange trades with a trade date that is less than the given timestamp",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of trades",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Trades"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/accounts/{accountId}/trades/{tradeId}": {
      "get": {
        "summary": "Get Trade",
        "description": "Get the details of a single trade by trade id.",
        "operationId": "trade.trades.trade",
        "tags": [
          "Trade REST API"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the trading account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tradeId",
            "in": "path",
            "description": "The id of the trade to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A trade",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trade"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/accounts/{accountId}/currencies": {
      "get": {
        "summary": "List Currencies",
        "description": "Gets a list of all available currencies.",
        "operationId": "trade.currencies",
        "tags": [
          "Trade REST API"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the trading account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of currencies",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Currencies"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/accounts/{accountId}/products": {
      "get": {
        "summary": "List Products",
        "description": "Gets a list of all available products.",
        "operationId": "trade.products",
        "tags": [
          "Trade REST API"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the trading account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of products",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Products"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/accounts/{accountId}/products/{product}/level1": {
      "get": {
        "summary": "Get Level1 Order Book",
        "description": "Gets a snapshot of the level1 order book for product",
        "operationId": "trade.products.product.level1",
        "tags": [
          "Trade REST API"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the trading account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product",
            "in": "path",
            "description": "The name of the product",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Level1OrderBookSnapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Level1OrderBookSnapshot"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/prime/trading/v1/accounts/{accountId}/products/{product}/level2": {
      "get": {
        "summary": "Get Level2 Order Book",
        "description": "Gets a snapshot of the order book for product",
        "operationId": "products.product.level2",
        "tags": [
          "Trade REST API"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the trading account to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product",
            "in": "path",
            "description": "The name of the product",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Level2OrderBookSnapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Level2OrderBookSnapshot"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/account/{accountId}/payload": {
      "post": {
        "operationId": "v1.trade.createPayload",
        "tags": [
          "Clearing & Settlement"
        ],
        "summary": "Create Trade Payload",
        "description": "The Create Trade Payload API builds an unsigned trade payload, which serves as an authorization to move funds from your trading account to a counterparty's trading account. This payload must be cryptographically signed with your private key to authorize the movement of funds",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Parameters to serialize into a trade payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "version": {
                    "type": "string",
                    "enum": [
                      "1.2.0"
                    ],
                    "description": "Payload version to create. It is recommended to specify the most recent version for maximum security and compatibility. Older payload versions are subject to deprecation at a later date."
                  },
                  "amounts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "accountId": {
                          "type": "string",
                          "description": "Account ID that is authorizing to send and receive specified funds",
                          "example": "59cd72485007a239fb00282ed480da1f"
                        },
                        "sendAmount": {
                          "type": "string",
                          "description": "Amount of the specified sendCurrency you will send as part of the authorized trade. This payload will not be valid for any trade that does not send the specified amount of the specified currency.",
                          "example": "1000000"
                        },
                        "sendCurrency": {
                          "type": "string",
                          "description": "Currency you will send as part of the authorized trade. This payload will not be valid for any trade that does not send the specified currency.",
                          "example": "ofcbtc"
                        },
                        "receiveAmount": {
                          "type": "string",
                          "description": "Amount of the specified receiveCurrency you will receive as part of the authorized trade. This payload will not be valid for any trade that does not credit your account the specified amount.",
                          "example": "3000"
                        },
                        "receiveCurrency": {
                          "type": "string",
                          "description": "Currency you will receive as part of the authorized trade. This payload will not be valid for any trade that does not credit your account the speified currency.",
                          "example": "ofcsud"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An unsigned trade payload.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payload": {
                      "$ref": "#/components/schemas/TradePayload"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/account/{accountId}/calculatefees": {
      "post": {
        "operationId": "v1.settlement.calculateFees",
        "tags": [
          "Clearing & Settlement"
        ],
        "summary": "Calculate Settlement Fees",
        "description": "The Calculate Settlement Fees method will calculate the fees that will be taken out for settlement",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Parameters to calculate fees for settlement",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "counterpartyAccountId": {
                    "type": "string",
                    "description": "the counterparty account id for the given trade"
                  },
                  "sendAmount": {
                    "type": "string",
                    "description": "Amount of specified offchain currency this trade account will receive, in \"base units\" (i.e. cents for USD, Satoshi for BTC, Wei for ETH, etc.)",
                    "example": "1000000"
                  },
                  "sendCurrency": {
                    "type": "string",
                    "description": "Offchain currency this trading account will send",
                    "example": "ofcbtc"
                  },
                  "receiveAmount": {
                    "type": "string",
                    "description": "Amount of specified offchain currency this trading account will receive, in \"base units\" (i.e. cents for USD, Satoshi for BTC, Wei for ETH, etc.)",
                    "example": "3000"
                  },
                  "receiveCurrency": {
                    "type": "string",
                    "description": "Offchain currency this trading account will receive",
                    "example": "ofcsud"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An object containing the fee rates (in basis points), fee amount, and fee currency",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "feeRate": {
                      "type": "string"
                    },
                    "feeAmount": {
                      "type": "string",
                      "description": "the fee amount that will be paid by this trading account for the given settlement amount"
                    },
                    "feeCurrency": {
                      "type": "string",
                      "description": "the currency the given feeAmount will be paid in"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/account/{accountId}/settlements": {
      "post": {
        "operationId": "v1.settlement.createSettlement",
        "tags": [
          "Clearing & Settlement"
        ],
        "summary": "Create Settlement",
        "description": "The Create Settlement API initiates a settlement between the requester and a designated counterparty. It will create a Settlement object and an Affirmation object for every trading account involved. Requester must also include a signed payload as part of their request. Locks will be placed on every trading account and stored in the Affirmation object.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "$ref": "#/components/schemas/TradePayload"
                  },
                  "signature": {
                    "type": "string",
                    "description": "The `payload` cryptographically signed by trading account",
                    "example": "1f0f5b4b45106f98bb9c67ba525ead5bd919f14ab1258e25ab16f9d530856f307228431104f39eb0a249f88cd66a79abfe7aee1de96a288af237b4202c82dd8919"
                  },
                  "trades": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Trade-2"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created settlement object with affirmations, locks, and trades",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settlement"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "v1.settlement.listSettlementsByAccount",
        "tags": [
          "Clearing & Settlement"
        ],
        "summary": "List Settlements by Trading Account",
        "description": "The List Settlements by Trading Account API lists Settlements under a trading account. Settlements can also be filtered by status.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/SettlementStatus"
            },
            "description": "Filter by Settlement status"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of settlements.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Settlement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/settlements": {
      "get": {
        "operationId": "v1.settlement.listSettlementsByEnterprise",
        "tags": [
          "Clearing & Settlement"
        ],
        "summary": "List Settlements by Enterprise",
        "description": "The List Settlements by Enterprise API lists Settlements under an enterprise. Settlements can also be filtered by status.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/SettlementStatus"
            },
            "description": "Filter by Settlement status"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of settlements.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Settlement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/account/{accountId}/settlements/{settlementId}": {
      "get": {
        "operationId": "v1.settlement.getSettlement",
        "tags": [
          "Clearing & Settlement"
        ],
        "summary": "Get Settlement",
        "description": "The Get Settlement API gets a Settlement by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          },
          {
            "in": "path",
            "name": "settlementId",
            "schema": {
              "type": "string"
            },
            "description": "Settlement ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A single settlement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settlement"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          },
          "404": {
            "description": "Settlement not found"
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/account/{accountId}/affirmations": {
      "get": {
        "operationId": "v1.settlement.listAffirmationsByAccount",
        "tags": [
          "Clearing & Settlement"
        ],
        "summary": "List Affirmations by Trading Account",
        "description": "The List Affirmations by Trading Account API lists Affirmations under a trading account. Affirmations can also be filtered by status.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/AffirmationStatus"
            },
            "description": "Filter by Affirmation status"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of affirmations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Affirmation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/affirmations": {
      "get": {
        "operationId": "v1.settlement.listAffirmationsByEnterprise",
        "tags": [
          "Clearing & Settlement"
        ],
        "summary": "List Affirmations by Enterprise",
        "description": "The List Affirmations by Enterprise API lists Affirmations under an enterprise. Affirmations can also be filtered by status.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/AffirmationStatus"
            },
            "description": "Filter by Affirmation status"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of affirmations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Affirmation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/account/{accountId}/affirmations/{affirmationId}": {
      "get": {
        "operationId": "v1.settlement.getAffirmation",
        "tags": [
          "Clearing & Settlement"
        ],
        "summary": "Get Affirmation",
        "description": "The Get Affirmation API gets an Affirmation by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          },
          {
            "in": "path",
            "name": "affirmationId",
            "schema": {
              "type": "string"
            },
            "description": "Affirmation ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A single affirmation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Affirmation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          },
          "404": {
            "description": "Affirmation not found"
          }
        }
      },
      "put": {
        "operationId": "v1.settlement.updateAffirmation",
        "tags": [
          "Clearing & Settlement"
        ],
        "summary": "Update Affirmation",
        "description": "The Update Affirmation API handles affirming and rejecting an affirmation.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          },
          {
            "in": "path",
            "name": "affirmationId",
            "schema": {
              "type": "string"
            },
            "description": "Affirmation ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "The Affirmations to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "affirmed",
                      "rejected",
                      "canceled"
                    ],
                    "example": "affirmed",
                    "description": "The updated status of the Affirmation."
                  },
                  "payload": {
                    "$ref": "#/components/schemas/TradePayload"
                  },
                  "signature": {
                    "type": "string",
                    "description": "The `payload` cryptographically signed by trading account.",
                    "example": "1f0f5b4b45106f98bb9c67ba525ead5bd919f14ab1258e25ab16f9d530856f307228431104f39eb0a249f88cd66a79abfe7aee1de96a288af237b4202c82dd8919"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Affirmation that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Affirmation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          },
          "404": {
            "description": "Affirmation not found"
          }
        }
      }
    },
    "/api/staking/v1/{coin}/wallets/{walletId}/requests": {
      "post": {
        "tags": [
          "Staking Request"
        ],
        "summary": "Staking Request Creation",
        "description": "Create a Staking Request of type STAKE or UNSTAKE.",
        "operationId": "Create staking request",
        "parameters": [
          {
            "name": "coin",
            "in": "path",
            "description": "The coin to be staked (ETH, NEAR, SOL). ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "description": "The wallet id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EthStakingRequestPOSTBody"
                  },
                  {
                    "$ref": "#/components/schemas/NearStakingRequestPOSTBody"
                  },
                  {
                    "$ref": "#/components/schemas/NearUnStakingRequestPOSTBody"
                  },
                  {
                    "$ref": "#/components/schemas/SolStakingRequestPOSTBody"
                  },
                  {
                    "$ref": "#/components/schemas/SolUnStakingRequestPOSTBody"
                  }
                ]
              },
              "examples": {
                "EthStakingRequestPOSTBodyExample": {
                  "$ref": "#/components/examples/EthStakingRequestPOSTBodyExample"
                },
                "NearStakingRequestPOSTBodyExample": {
                  "$ref": "#/components/examples/NearStakingRequestPOSTBodyExample"
                },
                "NearUnStakingRequestPOSTBodyExample": {
                  "$ref": "#/components/examples/NearUnStakingRequestPOSTBodyExample"
                },
                "SolStakingRequestPOSTBodyExample": {
                  "$ref": "#/components/examples/SolStakingRequestPOSTBodyExample"
                },
                "SolUnStakingRequestPOSTBodyExample": {
                  "$ref": "#/components/examples/SolUnStakingRequestPOSTBodyExample"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Staking Request Accepted and needs Approval",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EthStakingRequest"
                    },
                    {
                      "$ref": "#/components/schemas/NearStakingRequest"
                    },
                    {
                      "$ref": "#/components/schemas/SolStakingRequest"
                    }
                  ]
                },
                "examples": {
                  "EthStakingRequestWithoutDelegationsExample": {
                    "$ref": "#/components/examples/EthStakingRequestWithoutDelegationsExample"
                  },
                  "NearStakingRequestWithoutDelegationsExample": {
                    "$ref": "#/components/examples/NearStakingRequestWithoutDelegationsExample"
                  },
                  "NearUnStakingRequestWithoutDelegationsExample": {
                    "$ref": "#/components/examples/NearUnStakingRequestWithoutDelegationsExample"
                  },
                  "SolStakingRequestWithoutDelegationsExample": {
                    "$ref": "#/components/examples/SolStakingRequestWithoutDelegationsExample"
                  },
                  "SolUnStakingRequestWithoutDelegationsExample": {
                    "$ref": "#/components/examples/SolUnStakingRequestWithoutDelegationsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StakingError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                },
                "example": {
                  "code": "BadRequest",
                  "message": "Bad Request",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Unauthorized",
                  "message": "Unauthorized",
                  "status": 401
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "AccessDenied",
                  "message": "Stakingg license not added for enterprise",
                  "status": 403
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "NotFound",
                  "message": "Wallet not found",
                  "status": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Conflict",
                  "message": "Conflicting clientID",
                  "status": 409
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Transient error please try again",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Internal_Server_Error",
                  "message": "Database is down",
                  "status": 500
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Staking Request"
        ],
        "summary": "Retrieve Staking Requests for a User's Wallet",
        "description": "Retrieve Staking Requests for a User's Wallet.",
        "operationId": "Retrieve Staking Requests for a Users Wallet",
        "parameters": [
          {
            "name": "coin",
            "in": "path",
            "description": "The coin to be staked (ETH, NEAR, SOL). ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "description": "The wallet id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Retrieving Staking Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 500,
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/EthStakingRequest"
                      },
                      {
                        "$ref": "#/components/schemas/NearStakingRequest"
                      },
                      {
                        "$ref": "#/components/schemas/SolStakingRequest"
                      }
                    ]
                  }
                },
                "examples": {
                  "EthStakingRequestExample": {
                    "$ref": "#/components/examples/EthStakingRequestWithTransactionsExample"
                  },
                  "NearStakingRequestExample": {
                    "$ref": "#/components/examples/NearStakingRequestWithTransactionsExample"
                  },
                  "NearUnStakingRequestExample": {
                    "$ref": "#/components/examples/NearUnStakingRequestWithTransactionsExample"
                  },
                  "SolStakingRequestExample": {
                    "$ref": "#/components/examples/SolStakingRequestWithTransactionsExample"
                  },
                  "SolUnStakingRequestExample": {
                    "$ref": "#/components/examples/SolUnStakingRequestWithTransactionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StakingError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                },
                "example": {
                  "code": "BadRequest",
                  "message": "Bad Request",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Unauthorized",
                  "message": "Unauthorized",
                  "status": 401
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "AccessDenied",
                  "message": "Stakingg license not added for enterprise",
                  "status": 403
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "NotFound",
                  "message": "Wallet not found",
                  "status": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Conflict",
                  "message": "Conflicting clientID",
                  "status": 409
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Transient error please try again",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Internal_Server_Error",
                  "message": "Database is down",
                  "status": 500
                }
              }
            }
          }
        }
      }
    },
    "/api/staking/v1/requests/{stakingRequestId}": {
      "get": {
        "tags": [
          "Staking Request"
        ],
        "summary": "Retrieve Staking Request for a staking request id",
        "description": "Retrieve A Specific Staking Request.",
        "operationId": "Retrieve A Specific Staking Request",
        "parameters": [
          {
            "name": "stakingRequestId",
            "in": "path",
            "description": "The id for the staking request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Retreiving a Staking Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EthStakingRequest"
                    },
                    {
                      "$ref": "#/components/schemas/NearStakingRequest"
                    },
                    {
                      "$ref": "#/components/schemas/SolStakingRequest"
                    }
                  ]
                },
                "examples": {
                  "EthStakingRequestsExample": {
                    "$ref": "#/components/examples/EthStakingRequestWithTransactionsExample"
                  },
                  "NearStakingRequestExample": {
                    "$ref": "#/components/examples/NearStakingRequestWithTransactionsExample"
                  },
                  "NearUnStakingRequestExample": {
                    "$ref": "#/components/examples/NearUnStakingRequestWithTransactionsExample"
                  },
                  "SolStakingRequestExample": {
                    "$ref": "#/components/examples/SolStakingRequestWithTransactionsExample"
                  },
                  "SolUnStakingRequestExample": {
                    "$ref": "#/components/examples/SolUnStakingRequestWithTransactionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StakingError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                },
                "example": {
                  "code": "BadRequest",
                  "message": "Bad Request",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Unauthorized",
                  "message": "Unauthorized",
                  "status": 401
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "AccessDenied",
                  "message": "Stakingg license not added for enterprise",
                  "status": 403
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "NotFound",
                  "message": "Wallet not found",
                  "status": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Conflict",
                  "message": "Conflicting clientID",
                  "status": 409
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Transient error please try again",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Internal_Server_Error",
                  "message": "Database is down",
                  "status": 500
                }
              }
            }
          }
        }
      }
    },
    "/api/staking/v1/enterprises/{enterpriseId}/requests/transactions": {
      "get": {
        "deprecated": false,
        "tags": [
          "Staking Request"
        ],
        "summary": "Retrieve staking requests and staking transactions for a given enterprise and query params",
        "description": "Retrieve staking requests and staking transactions for a given enterprise and query params.",
        "operationId": "Retrieve staking requests for a given enterprise",
        "parameters": [
          {
            "name": "enterpriseId",
            "in": "path",
            "description": "The enterprise id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Filter by coin (this is important to support L2 level coins within one wallet)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletType",
            "in": "query",
            "description": "Filter by Wallet Type (e.g. custodial, hot)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletIds",
            "in": "query",
            "description": "Wallet Ids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "requestStatus",
            "in": "query",
            "description": "Filter by Staking Request status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expandBuildParams",
            "in": "query",
            "description": "Flag to include staking build params",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default 1)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size for pagination (default 20)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort By field (default created date desc)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Retrieving Staking Requests with Transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingRequests"
                },
                "examples": {
                  "EthStakingRequestResultsExample": {
                    "$ref": "#/components/examples/EthStakingResultsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StakingError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                },
                "example": {
                  "code": "BadRequest",
                  "message": "Bad Request",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Unauthorized",
                  "message": "Unauthorized",
                  "status": 401
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "AccessDenied",
                  "message": "Stakingg license not added for enterprise",
                  "status": 403
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "NotFound",
                  "message": "Wallet not found",
                  "status": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Conflict",
                  "message": "Conflicting clientID",
                  "status": 409
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Transient error please try again",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Internal_Server_Error",
                  "message": "Database is down",
                  "status": 500
                }
              }
            }
          }
        }
      }
    },
    "/api/staking/v1/{coin}/wallets/{walletId}/requests/{stakingRequestId}/transactions/{stakingTransactionId}": {
      "post": {
        "tags": [
          "Staking Request"
        ],
        "summary": "Act On A Transaction like sending a transaction",
        "description": "Use to act on a transaction like sending a transaction",
        "operationId": "Act On A Transaction",
        "parameters": [
          {
            "name": "coin",
            "in": "path",
            "description": "The coin to be staked (ETH, NEAR, SOL). ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "description": "The wallet id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stakingRequestId",
            "in": "path",
            "description": "The id for the staking request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stakingTransactionId",
            "in": "path",
            "description": "The id for the staking request transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EthStakingTransactionSendRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Acting on a Transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 500,
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/EthStakingTransaction"
                      }
                    ]
                  }
                },
                "example": [
                  {
                    "staingRequestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
                    "createdDate": "2022-01-10T14:32:28Z",
                    "statusModifiedDate": "2022-01-10T14:32:28Z",
                    "status": "NEW",
                    "amount": 3200000000000000000,
                    "transactionType": "delegate",
                    "buildParams": {
                      "recipients": {
                        "amount": 3200000000000000000,
                        "address": "0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b",
                        "data": "fds0934rnnio390nw"
                      },
                      "stakingParams": {
                        "requestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
                        "amount": 3200000000000000000,
                        "validator": "0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c",
                        "actionType": "delegate"
                      },
                      "gasPrice": 1000000000000000,
                      "gasLimit": 3000000000000000
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StakingError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                },
                "example": {
                  "code": "BadRequest",
                  "message": "Bad Request",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Unauthorized",
                  "message": "Unauthorized",
                  "status": 401
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "AccessDenied",
                  "message": "Stakingg license not added for enterprise",
                  "status": 403
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "NotFound",
                  "message": "Wallet not found",
                  "status": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Conflict",
                  "message": "Conflicting clientID",
                  "status": 409
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Transient error please try again",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Internal_Server_Error",
                  "message": "Database is down",
                  "status": 500
                }
              }
            }
          }
        }
      }
    },
    "/api/staking/v1/{coin}/wallets/{walletId}": {
      "get": {
        "tags": [
          "Staking State Information"
        ],
        "summary": "Retrieve Staking Wallet Information For A Wallet",
        "description": "Retrieve staking wallet information like staking delegated balance, rewards accrued, and rewards accrual annual percentage rate.",
        "operationId": "Retrieve Staking Wallet Information For A Wallet",
        "parameters": [
          {
            "name": "coin",
            "in": "path",
            "description": "The coin to be staked (ETH, NEAR, SOL). ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "description": "The wallet id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Retreiving a Staking Wallet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingWallet"
                },
                "example": {
                  "enterpriseId": "1032e75c451052000436831deb797af1",
                  "walletId": "2032e75g451052000636831abd797bd3",
                  "walletType": "custodial",
                  "coin": "eth",
                  "delegated": 6400000000000000000,
                  "pendingUnstake": 0,
                  "rewards": 1000000000000000,
                  "apy": 8.2,
                  "createdDate": "2022-01-10T14:32:28Z",
                  "modifiedDate": "2022-01-10T14:32:28Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StakingError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                },
                "example": {
                  "code": "BadRequest",
                  "message": "Bad Request",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Unauthorized",
                  "message": "Unauthorized",
                  "status": 401
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "AccessDenied",
                  "message": "Stakingg license not added for enterprise",
                  "status": 403
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "NotFound",
                  "message": "Wallet not found",
                  "status": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Conflict",
                  "message": "Conflicting clientID",
                  "status": 409
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Transient error please try again",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Internal_Server_Error",
                  "message": "Database is down",
                  "status": 500
                }
              }
            }
          }
        }
      }
    },
    "/api/staking/v1/{coin}/wallets/{walletId}/delegations": {
      "get": {
        "tags": [
          "Staking State Information"
        ],
        "summary": "Retrieve Staking Wallet Delegations",
        "description": "Retrieve staking wallet delegation information.",
        "operationId": "Retrieve Staking Wallet Delegations",
        "parameters": [
          {
            "name": "coin",
            "in": "path",
            "description": "The coin to be staked (ETH, NEAR, SOL). ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "description": "The wallet id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegationIds",
            "in": "query",
            "description": "Delegation ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegationStatus",
            "in": "query",
            "description": "Delegation status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default 1)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size for pagination (default 20)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort By field (default created date desc)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Retreiving a Staking Wallet Delegations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegationResults"
                },
                "examples": {
                  "EthDelegationResultsExample": {
                    "$ref": "#/components/examples/EthDelegationResultsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StakingError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                },
                "example": {
                  "code": "BadRequest",
                  "message": "Bad Request",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Unauthorized",
                  "message": "Unauthorized",
                  "status": 401
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "AccessDenied",
                  "message": "Stakingg license not added for enterprise",
                  "status": 403
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "NotFound",
                  "message": "Wallet not found",
                  "status": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Conflict",
                  "message": "Conflicting clientID",
                  "status": 409
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Transient error please try again",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Internal_Server_Error",
                  "message": "Database is down",
                  "status": 500
                }
              }
            }
          }
        }
      }
    },
    "/api/staking/v1/{coin}/enterprises/{enterpriseId}": {
      "get": {
        "tags": [
          "Staking State Information"
        ],
        "summary": "Retrieve Staking Enterprise Information",
        "description": "Retrieve staking staking information like staking delegated balance, rewards accrued, and rewards accrual annual percentage rate.",
        "operationId": "Retrieve Staking Enterprise Information",
        "parameters": [
          {
            "name": "coin",
            "in": "path",
            "description": "The coin to be staked (ETH, NEAR, SOL). ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enterpriseId",
            "in": "path",
            "description": "The enterprise id representing the enterprise a user staked from",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Retreiving Staking Information For An Enterprise",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingEnterprise"
                },
                "example": {
                  "enterpriseId": "1032e75c451052000436831deb797af1",
                  "coin": "eth",
                  "delegated": 6400000000000000000,
                  "rewards": 1000000000000000,
                  "apy": 8.2
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StakingError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                },
                "example": {
                  "code": "BadRequest",
                  "message": "Bad Request",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Unauthorized",
                  "message": "Unauthorized",
                  "status": 401
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "AccessDenied",
                  "message": "Stakingg license not added for enterprise",
                  "status": 403
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "NotFound",
                  "message": "Wallet not found",
                  "status": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Conflict",
                  "message": "Conflicting clientID",
                  "status": 409
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Transient error please try again",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Internal_Server_Error",
                  "message": "Database is down",
                  "status": 500
                }
              }
            }
          }
        }
      }
    },
    "/api/staking/v1/{coin}/reward-accrual-report": {
      "get": {
        "tags": [
          "Staking History"
        ],
        "summary": "Retrieve Staking Reward History",
        "description": "Retrieve staking staking reward history.",
        "operationId": "Retrieve Staking Reward History",
        "parameters": [
          {
            "name": "coin",
            "in": "path",
            "description": "The coin to be staked (ETH, NEAR, SOL). ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enterpriseId",
            "in": "query",
            "description": "The enterprise id representing the enterprise a user staked from",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletId",
            "in": "query",
            "description": "The wallet id representing the wallet a user staked from. Either the enterpriseId or walletId need to be passed in.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "range",
            "in": "query",
            "description": "The time range for the data either hourly or daily",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date to search from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date to search from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size for pagination (default 20) ",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default 1)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort By field (default date desc)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Retreiving Staking History",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingRewards"
                },
                "example": {
                  "rewards": [
                    {
                      "reward": 1000000000000000,
                      "enterpriseId": "1032e75c451052000436831deb797af1",
                      "date": "2022-01-10T14:32:28Z"
                    }
                  ],
                  "nextBatchPrevDate": "2022-01-11T14:32:28Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StakingError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                },
                "example": {
                  "code": "BadRequest",
                  "message": "Bad Request",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Unauthorized",
                  "message": "Unauthorized",
                  "status": 401
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "AccessDenied",
                  "message": "Stakingg license not added for enterprise",
                  "status": 403
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "NotFound",
                  "message": "Wallet not found",
                  "status": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Conflict",
                  "message": "Conflicting clientID",
                  "status": 409
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Transient error please try again",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Internal_Server_Error",
                  "message": "Database is down",
                  "status": 500
                }
              }
            }
          }
        }
      }
    },
    "/api/staking/v1/{coin}/wallets/{walletId}/delegations/accruals": {
      "get": {
        "tags": [
          "Staking History"
        ],
        "summary": "Retrieve Staking Delegation Accrual History",
        "description": "Retrieve staking delegation accrual history.",
        "operationId": "Retrieve Staking Delegation Accrual History",
        "parameters": [
          {
            "name": "coin",
            "in": "path",
            "description": "The coin to be staked (ETH, NEAR, SOL). ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "description": "The wallet id representing the wallet a user staked from. Either the enterpriseId or walletId need to be passed in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegationIds",
            "in": "query",
            "description": "Delegation ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "range",
            "in": "query",
            "description": "The time range for the data either hourly or daily",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date to search from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date to search from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size for pagination (default 20) ",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default 1)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort By field (default date desc)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Retreiving Delegation Accrual History",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegationAccruals"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StakingError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                },
                "example": {
                  "code": "BadRequest",
                  "message": "Bad Request",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Unauthorized",
                  "message": "Unauthorized",
                  "status": 401
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "AccessDenied",
                  "message": "Stakingg license not added for enterprise",
                  "status": 403
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "NotFound",
                  "message": "Wallet not found",
                  "status": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Conflict",
                  "message": "Conflicting clientID",
                  "status": 409
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Transient error please try again",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Internal_Server_Error",
                  "message": "Database is down",
                  "status": 500
                }
              }
            }
          }
        }
      }
    },
    "/api/staking/v1/{coin}/wallets/{walletId}/attributes": {
      "get": {
        "tags": [
          "Staking State Information"
        ],
        "summary": "Retrieve Staking Wallet State Attribute Information",
        "description": "Retrieve Staking Wallet State Attribute Information.",
        "operationId": "Retrieve Staking Wallet State Attribute Information",
        "parameters": [
          {
            "name": "coin",
            "in": "path",
            "description": "The staked coin.  It can be a top level coin like ETH or a L2 Level coin token like MATIC",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "description": "The wallet id representing the wallet a user staked from. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Retreiving a Staking Wallet State Attribute Information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletStakingStateAttributes"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StakingError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    }
                  ]
                },
                "example": {
                  "code": "BadRequest",
                  "message": "Bad Request",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Unauthorized",
                  "message": "Unauthorized",
                  "status": 401
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "AccessDenied",
                  "message": "Stakingg license not added for enterprise",
                  "status": 403
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "NotFound",
                  "message": "Wallet not found",
                  "status": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Conflict",
                  "message": "Conflicting clientID",
                  "status": 409
                }
              }
            }
          },
          "500": {
            "description": "Server Error - Transient error please try again",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingError"
                },
                "example": {
                  "code": "Internal_Server_Error",
                  "message": "Database is down",
                  "status": 500
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/account/{accountId}/settings": {
      "get": {
        "operationId": "v1.trade.getAccountSettings",
        "tags": [
          "Trading Account Settings"
        ],
        "summary": "Get Trading Account Settings",
        "description": "The Get Trading Account Settings API displays the current settings on your trading account.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Current settings for the specified trading account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "v1.trade.updateAccountSettings",
        "tags": [
          "Trading Account Settings"
        ],
        "summary": "Update Trading Account Settings",
        "description": "The Update Trading Account Settings API allows you to modify the settings on your trading account.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Account settings to update and their new values",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "affirmationExpirationTime": {
                    "type": "number",
                    "description": "Expiration time for new settlements and affirmations, in milliseconds. If this amount of time passes before a settlement is affirmed, rejected, or canceled, the settlement will be marked as failed.",
                    "example": 86400000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated settings for the specified trading account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/account/{accountId}/tradingpartners": {
      "get": {
        "operationId": "v1.tradingPartner.listTradingPartners",
        "tags": [
          "Trading Partners"
        ],
        "summary": "List Trading Partners",
        "description": "The List Trading Partners API gets the trading partners for the given trading account.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/TradingPartnerStatus"
            },
            "description": "Status of trading partner relationship",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "A list of trading partners.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tradingPartners": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TradingPartner"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "v1.tradingPartner.add",
        "tags": [
          "Trading Partners"
        ],
        "summary": "Add Trading Partner",
        "description": "The Add Trading Partners API lets you add a trading partner given your trading partner's referral code",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "referralCode": {
                    "type": "string",
                    "description": "Trading partner's referral code",
                    "example": "FC8G"
                  },
                  "type": {
                    "$ref": "#/components/schemas/TradingPartnerType"
                  },
                  "requesterSide": {
                    "$ref": "#/components/schemas/TradingReferralRequesterSide"
                  }
                },
                "required": [
                  "referralCode",
                  "type",
                  "requesterSide"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has been sent to trading partner for approval.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradingPartner"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/tradingpartners": {
      "get": {
        "operationId": "v1.tradingPartner.listTradingPartnersByEnterprise",
        "tags": [
          "Trading Partners"
        ],
        "summary": "List Trading Partners By Enterprise",
        "description": "The List Trading Partners By Enterprise API gets the trading partners for the given enterprise.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/TradingPartnerStatus"
            },
            "description": "Status of trading partner relationship",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "A list of trading partners.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tradingPartners": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TradingPartner"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/account/{accountId}/tradingpartners/{partnershipId}": {
      "put": {
        "operationId": "v1.tradingPartner.update",
        "tags": [
          "Trading Partners"
        ],
        "summary": "Update Trading Partner Request",
        "description": "The Update Trading Partner Request API allows you to accept, reject, or cancel a pending trading partner request",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Your trading account ID",
            "required": true
          },
          {
            "in": "path",
            "name": "partnershipId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "unique ID of the trading partnership that is to be updated",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Trading partner status update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/TradingPartnerStatus"
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trading partner status updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradingPartner"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      }
    },
    "/api/trade/v1/enterprise/{enterpriseId}/account/{accountId}/tradingpartners/{partnerAccountId}/balance": {
      "get": {
        "operationId": "v1.tradingPartner.accountBalanceCheck",
        "tags": [
          "Trading Partners"
        ],
        "summary": "Account Balance Check",
        "description": "The Account Balance Check API verifies whether an account has enough funds to support a settlement of some amount.",
        "parameters": [
          {
            "in": "path",
            "name": "enterpriseId",
            "schema": {
              "type": "string"
            },
            "description": "Enterprise ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Your trading account ID",
            "required": true
          },
          {
            "in": "path",
            "name": "partnerAccountId",
            "schema": {
              "type": "string"
            },
            "description": "Trading partner's trading account ID to balance check",
            "required": true
          },
          {
            "in": "query",
            "name": "amount",
            "schema": {
              "type": "string"
            },
            "description": "Amount of offchain currency to balance check. Integer as a string",
            "required": true
          },
          {
            "in": "query",
            "name": "currency",
            "schema": {
              "type": "string"
            },
            "description": "Offchain currency to balance check",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "True or false if account has sufficient balance.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "check": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError-2"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Address"
    },
    {
      "name": "Audit log"
    },
    {
      "name": "Bank account",
      "description": "Manage links to external bank accounts"
    },
    {
      "name": "Clearing & Settlement",
      "description": "Tools for initiating post-trade settlement activity between BitGo custodial counterparties"
    },
    {
      "name": "Coin-specific implementation",
      "description": "BitGo provides a unified API platform that lets customers manage a growing list of digital currencies in security-first,\nmulti-signature wallets. The API operates at a wallet level above the blockchain and the SDK handles the different\ntransactional implementations without getting in the user's way.\n\nSome operations (such as wallet creation) are handled differently between blockchains; for example, in Bitcoin, a\nmultisig address can be crafted with just the 3 keys, whereas in Ethereum, a multisig contract must be deployed.\n\nThis section explains BitGo wallet operations. The SDK handles the intricacies of each digital currency, creating a\ncommon interface across all coins.\n\nFor a summarized list of all supported digital currencies, see\n[Coins in Production](#section/Coin-Digital-Currency-Support).\n\n## Address Derivation (BIP-32)\n\n### Creating addresses\n\nBitGo uses a hierarchical deterministic (HD) wallet scheme for:\n\n- Manually generated addresses (for deposits)\n- Change addresses.\n\nThis HD scheme supports the\n<a href=\"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\" target=\"_new\" rel=\"noopener noreferrer\">BIP-32\nstandard</a> with the path `/0/0/{chain_code}/n` where `{chain_code}` is a variable that represents an address type:\n\n<a id=\"address-types\"></a>\n\n| Chain Code | Address Type                                            | Deposit or Change |\n| ---------- | ------------------------------------------------------- | ----------------- |\n| 0          | Pay to Script Hash (P2SH)                               | Deposit           |\n| 1          | Pay to Script Hash (P2SH)                               | Change            |\n| 10         | Wrapped Segwit (P2SH-P2WSH)                             | Deposit           |\n| 11         | Wrapped Segwit (P2SH-P2WSH)                             | Change            |\n| 20         | Bech32/Native Segwit/Pay to Witness Script Hash (P2WSH) | Deposit           |\n| 21         | Bech32/Native Segwit/Pay to Witness Script Hash (P2WSH) | Change            |\n| 30         | Bech32m Taproot (P2TR)                                  | Deposit           |\n| 31         | Bech32m Taproot (P2TR)                                  | Change            |\n\n## Algorand\n\n<!--{# TODO: Add section on staking with info on how users can now send a tx with 0 value to stake and therby vote. https://tinyurl.com/algo-governance is a doc on how users can stake with algo. Algo has this unique thing where to participate, you have to send a trx but some only want to vote wihtout actually staking so they can send 0 ALGO trx which we need to update for this  #}-->\n\nAlgorand can be accessed with the following coin types:\n\n| Environment         | Coin Type | Faucet                                                                           |\n| :------------------ | :-------- | :------------------------------------------------------------------------------- |\n| Algorand Production | algo      |                                                                                  |\n| Algorand Testnet    | talgo     | <a href=\"https://bank.testnet.algorand.network/\" target=“_blank” rel=“noreferrer”>https://bank.testnet.algorand.network/</a> |\n\n### Generating wallets\n\nTo create an Algo wallet using BitGoJS:\n\n```javascript\nbitgo\n  .coin('talgo')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\nTo create an Algo wallet using the platform API:\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/talgo/wallet/generate\n```\n\nAlgorand accounts must maintain a\n<a href=\"https://developer.algorand.org/docs/features/accounts/#minimum-balance\" target=“_blank” rel=“noreferrer”>minimum balance</a> of 100,000 microAlgos (0.1\nAlgos). Account operations (send, receive, etc) that trigger a balance lower than the minimium are not permitted. \n\nIn addition every enabled token will increase the minimum balance in 100,000 microAlgos. In example : \n- given a wallet without tokens enabled minumum balance is 100,000 microalgos.\n- given a wallet with one token enabled minimum balance is 200,000 microAlgos\n- given a wallet with two token enabled minimum balance is 300,000 microAlgos\n- and so ...\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('talgo')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/talgo/wallet/$WALLET/address\n```\n\n<!--{# TODO: Rewrite what is supposed to happen when you generate a new address per the cURL command above. See BG-37110 for what actually happens.  #}-->\n\n<a href=\"https://algorandcom.cdn.prismic.io/algorandcom%2Fece77f38-75b3-44de-bc7f-805f0e53a8d9_theoretical.pdf\" target=“_blank” rel=“noreferrer”>Algorand</a> is an\naccount-based coin. The creation of receive addresses results in additional accounts. When a user receives funds on a\nreceive address, those funds need to be consolidated in the base address of the wallet first in order to be spent. See\n[Consolidate account](#operation/v2.wallet.consolidateaccount.build).\n\n### Sending\n\nFunds can only be sent out from the wallet's base address. If your wallet has sufficient funds but you are unable to\nsend, you may first need to sweep the funds from the receive addresses into the base address by calling\n[Consolidate account](#operation/v2.wallet.consolidateaccount.build).\n\n> **Note:** `sendMany` is not supported as Algo transactions only support one input and one output.\n\n### Balances\n\nAlgo (ALGO) is the native asset of the Algorand blockchain. The base unit of Algo is microAlgo:\n\n- 1 microAlgo is (<code>10<sup>-6</sup></code>) or 0.000001 Algo.\n- 1 Algo is (<code>10<sup>6</sup></code>) or 1000000 microAlgos (1 million).\n\n> **Note:** The minimum earning unit (MEU) of Algorand is 1 Algo.\n\nBalances are supported in string and number format but string is recommended to ensure values do not exceed the\nprogrammable number limit: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n### Tokens\n\nAlgorand supports tokens transactions. This means you can now make transactions with other tokens apart from native algo coin. \n\n#### Enable token\n\nIn order to make token transactions you first need to enable the token in your wallet address(es). Once enabled, you will be able to receive and send that respective token. This process will take some fees from your account (1,000 microAlgos is the minimum and most common fee for enabling tokens).\n\n```javascript\nbitgo\n  .coin('talgo:tokenID')\n  .wallets()\n  .get({ id: walletId })\n  .then(function (wallet) {\n    return wallet.sendMany({\n      type: 'enabletoken',\n      recipients: [\n        {\n          amount: '0',\n          address: yourWalletAddress,\n        },\n      ],\n      feeRate: 1,\n      yourWalletPassphrase,\n    })\n  });\n```\n\n#### Disable token\n\nIn order to <a href=\"https://developer.algorand.org/docs/get-details/accounts/#:~:text=The%20minimum%20balance%20increases%20with%20each%20asset%20holding%20the%20account%20has\" target=“_blank” rel=“noreferrer”>reduce minimum balance needed into account</a>, or just for stop receiving transactions from some tokens, you can disable each previous enabled from your wallet address(es).\n\n```javascript\nbitgo\n  .coin('talgo:tokenID')\n  .wallets()\n  .get({ id: walletId })\n  .then(function (wallet) {\n    return wallet.sendMany({\n      type: 'disabletoken',\n      recipients: [\n        {\n          amount: '0',\n          address: yourWalletAddress,\n        },\n      ],\n      feeRate: 1,\n      yourWalletPassphrase,\n      closeRemainderTo,\n    })\n  });\n```\n> **Note:** closeRemainderTo is the address you want to send all remaining token balance when disable it.\n\n#### Send tokens\n\nJust as for your native token (ALGOs) you would be able to send tokens (from token enabled addresses) to other wallets. Here is an example of it:\n\n```javascript\nbitgo\n  .coin('talgo:tokenID')\n  .wallets()\n  .get({ id: walletId })\n  .then(function (wallet) {\n    return wallet.sendMany({\n      type: 'transfer',\n      recipients: [\n        {\n          amount,\n          receiverAddress,\n        },\n      ],\n      walletPassphrase: yourWalletPassphrase,\n    })\n  });\n```\n\n#### Recieve tokens\n\nOnce you have enabled the token you desire, and the token enable transaction has been confirmed, you will be able to receive tokens from other wallets.\n\n### Rewards\n\nAccounts holding at least 1 MEU (1 Algo or more) are eligible to earn rewards. Rewards are accrued in the Algorand\nnetwork and claimed by a specific account when a transaction involving that account is confirmed.\n\nBitGo does not keep track of pending rewards. Balances only account for rewards received in confirmed `pay`\ntransactions.\n\nReward calculation is complex and the amounts change every 500,000 blocks (the Rewards Period). To learn more, see\n<a href=\"https://www.algorand.com/resources/blog/rewards-technical-overview\" target=“_blank” rel=“noreferrer”>Algorand Rewards - A Technical Overview</a>.\n\n### Fee rate\n\nAlgorand's\n<a href=\"https://developer.algorand.org/docs/reference/transactions/#common-fields-header-and-type\" target=“_blank” rel=“noreferrer”>minimum transaction fee</a> is\n1000 microAlgos. For example, if you set `feeRate` to \"1\" microAlgo/kByte and the fee size is 247 kBytes, then the fee\namount=247 microAlgos. But because this is less than the required minimum, the default of 1000 microAlgos is applied.\n\n## Binance Smart Chain\n\nBinance Smart Chain can be accessed with the following coin types:\n\n| Environment     | Coin Type | Faucet                                                                               |\n| :-------------- | :-------- | :------------------------------------------------------------------------------------|\n| BSC Production  | bsc       |                                                                                      |\n| BSC Testnet     | tbsc      | <a href=\"https://testnet.binance.org/faucet-smart\" target=“_blank” rel=“noreferrer”>https://testnet.binance.org/faucet-smart</a> |\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('tbsc')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n    enterprise: '5612c2beeecf83610b621b90964448cd',\n    multisigType: 'tss',\n    walletVersion: 3,\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n### Balances\n\nBNB is the native asset of the Binance Smart Chain blockchain. The base unit of BNB is jager:\n\n- 1 jager is (<code>10<sup>-8</sup></code>) or 0.00000001 BNB.\n- 1 BNB is (<code>10<sup>8</sup></code>) or 100000000 jager (100 million).\n\n## Bitcoin\n\nBitcoin can be accessed with the following coin types:\n\n| Environment        | Coin Type | Faucet                                                                         |\n| :----------------- | :-------- | :----------------------------------------------------------------------------- |\n| Bitcoin Production | btc       |                                                                                |\n| Bitcoin Testnet    | tbtc      | <a href=\"https://coinfaucet.eu/en/btc-testnet/\" target=“_blank” rel=“noreferrer”>https://coinfaucet.eu/en/btc-testnet/</a> |\n\n> **Note:** The Bitcoin wallets in Platform V2 should not be confused with the wallets created via V1 routes.\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('tbtc')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/tbtc/wallet/generate\n```\n\nFor Bitcoin, BitGo uses a 2-of-3 multisig P2SH scheme, with the keys in the order of User, Backup, and BitGo\nrespectively.\n\nYou can create wallets with a single line of code using the BitGo SDK.\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('tbtc')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tbtc/wallet/$WALLET/address\n```\n\n> **Note:** See the table of address types under [Address Derivation (BIP-32)](#address-derivation-bip-32) above.\n> Bitcoin defaults to chain 10.\n\n### Balances\n\nBitcoin (BTC) is the native asset of the Bitcoin blockchain. The base unit of Bitcoin is satoshi (or \"sat\"):\n\n- 1 satoshi is (<code>10<sup>-8</sup></code>) or 0.00000001 Bitcoin.\n- 1 Bitcoin is (<code>10<sup>8</sup></code>) or 100000000 satoshis (100 million).\n\nBalances are supported in string and number format but string is recommended to ensure values do not exceed the\nprogrammable number limit: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n### Fee rate\n\nBitcoin's\n<a href=\"https://developer.bitcoin.org/devguide/transactions.html#transaction-fees-and-change\" target=“_blank” rel=“noreferrer”>minimum transaction fee</a> is 1000\nsatoshis. When sending a transaction, the default `feeRate` is 1000 satoshis/kvByte or 1 sat/vByte (which is 0.00000001\nBTC/vByte). Use [Get Fee Estimate](#operation/v2.tx.getfeeestimate) to calculate a fee rate (`feePerKb`) that increases\nthe probability that your transaction is confirmed.\n\n## Bitcoin Cash\n\nBitcoin Cash can be accessed with the following coin types:\n\n| Environment             | Coin Type | Faucet                                                                         |\n| :---------------------- | :-------- | :----------------------------------------------------------------------------- |\n| Bitcoin Cash Production | bch       |                                                                                |\n| Bitcoin Cash Testnet    | tbch      | <a href=\"https://coinfaucet.eu/en/bch-testnet/\" target=“_blank” rel=“noreferrer”>https://coinfaucet.eu/en/bch-testnet/</a> |\n\nNew wallets created within Bitcoin Cash are not able to receive normal Bitcoin.\n\n### Fork notes\n\nBitcoin Cash (BCH) forked from the Bitcoin mainnet on August 1st, 2017. Bitcoin addresses that had balances on this date\nkept the same balance within Bitcoin Cash. After this date, blocks and transactions on the BCH fork no longer overlap\nwith Bitcoin.\n\nThe Bitcoin Cash fork is\n<a href=\"https://bitcoin.stackexchange.com/questions/56867/how-does-bitcoin-cash-implement-replay-protection#56874\" target=“_blank” rel=“noreferrer”>replay-safe</a>\nboth ways, meaning that transactions made after August 1st, 2017 on one chain do not occur on the other.\n\n### Migrated Wallets\n\nAll BitGo customers using our Bitcoin wallets on August 1st, 2017 had their wallets and keys automatically migrated to\nthe V2 BCH coin type.\n\nUsers can find migrated wallets by using the [List Wallets](#operation/v2.wallet.list) API. On the wallet object, there\nis a `migratedFrom` property that corresponds to the Bitcoin Wallet ID.\n\nTo protect against confusion (users sending BCH to BTC addresses or vice versa), migrated wallets may not create new\naddresses by default. Users should create a new wallet with new keys to ensure all new BCH addresses do not collide with\nBTC addresses.\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('bch')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/bch/wallet/generate\n```\n\nFor Bitcoin, BitGo uses a 2-of-3 multisig P2SH scheme, with the keys in the order of User, Backup and BitGo\nrespectively.\n\nWallet creation can be done in a single line with the help of our SDK.\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('bch')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/bch/wallet/$WALLET/address\n```\n\n> **Note:** See the table of address types under [Address Derivation (BIP-32)](#address-derivation-bip-32) above.\n> Bitcoin Cash defaults to chain 0 (and does not support segwit).\n\n<!--{# TODO: Bitcoin Cash balances\n### Balances\n #}-->\n\n## Bitcoin Gold\n\nBitcoin Gold can be accessed with the following coin types:\n\n| Environment             | Coin Type | Faucet |\n| :---------------------- | :-------- | :----- |\n| Bitcoin Gold Production | btg       |        |\n\n### Fork notes\n\nBitcoin Gold (BTG) forked from the Bitcoin mainnet on October 24th, 2017. Bitcoin addresses that had balances on this\ndate kept the same balance within Bitcoin Gold. After this date, blocks and transactions on the BTG fork no longer\noverlap with Bitcoin.\n\nBitcoin Gold uses a different address format from Bitcoin which protects users from accidentally sending coins to the\nwrong chain. Bitcoin Gold addresses start with either a `G` or an `A`. As BitGo wallets use multisig addresses, all\naddresses for BitGo wallets start with an `A`.\n\nThe Bitcoin Gold fork is <a href=\"https://bitcoingold.org/replay-protection-development/\" target=“_blank” rel=“noreferrer”>replay-safe</a> both ways, meaning that\nnew transaction made on one chain will not occur on the other.\n\n### Migrated Wallets\n\nAll BitGo customers using our Bitcoin wallets on October 24th, 2017 had their wallets and keys automatically migrated to\nthe V2 BTG coin type.\n\nUsers can find migrated wallets by using the [List Wallets](#operation/v2.wallet.list) API. On the wallet object, there\nis a `migratedFrom` property that corresponds to the Bitcoin Wallet ID.\n\n### Creating addresses\n\n> **Note:** See section [Address Derivation (BIP-32)](#address-derivation-bip-32) for a table of address types. Bitcoin\n> Gold defaults to chain 10.\n\n<!--{# TODO: Bitcoin Gold balances\n### Balances\n #}-->\n\n## Casper\n\n<a href=\"https://docs.casperlabs.io/en/latest/\" target=“_blank” rel=“noreferrer”>Casper</a> can be accessed with the following coin types:\n\n| Environment       | Coin Type | Faucet                                                                           |\n| :---------------- | :-------- | :------------------------------------------------------------------------------- |\n| Casper Production | cspr      |                                                                                  |\n| Casper Testnet    | tcspr     | <a href=\"https://testnet.cspr.live/tools/faucet\" target=“_blank” rel=“noreferrer”>https://testnet.cspr.live/tools/faucet</a> |\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('tcspr')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/tcspr/wallet/generate\n```\n\nBefore you can use a Casper wallet, it must be initialized on the Casper blockchain. A funding transaction must first be\nsent to the wallet's address. When BitGo detects this funding transaction, it automatically sends another initialization\ntransaction to set up the signers and the home domain of the account.\n\nUntil the initialization transaction is confirmed, the wallet is _not_ ready for use, and the receive address is _not_\nexposed in the API. This is to protect users from losing funds by sending to a wallet that does not exist on the\nnetwork.\n\n> **Warning:** Do not use a Casper wallet while it is being initialized or you may lose funds.\n\nCasper accounts must maintain a minimum balance. See [Casper Balances](#cspr-balances).\n\n### Required reserve\n\n```shell\ncurl -X GET \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tcspr/requiredReserve\n```\n\nFetch information about reserve requirements for an account. See [Casper Balances](#cspr-balances).\n\n#### HTTP Request\n\n`GET /api/v2/:coin/requiredReserve`\n\n#### Response\n\n| Field          | Description                                                     |\n| :------------- | :-------------------------------------------------------------- |\n| baseFee        | Base fee used in transaction fees.                              |\n| baseReserve    | Base reserve used in minimum account balances.                  |\n| reserve        | Minimum account balance, calculated using base reserve.         |\n| minimumFunding | Minimum funding balance, calculated using reserve and base fee. |\n| height         | Height of the block that provides the base values.              |\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('tcspr')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tcspr/wallet/$WALLET/address\n```\n\nCasper wallet addresses differ by a sequentially incremented\n<a href=\"https://docs.casperlabs.io/en/latest/workflow/transfer-workflow.html?highlight=transfer-funds#transfer\" target=“_blank” rel=“noreferrer”>transferId</a>\n(because they cannot leverage the BIP-32 standard). The transferId type used by BitGo is `TRANSFER_ID`: a 64-bit\nunsigned numeric string.\n\nWhen a new address is created, the incremented `transferId` and the `rootAddress` are returned in the `coinSpecific`\nproperty.\n\n<a id=\"cspr-balances\"></a>\n\n### Balances\n\nCasper (CSPR) the native asset of the Casper blockchain. The base unit of Casper is the mote:\n\n- 1 mote is <code>10<sup>-9</sup></code> or 0.000000001 Casper.\n- 1 Casper is <code>10<sup>9</sup></code> or 1000000000 motes (1 billion).\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\nCasper accounts must maintain a minimum balance which is calculated by adding a base reserve and a base fee. Currently,\nthe base reserve is 2.5 CSPR and the base fee is 1 CSPR so the minimum balance required is 3.5 CSPR.\n\n### Transactions\n\nCasper uses an account-based model like XLM and XRP. But instead of using XLM's `memo` or XRP's destination tag, Casper\nuses `transferId`.\n\nCurrently, the <a href=\"https://docs.casperlabs.io/en/latest/dapp-dev-guide/deploying-contracts.html\" target=“_blank” rel=“noreferrer”>fixed fee</a> is 10,000 motes\n`(0.0001 CSPR)`. And the minimum amount for a transaction is 2.5 CSPR.\n\n### Staking\n\nCasper provides <a href=\"https://docs.casperlabs.io/en/latest/workflow/staking.html\" target=“_blank” rel=“noreferrer”>staking service</a> via smart contracts.\nStaking and unstaking requests require an active validator and an amount greater or equal to 2.5 CSPR to be provided.\n\nCurrently, the fees for staking and unstaking are 5 CSPR for both.\n\n## Celo\n\nCelo can be accessed with the following coin types:\n\n| Environment     | Coin Type | Faucet                                                                   |\n| :-------------- | :-------- | :----------------------------------------------------------------------- |\n| Celo Production | celo      |                                                                          |\n| Celo Testnet    | tcelo     | <a href=\"https://celo.org/developers/faucet\" target=“_blank” rel=“noreferrer”>https://celo.org/developers/faucet</a> |\n\n### Enterprise fee address\n\n```shell\nENTERPRISEID=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tcelo/enterprise/$ENTERPRISEID/feeAddressBalance\n```\n\nCelo uses the same fee address structure as Ethereum. Each enterprise has a fee address that is used to pay for\ntransaction fees on all Celo wallets in that enterprise. The fee address is displayed in the dashboard of the BitGo\nwebsite, and you must fund it before creating a wallet, address, or sending a transaction.\n\nIf the enterprise's fee address runs out of funds, you cannot create new wallets or addresses, and cannot send\ntransactions until you fund the fee address. If the balance of your fee address gets too low, you will not be able to\nfund it with one of your own Celo wallets (because you will not be able to send transactions from your Celo wallet).\nBitGo recommneds that you create and fund a non-BitGo Celo account, so you can use it to fund your BitGo enterprise fee\naddress. Any open source Celo wallet can be used to create an account.\n\n> **Note:** A best practice is to create and fund a non-BitGo Celo account to fund your BitGo enterprise fee address.\n\nNote that the fee address is a single-signature account, and the private key is created and owned by BitGo. You cannot\nsend funds out of the fee address once you have sent them in. There is a `feeAddress` field under the `CoinSpecific` key\nfor Celo wallets. Use this address to pay the fees for creating transactions and addresses.\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('tcelo')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n    enterprise: '5612c2beeecf83610b621b90964448cd',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/tcelo/wallet/generate\n```\n\nBefore you can use a Celo wallet, it must be initialized on the Celo blockchain. A funding transaction must first be\nsent to the wallet's address. When BitGo detects this funding transaction, it automatically sends another initialization\ntransaction to set up the signers and the home domain of the account.\n\nUntil the initialization transaction is confirmed, the wallet is _not_ ready for use, and the receive address is _not_\nexposed in the API. This is to protect users from losing funds by sending to a wallet that does not exist on the\nnetwork.\n\n> **Warning:** Do not use a Celo wallet while it is being initialized or you may lose funds.\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('tcelo')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tcelo/wallet/$WALLET/address\n```\n\nAs with Celo wallets, Celo address must be initialized on the Celo blockchain before they can be used.\n\nTo deploy a receive address contract, BitGo sends a transaction on the Celo network. Remember that you _must fund_ the\nfee address. Like wallet creation process, a Celo address is not immediately usable and so the caller of this function\nmust wait for the initialization transaction to be confirmed before attempting to fetch, or send to, the address.\n\n> **Warning:** Do not use a Celo address while it is being initialized or you may lose funds.\n\n### Balances\n\nCELO (CELO) is the native asset of the Celo blockchain. The base unit of CELO is wei:\n\n- 1 wei is (<code>10<sup>-18</sup></code>) or 0.000000000000000001 CELO.\n- 1 CELO is (<code>10<sup>18</sup></code>) or 1000000000000000000 wei (1 quintillion).\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n### Transactions\n\nBitGo's Celo multisig contract currently only supports one sender and one recipient so the `sendMany` is not supported.\n\n## Celo - ERC20 Tokens\n\nCelo ERC20 tokens can be accessed with the following coin types:\n\n| Environment                    | Coin Type | Contract Details                                                                                                                                                                                                                   |\n| :----------------------------- | :-------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Celo Alfajores Testnet Testnet | tcusd     | <a href=\"https://alfajores-blockscout.celo-testnet.org/tokens/0x874069fa1eb16d44d622f2e0ca25eea172369bc1/token_transfers\" target=“_blank” rel=“noreferrer”>https://alfajores-blockscout.celo-testnet.org/tokens/0x874069fa1eb16d44d622f2e0ca25eea172369bc1/token_transfers</a> |\n| Celo Mainnet                   | cusd      | <a href=\"https://explorer.celo.org/tokens/0x765de816845861e75a25fca122bb6898b8b1282a/token_transfers\" target=“_blank” rel=“noreferrer”>https://explorer.celo.org/tokens/0x765de816845861e75a25fca122bb6898b8b1282a/token_transfers</a>                                         |\n\n## Dash\n\n<a href=\"https://docs.dash.org/en/stable/introduction/information.html\" target=“_blank” rel=“noreferrer”>Dash</a> can be accessed with the following coin types:\n\n| Environment     | Coin Type | Faucet                                                                 |\n| :-------------- | :-------- | :--------------------------------------------------------------------- |\n| Dash Production | dash      |                                                                        |\n| Dash Testnet    | tdash     | <a href=\"http://test.faucet.masternode.io/\" target=“_blank” rel=“noreferrer”>http://test.faucet.masternode.io/</a> |\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('tdash')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/tdash/wallet/generate\n```\n\nFor Dash, BitGo uses the same 2-of-3 multisig P2SH scheme as for Bitcoin, with the keys in the order of User, Backup and\nBitGo respectively.\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('tdash')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tdash/wallet/$WALLET/address\n```\n\n> **Note:** See the table of address types under [Address Derivation (BIP-32)](#address-derivation-bip-32) above. Dash\n> defaults to chain 0 (and does not support segwit).\n\n### Balances\n\nDash (DASH) is the native asset of the Dash blockchain. The base unit of Dash is duff:\n\n- 1 duff is (<code>10<sup>-8</sup></code>) or 0.00000001 Dash.\n- 1 Dash is (<code>10<sup>8</sup></code>) or 100000000 duffs (100 million).\n\nBalances are supported in string and number format but string is recommended to ensure values do not exceed the\nprogrammable number limit: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n### Dash InstantSend\n\nDash <a href=\"https://docs.dash.org/en/stable/developers/integration.html#integration-instantsend\" target=“_blank” rel=“noreferrer”>InstantSend</a> is a extension\nallowing instant on-chain Dash payments.\n\nDash masternodes provide near instant certainty (before an on-chain confirmation) that a transaction's inputs cannot be\nrespent, and that the transaction will be included in a following block instead of a conflicting transaction.\n\nDash InstantSend receiving and sending support is exposed through the `instant` flag on Transfer objects and sending\nAPIs.\n\nDash InstantSend transactions require higher than normal fees. When the `instant` flag is set to true, these fees are\nautomatically calculated when building a tranaction and enforced when sending.\n\n## EOS\n\nEOS can be accessed with the following coin types:\n\n| Environment        | Coin Type | Faucet                                                                               |\n| :----------------- | :-------- | :----------------------------------------------------------------------------------- |\n| EOS Production     | eos       |                                                                                      |\n| EOS Jungle Testnet | teos      | <a href=\"https://monitor.jungletestnet.io/#faucet\" target=“_blank” rel=“noreferrer”>https://monitor.jungletestnet.io/#faucet</a> |\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('teos')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/teos/wallet/generate\n```\n\nBefore you can use an EOS wallet, it must be initialized on the EOS blockchain. A funding transaction must first be sent\nto the wallet's address. When BitGo detects this funding transaction, it automatically sends another initialization\ntransaction to set up the signers and the home domain of the account.\n\nUntil the initialization transaction is confirmed, the wallet is _not_ ready for use, and the receive address is _not_\nexposed in the API. This is to protect users from losing funds by sending to a wallet that does not exist on the\nnetwork.\n\n> **Warning:** Do not use an EOS wallet while it is being initialized or you may lose funds.\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('teos')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/teos/wallet/$WALLET/address\n```\n\nEOS transactions only support one input and one output. That means that the `sendMany` call is not supported.\n\nLike XLM, EOS addresses differ only by sequential and incrementing memo components (and do not use the BIP-32 standard).\n\n### Balances\n\nEOS (EOS) is the native asset of the EOS blockchain. The base unit does not have a name and is simply referred to as the\nbase unit of EOS.\n\n- 1 base unit of EOS is (<code>10<sup>-4</sup></code>) or 0.0001 EOS.\n- 1 EOS is (<code>10<sup>4</sup></code>) or 10000 base units of EOS (10 thousand).\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n## Ethereum\n\nEthereum can be accessed with the following coin types:\n\n| Environment         | Coin Type | Faucet Instructions                                                                |\n| :------------------ | :-------- | :--------------------------------------------------------------------------------- |\n| Ethereum Production | eth       |                                                                                    |\n| Ethereum Testnet    | teth      | <a href=\"https://github.com/kovan-testnet/faucet\" target=“_blank” rel=“noreferrer”>https://github.com/kovan-testnet/faucet</a> |\n\n### Enterprise fee address\n\n```shell\nENTERPRISEID=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/teth/enterprise/$ENTERPRISEID/feeAddressBalance\n```\n\nBitGo's Ethereum wallet contract requires separate accounts to send transactions and pay fees (unlike Bitcoin).\n\nEach enterprise has one or more dedicated fee addresses (or \"gas tanks\") for paying Ethereum transaction fees. There is\none fee address per network, for example, Ethereum mainnet, and each testnet.\n\nOn the dashboard of the BitGo UI, your \"Network Gas Tanks,\" and their associated fee addresses, are displayed. In an\nEthereum wallet response, there is a 'feeAddress' field under the 'CoinSpecific' key. Use this address to pay the fees\nfor creating transactions and addresses.\n\nYour enterprise must keep the relevant fee addresses funded in order to create wallets, create addresses, or send\ntransaction. If you don't, you cannot do those operations, nor can you fund the tank.\n\n> Note: BitGo recommends that you create and fund a non-BitGo Ethereum account so you can use it to fund your BitGo\n> enterprise fee addresses. Any open source Ethereum wallet or Ethereum exchange can be used to create an account.\n\nA BitGo fee address is a single-signature account and the private key is created and owned by BitGo, so you cannot send\nfunds from this address once you have sent them in.\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('teth')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n    enterprise: '5612c2beeecf83610b621b90964448cd',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/teth/wallet/generate\n```\n\nBefore you can use an Ethereum wallet, it must be initialized on the Ethereum blockchain. When you create an Ethereum\nwallet, BitGo sends a transaction on the Ethereum network in order to deploy its multi-signature wallet contract.\n\n> **Note:** Ethereum wallets can only be created under an enterprise. When you create an Ethereum wallet, remember to\n> pass the enterprise Id.\n\nUntil the initialization transaction is confirmed, the wallet is _not_ ready for use, and the receive address is _not_\nexposed in the API. This is to protect users from losing funds by sending to a wallet that does not exist on the\nnetwork.\n\n> **Warning:** Do not use an Ethereum wallet while it is being initialized or you may lose funds.\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('teth')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/teth/wallet/$WALLET/address\n```\n\nUnlike Bitcoin, Ethereum address creation requires interactions with the Ethereum blockchain. In order to deploy a\nreceive address contract, BitGo sends a transaction on the Ethereum network. Make sure to fund the fee address mentioned\nabove. Like the wallet creation process, an Ethereum address will not be immediately usable upon creation and so the\ncaller of this function will have to wait for the initialization transaction to be confirmed before attempting to fetch,\nor send to, the address\n\n### Balances\n\nEther (ETH) is the native asset of the Ethereum blockchain. The base unit is wei (and gas fees are denoted in gwei):\n\n- 1 wei is (<code>10<sup>-18</sup></code>) or 0.000000000000000001 Ether.\n- 1 gwei is (<code>10<sup>-9</sup></code>) or 0.000000001 Ether (or 1000000000 wei).\n- 1 Ether is (<code>10<sup>18</sup></code>) or 1000000000000000000 wei (1 quintillion).\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n### Transactions\n\nBitGo's Ethereum multisig contract currently only supports one sender and one recipient. That means that the `sendMany`\ncall only accepts one recipient.\n\n## Ethereum - ERC20 Tokens\n\nCoins are native to a blockchain, such as Bitcoin or Ether. Tokens represent as asset on someone else's blockchain.\nERC20 tokens are assets on the Ethereum blcokchain that adhere to\n<a href=\"https://eips.ethereum.org/EIPS/eip-20\" target=“_blank” rel=“noreferrer”>EIP-20 Token Standard</a>.\n\nBitGo supported ERC20 tokens can be accessed on the Ethereum Mainnet:\n\n<!--{# Uncomment to put tokens in a collapsible table\n<details>\n  <summary>**Click to expand the list of ERC20 tokens**</summary>\n#}-->\n\n| Coin Type | Token Name                           | Precicison | Contract Details                                                                                                                                |\n| :-------- | :----------------------------------- | :--------- | :---------------------------------------------------------------------------------------------------------------------------------------------- |\n| 1inch     | 1inch Token                          | 18         | <a href=\"https://etherscan.io/token/0x111111111117dc0aa78b770fa6a738034120c302\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x111111111117dc0aa78b770fa6a738034120c302</a>  |\n| 1up       | Uptrennd Token                       | 18         | <a href=\"https://etherscan.io/token/0x07597255910a51509ca469568b048f2597e72504\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x07597255910a51509ca469568b048f2597e72504</a>  |\n| aave      | Aave                                 | 18         | <a href=\"https://etherscan.io/token/0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9</a>  |\n| abt       | ArcBlock                             | 18         | <a href=\"https://etherscan.io/token/0xb98d4c97425d9908e66e53a6fdf673acca0be986\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb98d4c97425d9908e66e53a6fdf673acca0be986</a>  |\n| ace       | Ace Token                            | 6          | <a href=\"https://etherscan.io/token/0xe17e41acd4caa3cec048837bfd1918b3c4141767\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe17e41acd4caa3cec048837bfd1918b3c4141767</a>  |\n| acxt      | Ac Exchange Token                    | 18         | <a href=\"https://etherscan.io/token/0x7be00ed6796b21656732e8f739fc1b8f1c53da0d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7be00ed6796b21656732e8f739fc1b8f1c53da0d</a>  |\n| ach       | Alchemy Pay                          | 8          | <a href=\"https://etherscan.io/token/0xed04915c23f00a313a544955524eb7dbd823143d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xed04915c23f00a313a544955524eb7dbd823143d</a>  |\n| ae        | Aeternity                            | 18         | <a href=\"https://etherscan.io/token/0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d</a>  |\n| aergo     | Aergo                                | 18         | <a href=\"https://etherscan.io/token/0xae31b85bfe62747d0836b82608b4830361a3d37a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xae31b85bfe62747d0836b82608b4830361a3d37a</a>  |\n| aergo1    | Aergo1                               | 18         | <a href=\"https://etherscan.io/token/0x91af0fbb28aba7e31403cb457106ce79397fd4e6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x91af0fbb28aba7e31403cb457106ce79397fd4e6</a>  |\n| agwd      | AGARWOOD                             | 18         | <a href=\"https://etherscan.io/token/0xc3e419177044c9172823f06335d5d82aaf38a5c6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc3e419177044c9172823f06335d5d82aaf38a5c6</a>  |\n| aion      | AION                                 | 8          | <a href=\"https://etherscan.io/token/0x4ceda7906a5ed2179785cd3a40a69ee8bc99c466\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4ceda7906a5ed2179785cd3a40a69ee8bc99c466</a>  |\n| ali       | Artificial Liquid Intelligence Token | 18         | <a href=\"https://etherscan.io/token/0x6b0b3a982b4634ac68dd83a4dbf02311ce324181\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6b0b3a982b4634ac68dd83a4dbf02311ce324181</a>  |\n| alpha     | Alpha Finance                        | 18         | <a href=\"https://etherscan.io/token/0xa1faa113cbe53436df28ff0aee54275c13b40975\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa1faa113cbe53436df28ff0aee54275c13b40975</a>  |\n| amn       | Amon                                 | 18         | <a href=\"https://etherscan.io/token/0x737f98ac8ca59f2c68ad658e3c3d8c8963e40a4c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x737f98ac8ca59f2c68ad658e3c3d8c8963e40a4c</a>  |\n| amo       | AMO Token                            | 18         | <a href=\"https://etherscan.io/token/0x38c87aa89b2b8cd9b95b736e1fa7b612ea972169\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x38c87aa89b2b8cd9b95b736e1fa7b612ea972169</a>  |\n| amon      | AmonD                                | 18         | <a href=\"https://etherscan.io/token/0x00059ae69c1622a7542edc15e8d17b060fe307b6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x00059ae69c1622a7542edc15e8d17b060fe307b6</a>  |\n| amp       | AMP Token                            | 18         | <a href=\"https://etherscan.io/token/0xff20817765cb7f73d4bde2e66e067e58d11095c2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xff20817765cb7f73d4bde2e66e067e58d11095c2</a>  |\n| ampx      | Amplify Exchange                     | 18         | <a href=\"https://etherscan.io/token/0x735af341f2d9ce3663616cd84ff522dbf62fbc1f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x735af341f2d9ce3663616cd84ff522dbf62fbc1f</a>  |\n| ana       | ANA                                  | 18         | <a href=\"https://etherscan.io/token/0xfafd51641ab09dff163cd04d2eb6b7865eb83f53\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xfafd51641ab09dff163cd04d2eb6b7865eb83f53</a>  |\n| ape       | ApeCoin                        | 18               | <a href=\"https://etherscan.io/token/0x4d224452801aced8b2f0aebe155379bb5d594381\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4d224452801aced8b2f0aebe155379bb5d594381</a>  |\n| api3      | API3                                 | 18         | <a href=\"https://etherscan.io/token/0x0b38210ea11411557c13457d4da7dc6ea731b88a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0b38210ea11411557c13457d4da7dc6ea731b88a</a>  |\n| ant       | Aragon                               | 18         | <a href=\"https://etherscan.io/token/0x960b236a07cf122663c4303350609a66a7b288c0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x960b236a07cf122663c4303350609a66a7b288c0</a>  |\n| antv2     | Antv2                                | 18         | <a href=\"https://etherscan.io/token/0xa117000000f279d81a1d3cc75430faa017fa5a2e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa117000000f279d81a1d3cc75430faa017fa5a2e</a>  |\n| aoa       | Aurora                               | 18         | <a href=\"https://etherscan.io/token/0x9ab165d795019b6d8b3e971dda91071421305e5a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9ab165d795019b6d8b3e971dda91071421305e5a</a>  |\n| appc      | AppCoins                             | 18         | <a href=\"https://etherscan.io/token/0x1a7a8bd9106f2b8d977e08582dc7d24c723ab0db\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1a7a8bd9106f2b8d977e08582dc7d24c723ab0db</a>  |\n| aqt       | Alpha Quark Token                    | 18         | <a href=\"https://etherscan.io/token/0x2a9bdcff37ab68b95a53435adfd8892e86084f93\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2a9bdcff37ab68b95a53435adfd8892e86084f93</a>  |\n| arct      | ArCoin US Treasury                   | 18         | <a href=\"https://etherscan.io/token/0xeb0f0df01c400fd21fb8533a68423703d22cfcc5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xeb0f0df01c400fd21fb8533a68423703d22cfcc5</a>  |\n| arcx      | ARCx Governance Token                | 18         | <a href=\"https://etherscan.io/token/0x1321f1f1aa541a56c31682c57b80ecfccd9bb288\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1321f1f1aa541a56c31682c57b80ecfccd9bb288</a>  |\n| ast       | AirSwap                              | 4          | <a href=\"https://etherscan.io/token/0x27054b13b1b798b345b591a4d22e6562d47ea75a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x27054b13b1b798b345b591a4d22e6562d47ea75a</a>  |\n| atri      | Atari Token                          | 0          | <a href=\"https://etherscan.io/token/0xdacd69347de42babfaecd09dc88958378780fb62\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdacd69347de42babfaecd09dc88958378780fb62</a>  |\n| audio     | Audio                                | 18         | <a href=\"https://etherscan.io/token/0x18aaa7115705e8be94bffebde57af9bfc265b998\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x18aaa7115705e8be94bffebde57af9bfc265b998</a>  |\n| axl       | Axelar                         | 6               | [https://etherscan.io/token/0x3eacbdc6c382ea22b78acc158581a55aaf4ef3cc](ht tps://etherscan.io/token/0x3eacbdc6c382ea22b78acc158581a55aaf4ef3cc)  |\n| audx      | eToro Australian Dollar              | 18         | <a href=\"https://etherscan.io/token/0xdf1e9e1a218cff9888faef311d6fbb472e4175ce\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdf1e9e1a218cff9888faef311d6fbb472e4175ce</a>  |\n| aust      | Wrapped Anchor UST Token             | 18         | <a href=\"https://etherscan.io/token/0xa8de3e3c934e2a1bb08b010104ccabbd4d6293ab\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa8de3e3c934e2a1bb08b010104ccabbd4d6293ab</a>  |\n| axpr      | aXpire                               | 18         | <a href=\"https://etherscan.io/token/0xc39e626a04c5971d770e319760d7926502975e47\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc39e626a04c5971d770e319760d7926502975e47</a>  |\n| axs       | Axie Infinity Shards                 | 18         | <a href=\"https://etherscan.io/token/0xf5d669627376ebd411e34b98f19c868c8aba5ada\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf5d669627376ebd411e34b98f19c868c8aba5ada</a>  |\n| axsv2     | Axie Infinity Shards V2              | 18         | <a href=\"https://etherscan.io/token/0xbb0e17ef65f82ab018d8edd776e8dd940327b28b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xbb0e17ef65f82ab018d8edd776e8dd940327b28b</a>  |\n| badger    | Badger                               | 18         | <a href=\"https://etherscan.io/token/0x3472a5a71965499acd81997a54bba8d852c6e53d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x3472a5a71965499acd81997a54bba8d852c6e53d</a>  |\n| bal       | Balancer                             | 18         | <a href=\"https://etherscan.io/token/0xba100000625a3754423978a60c9317c58a424e3d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xba100000625a3754423978a60c9317c58a424e3d</a>  |\n| band      | Band Protocol                        | 18         | <a href=\"https://etherscan.io/token/0xba11d00c5f74255f56a5e366f4f77f5a186d7f55\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xba11d00c5f74255f56a5e366f4f77f5a186d7f55</a>  |\n| basic     | BASIC Token                          | 18         | <a href=\"https://etherscan.io/token/0xf25c91c87e0b1fd9b4064af0f427157aab0193a7\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf25c91c87e0b1fd9b4064af0f427157aab0193a7</a>  |\n| bat       | Basic Attention Token                | 18         | <a href=\"https://etherscan.io/token/0x0d8775f648430679a709e98d2b0cb6250d2887ef\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0d8775f648430679a709e98d2b0cb6250d2887ef</a>  |\n| bax       | BABB                                 | 18         | <a href=\"https://etherscan.io/token/0x9a0242b7a33dacbe40edb927834f96eb39f8fbcb\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9a0242b7a33dacbe40edb927834f96eb39f8fbcb</a>  |\n| bbx       | BBX                                  | 18         | <a href=\"https://etherscan.io/token/0x71529cea068e3785efd4f18aaf59a6cb82b7e5cb\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x71529cea068e3785efd4f18aaf59a6cb82b7e5cb</a>  |\n| bcap      | BCAP                                 | 0          | <a href=\"https://etherscan.io/token/0x1f41e42d0a9e3c0dd3ba15b527342783b43200a9\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1f41e42d0a9e3c0dd3ba15b527342783b43200a9</a>  |\n| bcc       | Basiscoin Cash                       | 18         | <a href=\"https://etherscan.io/token/0xae17f4f5ca32f77ea8e3786db7c0b2fe877ac176\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xae17f4f5ca32f77ea8e3786db7c0b2fe877ac176</a>  |\n| bcio      | Blockchain.io                        | 18         | <a href=\"https://etherscan.io/token/0xcdc412f306e0c51e3249b88c65423cd16b322673\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xcdc412f306e0c51e3249b88c65423cd16b322673</a>  |\n| bepro     | BetProtocol                          | 18         | <a href=\"https://etherscan.io/token/0x786001c9c5ca6e502deb8a8a72480d2147891f32\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x786001c9c5ca6e502deb8a8a72480d2147891f32</a>  |\n| bed       | Bankless BED Index                   | 18         | <a href=\"https://etherscan.io/token/0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6</a>  |\n| bid       | Blockbid                             | 2          | <a href=\"https://etherscan.io/token/0xdd5151da2ab25566e1d2a3c9a3e77396303f8a93\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdd5151da2ab25566e1d2a3c9a3e77396303f8a93</a>  |\n| blocks    | Blocks                               | 18         | <a href=\"https://etherscan.io/token/0x8a6d4c8735371ebaf8874fbd518b56edd66024eb\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8a6d4c8735371ebaf8874fbd518b56edd66024eb</a>  |\n| bidl      | Blockbid Liquidity                   | 2          | <a href=\"https://etherscan.io/token/0x5c7ec304a60ed545518085bb4aba156e8a7596f6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x5c7ec304a60ed545518085bb4aba156e8a7596f6</a>  |\n| bird      | BirdCoin                             | 18         | <a href=\"https://etherscan.io/token/0x026e62dded1a6ad07d93d39f96b9eabd59665e0d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x026e62dded1a6ad07d93d39f96b9eabd59665e0d</a>  |\n| bit       | BitDAO                               | 18         | <a href=\"https://etherscan.io/token/0x1a4b46696b2bb4794eb3d4c26f1c55f9170fa4c5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1a4b46696b2bb4794eb3d4c26f1c55f9170fa4c5</a>  |\n| bnb       | BNB Token                            | 18         | <a href=\"https://etherscan.io/token/0xb8c77482e45f1f44de1745f52c74426c631bdd52\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb8c77482e45f1f44de1745f52c74426c631bdd52</a>  |\n| bnk       | Bankera                              | 8          | <a href=\"https://etherscan.io/token/0xc80c5e40220172b36adee2c951f26f2a577810c5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc80c5e40220172b36adee2c951f26f2a577810c5</a>  |\n| bnl       | BitNational                          | 18         | <a href=\"https://etherscan.io/token/0xa717d0f45652fb430fd84d3d1b6b02e4510102ea\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa717d0f45652fb430fd84d3d1b6b02e4510102ea</a>  |\n| bnt       | Bancor                               | 18         | <a href=\"https://etherscan.io/token/0x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c</a>  |\n| bnty      | Bounty0x                             | 18         | <a href=\"https://etherscan.io/token/0xd2d6158683aee4cc838067727209a0aaf4359de3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd2d6158683aee4cc838067727209a0aaf4359de3</a>  |\n| boba      | Boba Token                           | 18         | <a href=\"https://etherscan.io/token/0x42bbfa2e77757c645eeaad1655e0911a7553efbc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x42bbfa2e77757c645eeaad1655e0911a7553efbc</a>  |\n| bond      | BarnBridge                           | 18         | <a href=\"https://etherscan.io/token/0x0391d2021f89dc339f60fff84546ea23e337750f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0391d2021f89dc339f60fff84546ea23e337750f</a>  |\n| box       | ContentBox                           | 18         | <a href=\"https://etherscan.io/token/0x63f584fa56e60e4d0fe8802b27c7e6e3b33e007f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x63f584fa56e60e4d0fe8802b27c7e6e3b33e007f</a>  |\n| brd       | Bread                                | 18         | <a href=\"https://etherscan.io/token/0x558ec3152e2eb2174905cd19aea4e34a23de9ad6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x558ec3152e2eb2174905cd19aea4e34a23de9ad6</a>  |\n| brz       | Brazilian Digital Token              | 4          | <a href=\"https://etherscan.io/token/0x420412e765bfa6d85aaac94b4f7b708c89be2e2b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x420412e765bfa6d85aaac94b4f7b708c89be2e2b</a>  |\n| bsx       | Bistox Exchange Token                | 18         | <a href=\"https://etherscan.io/token/0x435b67f0dcae34c046720de42fcdc135b8f90e55\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x435b67f0dcae34c046720de42fcdc135b8f90e55</a>  |\n| btrst     | Braintrust                           | 18         | <a href=\"https://etherscan.io/token/0x799ebfabe77a6e34311eeee9825190b9ece32824\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x799ebfabe77a6e34311eeee9825190b9ece32824</a>  |\n| btt       | Blocktrade                           | 18         | <a href=\"https://etherscan.io/token/0xfa456cf55250a839088b27ee32a424d7dacb54ff\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xfa456cf55250a839088b27ee32a424d7dacb54ff</a>  |\n| btu       | BTU Protocol                         | 18         | <a href=\"https://etherscan.io/token/0xb683d83a532e2cb7dfa5275eed3698436371cc9f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb683d83a532e2cb7dfa5275eed3698436371cc9f</a>  |\n| burp      | Big Town Chef                        | 18         | <a href=\"https://etherscan.io/token/0x33f391f4c4fe802b70b77ae37670037a92114a7c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x33f391f4c4fe802b70b77ae37670037a92114a7c</a>  |\n| busd      | Binance USD                          | 18         | <a href=\"https://etherscan.io/token/0x4fabb145d64652a948d72533023f6e7a623c7c53\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4fabb145d64652a948d72533023f6e7a623c7c53</a>  |\n| buy       | buying.com                           | 18         | <a href=\"https://etherscan.io/token/0x0d7f0fa3a79bfedbab291da357958596c74e27d7\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0d7f0fa3a79bfedbab291da357958596c74e27d7</a>  |\n| bxx       | Baanx                                | 18         | <a href=\"https://etherscan.io/token/0x6b1a8f210Ec6b7B6643cea3583Fb0c079f367898\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6b1a8f210Ec6b7B6643cea3583Fb0c079f367898</a>  |\n| bxxv1     | Baanx (deprecated)                   | 18         | <a href=\"https://etherscan.io/token/0x54f9b4b4485543a815c51c412a9e20436a06491d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x54f9b4b4485543a815c51c412a9e20436a06491d</a>  |\n| bzz       | BZZ                                  | 16         | <a href=\"https://etherscan.io/token/0x19062190b1925b5b6689d7073fdfc8c2976ef8cb\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x19062190b1925b5b6689d7073fdfc8c2976ef8cb</a>  |\n| c8p       | C8 Plus                              | 18         | <a href=\"https://etherscan.io/token/0x6930d2299964bcc81b8bcb453a522791e6488be1\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6930d2299964bcc81b8bcb453a522791e6488be1</a>  |\n| cacxt     | Cacxt                                | 18         | <a href=\"https://etherscan.io/token/0xe2b8c4938a3103c1ab5c19a6b93d07ab6f9da2ba\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe2b8c4938a3103c1ab5c19a6b93d07ab6f9da2ba</a>  |\n| cadx      | eToro Canadian Dollar                | 18         | <a href=\"https://etherscan.io/token/0x8ed876e408959643479534a21970ec023d0fb51e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8ed876e408959643479534a21970ec023d0fb51e</a>  |\n| cag       | Change                               | 18         | <a href=\"https://etherscan.io/token/0x7d4b8cce0591c9044a22ee543533b72e976e36c3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7d4b8cce0591c9044a22ee543533b72e976e36c3</a>  |\n| cbat      | Compound BAT                         | 8          | <a href=\"https://etherscan.io/token/0x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e</a>  |\n| cbc       | CashBet Coin                         | 8          | <a href=\"https://etherscan.io/token/0x26db5439f651caf491a87d48799da81f191bdb6b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x26db5439f651caf491a87d48799da81f191bdb6b</a>  |\n| cbrl      | Crypto BRL                           | 6          | <a href=\"https://etherscan.io/token/0xa6fa6531acdf1f9f96eddd66a0f9481e35c2e42a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa6fa6531acdf1f9f96eddd66a0f9481e35c2e42a</a>  |\n| cct       | Cyber Credit Token                   | 0          | <a href=\"https://etherscan.io/token/0x8469e5158fb3c043cf88ce769c94e4b9fc8d79b5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8469e5158fb3c043cf88ce769c94e4b9fc8d79b5</a>  |\n| cdag      | CannDollar                           | 18         | <a href=\"https://etherscan.io/token/0xf43401ea8ac4b86155b929e1a5a5e46626c23842\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf43401ea8ac4b86155b929e1a5a5e46626c23842</a>  |\n| cdai      | Compound DAI                         | 8          | <a href=\"https://etherscan.io/token/0xf5dce57282a584d2746faf1593d3121fcac444dc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf5dce57282a584d2746faf1593d3121fcac444dc</a>  |\n| cdt       | Blox                                 | 18         | <a href=\"https://etherscan.io/token/0x177d39ac676ed1c67a2b268ad7f1e58826e5b0af\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x177d39ac676ed1c67a2b268ad7f1e58826e5b0af</a>  |\n| cel       | Celsius                              | 4          | <a href=\"https://etherscan.io/token/0xaaaebe6fe48e54f431b0c390cfaf0b017d09d42d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xaaaebe6fe48e54f431b0c390cfaf0b017d09d42d</a>  |\n| celr      | Celer Network                        | 18         | <a href=\"https://etherscan.io/token/0x4f9254c83eb525f9fcf346490bbb3ed28a81c667\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4f9254c83eb525f9fcf346490bbb3ed28a81c667</a>  |\n| ceth      | Compound Ether                       | 8          | <a href=\"https://etherscan.io/token/0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5</a>  |\n| chfx      | eToro Swiss Frank                    | 18         | <a href=\"https://etherscan.io/token/0xe435502c85a4e7e79cfab4167af566c27a7a0784\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe435502c85a4e7e79cfab4167af566c27a7a0784</a>  |\n| chsb      | SwissBorg                            | 8          | <a href=\"https://etherscan.io/token/0xba9d4199fab4f26efe3551d490e3821486f135ba\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xba9d4199fab4f26efe3551d490e3821486f135ba</a>  |\n| chz       | Chiliz                               | 18         | <a href=\"https://etherscan.io/token/0x3506424f91fd33084466f402d5d97f05f8e3b4af\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x3506424f91fd33084466f402d5d97f05f8e3b4af</a>  |\n| cix100    | Cryptoindex 100                      | 18         | <a href=\"https://etherscan.io/token/0x6393e822874728f8afa7e1c9944e417d37ca5878\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6393e822874728f8afa7e1c9944e417d37ca5878</a>  |\n| cliq      | DefiCliq                             | 18         | <a href=\"https://etherscan.io/token/0x0def8d8adde14c9ef7c2a986df3ea4bd65826767\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0def8d8adde14c9ef7c2a986df3ea4bd65826767</a>  |\n| cln       | Colu Local Network                   | 18         | <a href=\"https://etherscan.io/token/0x4162178b78d6985480a308b2190ee5517460406d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4162178b78d6985480a308b2190ee5517460406d</a>  |\n| clt       | CoinLoan Token                       | 8          | <a href=\"https://etherscan.io/token/0x2001f2a0cf801ecfda622f6c28fb6e10d803d969\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2001f2a0cf801ecfda622f6c28fb6e10d803d969</a>  |\n| clv       | Clover Token                         | 18         | <a href=\"https://etherscan.io/token/0x80c62fe4487e1351b47ba49809ebd60ed085bf52\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x80c62fe4487e1351b47ba49809ebd60ed085bf52</a>  |\n| cng       | Changer                              | 18         | <a href=\"https://etherscan.io/token/0x5c1d9aa868a30795f92fae903edc9eff269044bf\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x5c1d9aa868a30795f92fae903edc9eff269044bf</a>  |\n| cnyx      | eToro Chinese Yuan                   | 18         | <a href=\"https://etherscan.io/token/0x319ad3ff82bedddb3bc85fd7943002d25cdb3cb9\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x319ad3ff82bedddb3bc85fd7943002d25cdb3cb9</a>  |\n| comp      | Compound Token                       | 18         | <a href=\"https://etherscan.io/token/0xc00e94cb662c3520282e6f5717214004a7f26888\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc00e94cb662c3520282e6f5717214004a7f26888</a>  |\n| cover     | Cover                                | 18         | <a href=\"https://etherscan.io/token/0x5d8d9f5b96f4438195be9b99eee6118ed4304286\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x5d8d9f5b96f4438195be9b99eee6118ed4304286</a>  |\n| cpay      | Cryptopay                            | 0          | <a href=\"https://etherscan.io/token/0x0ebb614204e47c09b6c3feb9aaecad8ee060e23e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0ebb614204e47c09b6c3feb9aaecad8ee060e23e</a>  |\n| cplt      | Coineru Platinum                     | 8          | <a href=\"https://etherscan.io/token/0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa3f7871a4b86bcc3b6e97c8fd0745e71c55e1f82</a>  |\n| cqt       | Covalent                             | 18         | <a href=\"https://etherscan.io/token/0xd417144312dbf50465b1c641d016962017ef6240\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd417144312dbf50465b1c641d016962017ef6240</a>  |\n| cqx       | Coinquista Coin                      | 18         | <a href=\"https://etherscan.io/token/0x618c29dd2d16475b2ae6244f9e8aaead68f0ca44\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x618c29dd2d16475b2ae6244f9e8aaead68f0ca44</a>  |\n| cra       | Crabada                              | 18         | <a href=\"https://etherscan.io/token/0xa32608e873f9ddef944b24798db69d80bbb4d1ed\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa32608e873f9ddef944b24798db69d80bbb4d1ed</a>  |\n| crdt      | Crypto Daily Token                   | 18         | <a href=\"https://etherscan.io/token/0xdaab5e695bb0e8ce8384ee56ba38fa8290618e52\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdaab5e695bb0e8ce8384ee56ba38fa8290618e52</a>  |\n| cre       | CarryToken                           | 18         | <a href=\"https://etherscan.io/token/0x115ec79f1de567ec68b7ae7eda501b406626478e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x115ec79f1de567ec68b7ae7eda501b406626478e</a>  |\n| cream     | Cream                                | 18         | <a href=\"https://etherscan.io/token/0x2ba592f78db6436527729929aaf6c908497cb200\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2ba592f78db6436527729929aaf6c908497cb200</a>  |\n| crep      | Compound Augur                       | 8          | <a href=\"https://etherscan.io/token/0x158079ee67fce2f58472a96584a73c7ab9ac95c1\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x158079ee67fce2f58472a96584a73c7ab9ac95c1</a>  |\n| cro       | Crypto.com Chain                     | 8          | <a href=\"https://etherscan.io/token/0xa0b73e1ff0b80914ab6fe0444e65848c4c34450b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa0b73e1ff0b80914ab6fe0444e65848c4c34450b</a>  |\n| crpt      | Crypterium                           | 18         | <a href=\"https://etherscan.io/token/0x80a7e048f37a50500351c204cb407766fa3bae7f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x80a7e048f37a50500351c204cb407766fa3bae7f</a>  |\n| crpt1     | CRPT Token                           | 18         | <a href=\"https://etherscan.io/token/0x08389495d7456e1951ddf7c3a1314a4bfb646d8b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x08389495d7456e1951ddf7c3a1314a4bfb646d8b</a>  |\n| crv       | Curve DAO Token                      | 18         | <a href=\"https://etherscan.io/token/0xd533a949740bb3306d119cc777fa900ba034cd52\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd533a949740bb3306d119cc777fa900ba034cd52</a>  |\n| cslv      | Coineru Silver                       | 8          | <a href=\"https://etherscan.io/token/0x6dc05497f0b087c7692816e6acaa8bdda73907fc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6dc05497f0b087c7692816e6acaa8bdda73907fc</a>  |\n| csp       | Caspian Token                        | 18         | <a href=\"https://etherscan.io/token/0xa6446d655a0c34bc4f05042ee88170d056cbaf45\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa6446d655a0c34bc4f05042ee88170d056cbaf45</a>  |\n| ctsi      | Cartesi                              | 18         | <a href=\"https://etherscan.io/token/0x491604c0fdf08347dd1fa4ee062a822a5dd06b5d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x491604c0fdf08347dd1fa4ee062a822a5dd06b5d</a>  |\n| cusdc     | Compound USDC                        | 8          | <a href=\"https://etherscan.io/token/0x39aa39c021dfbae8fac545936693ac917d5e7563\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x39aa39c021dfbae8fac545936693ac917d5e7563</a>  |\n| cvc       | Civic                                | 8          | <a href=\"https://etherscan.io/token/0x41e5560054824ea6b0732e656e3ad64e20e94e45\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x41e5560054824ea6b0732e656e3ad64e20e94e45</a>  |\n| cvx       | Convex Finance                       | 18         | <a href=\"https://etherscan.io/token/0x4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b</a>  |\n| cwbtc     | Compound WBTC                        | 8          | <a href=\"https://etherscan.io/token/0xc11b1268c1a384e55c48c2391d8d480264a3a7f4\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc11b1268c1a384e55c48c2391d8d480264a3a7f4</a>  |\n| czrx      | Compound ZRX                         | 8          | <a href=\"https://etherscan.io/token/0xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407</a>  |\n| coti      | Coti                                 | 18         | <a href=\"https://etherscan.io/token/0xddb3422497e61e13543bea06989c0789117555c5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xddb3422497e61e13543bea06989c0789117555c5</a>  |\n| dacxi     | Dacxi Coin                           | 18         | <a href=\"https://etherscan.io/token/0xefab7248d36585e2340e5d25f8a8d243e6e3193f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xefab7248d36585e2340e5d25f8a8d243e6e3193f</a>  |\n| dai       | Dai                                  | 18         | <a href=\"https://etherscan.io/token/0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359</a>  |\n| dao       | DAO Maker                            | 18         | <a href=\"https://etherscan.io/token/0x0f51bb10119727a7e5ea3538074fb341f56b09ad\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0f51bb10119727a7e5ea3538074fb341f56b09ad</a>  |\n| data      | Streamr DATAcoin                     | 18         | <a href=\"https://etherscan.io/token/0x0cf0ee63788a0849fe5297f3407f701e122cc023\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0cf0ee63788a0849fe5297f3407f701e122cc023</a>  |\n| datav2    | Streamr Data                         | 18         | <a href=\"https://etherscan.io/token/0x8f693ca8d21b157107184d29d398a8d082b38b76\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8f693ca8d21b157107184d29d398a8d082b38b76</a> |\n| dataecon  | Data Economy Index                   | 18         | <a href=\"https://etherscan.io/token/0x33d63ba1e57e54779f7ddaeaa7109349344cf5f1\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x33d63ba1e57e54779f7ddaeaa7109349344cf5f1</a>  |\n| dec       | Dark Energy Crystals                 | 3          | <a href=\"https://etherscan.io/token/0x9393fdc77090f31c7db989390d43f454b1a6e7f3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9393fdc77090f31c7db989390d43f454b1a6e7f3</a>  |\n| dent      | Dent                                 | 8          | <a href=\"https://etherscan.io/token/0x3597bfd533a99c9aa083587b074434e61eb0a258\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x3597bfd533a99c9aa083587b074434e61eb0a258</a>  |\n| dep       | Deap Coin                            | 18         | <a href=\"https://etherscan.io/token/0x1a3496c18d558bd9c6c8f609e1b129f67ab08163\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1a3496c18d558bd9c6c8f609e1b129f67ab08163</a>  |\n| dexa      | Dexa Coin                            | 18         | <a href=\"https://etherscan.io/token/0x725440512cb7b78bf56b334e50e31707418231cb\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x725440512cb7b78bf56b334e50e31707418231cb</a>  |\n| dfd       | DeFiDollar DAO                       | 18         | <a href=\"https://etherscan.io/token/0x20c36f062a31865bed8a5b1e512d9a1a20aa333a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x20c36f062a31865bed8a5b1e512d9a1a20aa333a</a>  |\n| dfi       | DeFiChain                            | 8          | <a href=\"https://etherscan.io/token/0x8fc8f8269ebca376d046ce292dc7eac40c8d358a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8fc8f8269ebca376d046ce292dc7eac40c8d358a</a>  |\n| dgcl      | Dgcl                                 | 18         | <a href=\"https://etherscan.io/token/0x63b8b7d4a3efd0735c4bffbd95b332a55e4eb851\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x63b8b7d4a3efd0735c4bffbd95b332a55e4eb851</a>  |\n| dgd       | Digix DAO                            | 9          | <a href=\"https://etherscan.io/token/0xe0b7927c4af23765cb51314a0e0521a9645f0e2a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe0b7927c4af23765cb51314a0e0521a9645f0e2a</a>  |\n| dgx       | Digix                                | 9          | <a href=\"https://etherscan.io/token/0x4f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf</a>  |\n| digg      | Digg                                 | 9          | <a href=\"https://etherscan.io/token/0x798d1be841a82a273720ce31c822c61a67a601c3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x798d1be841a82a273720ce31c822c61a67a601c3</a>  |\n| dmt       | DMarket                              | 8          | <a href=\"https://etherscan.io/token/0x2ccbff3a042c68716ed2a2cb0c544a9f1d1935e1\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2ccbff3a042c68716ed2a2cb0c544a9f1d1935e1</a>  |\n| dodo      | DODO                                 | 18         | <a href=\"https://etherscan.io/token/0x43dfc4159d86f3a37a5a4b3d4580b888ad7d4ddd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x43dfc4159d86f3a37a5a4b3d4580b888ad7d4ddd</a>  |\n| dpi       | DeFi Pulse Index                     | 18         | <a href=\"https://etherscan.io/token/0x1494ca1f11d487c2bbe4543e90080aeba4ba3c2b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1494ca1f11d487c2bbe4543e90080aeba4ba3c2b</a>  |\n| drpu      | DRP Utility                          | 8          | <a href=\"https://etherscan.io/token/0xe30e02f049957e2a5907589e06ba646fb2c321ba\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe30e02f049957e2a5907589e06ba646fb2c321ba</a>  |\n| drv       | Drive                                | 18         | <a href=\"https://etherscan.io/token/0x0b9d89a71bdabd231d4d497b7b7b879740d739c4\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0b9d89a71bdabd231d4d497b7b7b879740d739c4</a>  |\n| duc       | DUING COIN                           | 18         | <a href=\"https://etherscan.io/token/0xd3d84d494b24661bb4a477169bb24bc905fb55dd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd3d84d494b24661bb4a477169bb24bc905fb55dd</a>  |\n| dx1u      | Dx1u                                 | 8          | <a href=\"https://etherscan.io/token/0x2d8b3bb04864754b1540e3c4758ab00764d00751\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2d8b3bb04864754b1540e3c4758ab00764d00751</a>  |\n| dxgt      | Dacxi Gold Token                     | 18         | <a href=\"https://etherscan.io/token/0x51be9f12dd5095c5b1acf90e7e0aa4aa8023218b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x51be9f12dd5095c5b1acf90e7e0aa4aa8023218b</a>  |\n| dxpt      | Dacxi Platinum Token                 | 18         | <a href=\"https://etherscan.io/token/0x155ab266b9226525cfd5b1e7d8a80bab65b6b609\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x155ab266b9226525cfd5b1e7d8a80bab65b6b609</a>  |\n| dxst      | Dacxi Silver Token                   | 18         | <a href=\"https://etherscan.io/token/0xd71bbf61079d3ea7ea7890356850d4579be304af\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd71bbf61079d3ea7ea7890356850d4579be304af</a>  |\n| dydx      | dYdX                                 | 18         | <a href=\"https://etherscan.io/token/0x92d6c1e31e14520e676a687f0a93788b716beff5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x92d6c1e31e14520e676a687f0a93788b716beff5</a>  |\n| dyn       | DYN                                  | 18         | <a href=\"https://etherscan.io/token/0x65167e381388bc803aa2f22cd99d093068e98007\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x65167e381388bc803aa2f22cd99d093068e98007</a>  |\n| easy      | Easy                                 | 18         | <a href=\"https://etherscan.io/token/0x913d8adf7ce6986a8cbfee5a54725d9eea4f0729\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x913d8adf7ce6986a8cbfee5a54725d9eea4f0729</a>  |\n| ebtcq     | EmberBTCQuant                        | 18         | <a href=\"https://etherscan.io/token/0x430a35baa51ddeaccf89092a5edbda47aaae78e4\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x430a35baa51ddeaccf89092a5edbda47aaae78e4</a>  |\n| echt      | eChat                                | 0          | <a href=\"https://etherscan.io/token/0x1aadead0d2e0b6d888ae1d73b11db65a8447634a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1aadead0d2e0b6d888ae1d73b11db65a8447634a</a>  |\n| edison    | Edison                               | 8          | <a href=\"https://etherscan.io/token/0xed58569d516a5bd37427ebd592a6619c0c581953\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xed58569d516a5bd37427ebd592a6619c0c581953</a>  |\n| edn       | Eden                                 | 18         | <a href=\"https://etherscan.io/token/0x05860d453c7974cbf46508c06cba14e211c629ce\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x05860d453c7974cbf46508c06cba14e211c629ce</a>  |\n| edr       | Endor Protocol                       | 18         | <a href=\"https://etherscan.io/token/0xc528c28fec0a90c083328bc45f587ee215760a0f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc528c28fec0a90c083328bc45f587ee215760a0f</a>  |\n| efi       | Efinity                              | 18         | <a href=\"https://etherscan.io/token/0x656c00e1bcd96f256f224ad9112ff426ef053733\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x656c00e1bcd96f256f224ad9112ff426ef053733</a>  |\n| egl       | Ethereum Eagle                       | 18         | <a href=\"https://etherscan.io/token/0x1e83916ea2ef2d7a6064775662e163b2d4c330a7\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1e83916ea2ef2d7a6064775662e163b2d4c330a7</a>  |\n| egld      | Elrond Gold                          | 18         | <a href=\"https://etherscan.io/token/0xe3fb646fc31ca12657b17070bc31a52e323b8543\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe3fb646fc31ca12657b17070bc31a52e323b8543</a>  |\n| egold     | eGold                                | 4          | <a href=\"https://etherscan.io/token/0x8f00458479ea850f584ed82881421f9d9eac6cb1\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8f00458479ea850f584ed82881421f9d9eac6cb1</a>  |\n| elf       | Aelf                                 | 18         | <a href=\"https://etherscan.io/token/0xbf2179859fc6d5bee9bf9158632dc51678a4100e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xbf2179859fc6d5bee9bf9158632dc51678a4100e</a>  |\n| erd       | Elrond                               | 18         | <a href=\"https://etherscan.io/token/0xf9986d445ced31882377b5d6a5f58eaea72288c3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf9986d445ced31882377b5d6a5f58eaea72288c3</a>  |\n| emx       | EMX                                  | 18         | <a href=\"https://etherscan.io/token/0x75a29c405bd5ab2f3b35144af937ee98d390b5ee\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x75a29c405bd5ab2f3b35144af937ee98d390b5ee</a>  |\n| eng       | Enigma                               | 8          | <a href=\"https://etherscan.io/token/0xf0ee6b27b759c9893ce4f094b49ad28fd15a23e4\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf0ee6b27b759c9893ce4f094b49ad28fd15a23e4</a>  |\n| enj       | Enjin Coin                           | 18         | <a href=\"https://etherscan.io/token/0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c</a>  |\n| ens       | Ethereum Name Service                | 18         | <a href=\"https://etherscan.io/token/0xc18360217d8f7ab5e7c516566761ea12ce7f9d72\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc18360217d8f7ab5e7c516566761ea12ce7f9d72</a>  |\n| eqo       | EQUOS Origin                         | 18         | <a href=\"https://etherscan.io/token/0x46e9fe43470fafd690100c86037f9e566e24d480\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x46e9fe43470fafd690100c86037f9e566e24d480</a>  |\n| eta       | ETA Token                            | 18         | <a href=\"https://etherscan.io/token/0x1065bd32fc7a6683c97c2c6638ad4022d9c61c05\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1065bd32fc7a6683c97c2c6638ad4022d9c61c05</a>  |\n| ethos     | Ethos                                | 8          | <a href=\"https://etherscan.io/token/0x5af2be193a6abca9c8817001f45744777db30756\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x5af2be193a6abca9c8817001f45744777db30756</a>  |\n| etv       | Ecotech Visions                      | 18         | <a href=\"https://etherscan.io/token/0x695f5d0692655ebf710c0003ca499323488334c6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x695f5d0692655ebf710c0003ca499323488334c6</a>  |\n| eurs      | Stasis EURS                          | 2          | <a href=\"https://etherscan.io/token/0xdb25f211ab05b1c97d595516f45794528a807ad8\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdb25f211ab05b1c97d595516f45794528a807ad8</a>  |\n| eurst     | Euro Stable Token                    | 18         | <a href=\"https://etherscan.io/token/0xb1abd7aba7d99bbefb33d1dfc66b0dd522335350\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb1abd7aba7d99bbefb33d1dfc66b0dd522335350</a>  |\n| euroc     | Euro Coin                            | 6          | <a href=\"https://etherscan.io/token/0x1abaea1f7c830bd89acc67ec4af516284b1bc33c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1abaea1f7c830bd89acc67ec4af516284b1bc33c</a>  |\n| eurt      | Tether EUR                           | 6          | <a href=\"https://etherscan.io/token/0xc581b735a1688071a1746c968e0798d642ede491\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc581b735a1688071a1746c968e0798d642ede491</a>  |\n| eurx      | eToro Euro                           | 18         | <a href=\"https://etherscan.io/token/0x05ac103f68e05da35e78f6165b9082432fe64b58\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x05ac103f68e05da35e78f6165b9082432fe64b58</a>  |\n| eux       | EUR Stable Token                     | 18         | <a href=\"https://etherscan.io/token/0x1b9064207e8046ec1d8e83de79380ed31283914f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1b9064207e8046ec1d8e83de79380ed31283914f</a>  |\n| evx       | Everex                               | 4          | <a href=\"https://etherscan.io/token/0xf3db5fa2c66b7af3eb0c0b782510816cbe4813b8\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf3db5fa2c66b7af3eb0c0b782510816cbe4813b8</a>  |\n| exe       | EXE Token                            | 8          | <a href=\"https://etherscan.io/token/0x0d9a653f681168f410d14d19b7743c041eafc58a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0d9a653f681168f410d14d19b7743c041eafc58a</a>  |\n| fdt       | Fiat DAO                             | 18         | <a href=\"https://etherscan.io/token/0xed1480d12be41d92f36f5f7bdd88212e381a3677\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xed1480d12be41d92f36f5f7bdd88212e381a3677</a> |\n| fei       | Fei Protocol                         | 18         | <a href=\"https://etherscan.io/token/0x956f47f50a910163d8bf957cf5846d573e7f87ca\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x956f47f50a910163d8bf957cf5846d573e7f87ca</a>  |\n| fet       | Fetch                                | 18         | <a href=\"https://etherscan.io/token/0x1d287cc25dad7ccaf76a26bc660c5f7c8e2a05bd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1d287cc25dad7ccaf76a26bc660c5f7c8e2a05bd</a>  |\n| fet1      | Fet1                                 | 18         | <a href=\"https://etherscan.io/token/0xaea46a60368a7bd060eec7df8cba43b7ef41ad85\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xaea46a60368a7bd060eec7df8cba43b7ef41ad85</a>  |\n| ff1       | Two Prime FF1                        | 18         | <a href=\"https://etherscan.io/token/0x59af0356cdebd1fa23ae5dadff9170bbfc31278c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x59af0356cdebd1fa23ae5dadff9170bbfc31278c</a>  |\n| fft       | Fight to Fame Token                  | 18         | <a href=\"https://etherscan.io/token/0xdea05e09f5b0e102616bb145a0e4772a9b5ab193\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdea05e09f5b0e102616bb145a0e4772a9b5ab193</a>  |\n| fire      | Ceramic Token                        | 18         | <a href=\"https://etherscan.io/token/0x2033e559cddff6dd36ec204e3014faa75a01052e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2033e559cddff6dd36ec204e3014faa75a01052e</a>  |\n| front     | Frontier                             | 18         | <a href=\"https://etherscan.io/token/0xf8c3527cc04340b208c854e985240c02f7b7793f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf8c3527cc04340b208c854e985240c02f7b7793f</a>  |\n| fmf       | Formosa Financial                    | 18         | <a href=\"https://etherscan.io/token/0xb4d0fdfc8497aef97d3c2892ae682ee06064a2bc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb4d0fdfc8497aef97d3c2892ae682ee06064a2bc</a>  |\n| ftm       | Fantom Token                         | 18         | <a href=\"https://etherscan.io/token/0x4e15361fd6b4bb609fa63c81a2be19d873717870\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4e15361fd6b4bb609fa63c81a2be19d873717870</a>  |\n| ftt       | FTX Token                            | 18         | <a href=\"https://etherscan.io/token/0x50d1c9771902476076ecfc8b2a83ad6b9355a4c9\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x50d1c9771902476076ecfc8b2a83ad6b9355a4c9</a>  |\n| fun       | FunFair                              | 8          | <a href=\"https://etherscan.io/token/0x419d0d8bdd9af5e606ae2232ed285aff190e711b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x419d0d8bdd9af5e606ae2232ed285aff190e711b</a>  |\n| fwb       | Friends With Benefits Pro            | 18         | <a href=\"https://etherscan.io/token/0x35bd01fc9d6d5d81ca9e055db88dc49aa2c699a8\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x35bd01fc9d6d5d81ca9e055db88dc49aa2c699a8</a>  |\n| fxrt      | FXRT                                 | 3          | <a href=\"https://etherscan.io/token/0x506742a24c54b77c5af4065b2626ab96c641f90e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x506742a24c54b77c5af4065b2626ab96c641f90e</a>  |\n| fxs       | Frax Share                           | 18         | <a href=\"https://etherscan.io/token/0x3432b6a60d23ca0dfca7761b7ab56459d9c964d0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x3432b6a60d23ca0dfca7761b7ab56459d9c964d0</a>  |\n| gal       | Project Galaxy                       | 18         | <a href=\"https://etherscan.io/token/0x5faa989af96af85384b8a938c2ede4a7378d9875\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x5faa989af96af85384b8a938c2ede4a7378d9875</a>  |\n| gala      | gala                                 | 8          | <a href=\"https://etherscan.io/token/0x15d4c048f83bd7e37d49ea4c83a07267ec4203da\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x15d4c048f83bd7e37d49ea4c83a07267ec4203da</a>  |\n| gamma     | Gamma                                | 18         | <a href=\"https://etherscan.io/token/0x6bea7cfef803d1e3d5f7c0103f7ded065644e197\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6bea7cfef803d1e3d5f7c0103f7ded065644e197</a>  |\n| gbpx      | eToro Pound Sterling                 | 18         | <a href=\"https://etherscan.io/token/0xf85ef57fcdb36d628d063fa663e61e44d35ae661\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf85ef57fcdb36d628d063fa663e61e44d35ae661</a>  |\n| gdt       | GDT                                  | 8          | <a href=\"https://etherscan.io/token/0xc67b12049c2d0cf6e476bc64c7f82fc6c63cffc5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc67b12049c2d0cf6e476bc64c7f82fc6c63cffc5</a>  |\n| gec       | GECoin                               | 18         | <a href=\"https://etherscan.io/token/0xe304283c3e60cefaf7ea514007cf4e8fdc3d869d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe304283c3e60cefaf7ea514007cf4e8fdc3d869d</a>  |\n| gen       | DAOstack                             | 18         | <a href=\"https://etherscan.io/token/0x543ff227f64aa17ea132bf9886cab5db55dcaddf\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x543ff227f64aa17ea132bf9886cab5db55dcaddf</a>  |\n| gohm      | Governance OHM                       | 9          | <a href=\"https://etherscan.io/token/0x0ab87046fbb341d058f17cbc4c1133f25a20a52f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0ab87046fbb341d058f17cbc4c1133f25a20a52f</a>  |\n| ghub      | Genohub                              | 8          | <a href=\"https://etherscan.io/token/0xeb40045347531f06179ffb3c6be33d5b35a52ebd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xeb40045347531f06179ffb3c6be33d5b35a52ebd</a>  |\n| gigdrop   | GIG-POOL-DROP                        | 18         | <a href=\"https://etherscan.io/token/0xa08399989e77b8ce8dd68374cc7b4345304b3161\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa08399989e77b8ce8dd68374cc7b4345304b3161</a>  |\n| gldx      | eToro Gold                           | 18         | <a href=\"https://etherscan.io/token/0x7d2bebd6e41b05384f0a8eb8ff228daac6f39c96\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7d2bebd6e41b05384f0a8eb8ff228daac6f39c96</a>  |\n| glm       | Golem                                | 18         | <a href=\"https://etherscan.io/token/0x7dd9c5cba05e151c895fde1cf355c9a1d5da6429\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7dd9c5cba05e151c895fde1cf355c9a1d5da6429</a>  |\n| gno       | Gnosis                               | 18         | <a href=\"https://etherscan.io/token/0x6810e776880c02933d47db1b9fc05908e5386b96\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6810e776880c02933d47db1b9fc05908e5386b96</a>  |\n| gnt       | Golem                                | 18         | <a href=\"https://etherscan.io/token/0xa74476443119a942de498590fe1f2454d7d4ac0d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa74476443119a942de498590fe1f2454d7d4ac0d</a>  |\n| gods      | Gods Unchained                       | 18         | <a href=\"https://etherscan.io/token/0xccc8cb5229b0ac8069c51fd58367fd1e622afd97\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xccc8cb5229b0ac8069c51fd58367fd1e622afd97</a>  |\n| gog       | Guild of Guardians                   | 18         | <a href=\"https://etherscan.io/token/0x9AB7bb7FdC60f4357ECFef43986818A2A3569c62\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9AB7bb7FdC60f4357ECFef43986818A2A3569c62</a>  |\n| gold      | XBullion Token                       | 8          | <a href=\"https://etherscan.io/token/0x0e573fdd3c5acf3a74f1775b0f9823a1a0e2b86b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0e573fdd3c5acf3a74f1775b0f9823a1a0e2b86b</a>  |\n| got       | GOExchange                           | 18         | <a href=\"https://etherscan.io/token/0xf11f2550769dac4226731b7732dd4e17e72b1b01\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf11f2550769dac4226731b7732dd4e17e72b1b01</a>  |\n| grt       | The Graph                            | 18         | <a href=\"https://etherscan.io/token/0xc944e90c64b2c07662a292be6244bdf05cda44a7\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc944e90c64b2c07662a292be6244bdf05cda44a7</a>  |\n| gtc       | Gitcoin                              | 18         | <a href=\"https://etherscan.io/token/0xde30da39c46104798bb5aa3fe8b9e0e1f348163f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xde30da39c46104798bb5aa3fe8b9e0e1f348163f</a>  |\n| gto       | Gifto                                | 5          | <a href=\"https://etherscan.io/token/0xc5bbae50781be1669306b9e001eff57a2957b09d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc5bbae50781be1669306b9e001eff57a2957b09d</a>  |\n| gusd      | Gemini Dollar                        | 2          | <a href=\"https://etherscan.io/token/0x056fd409e1d7a124bd7017459dfea2f387b6d5cd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x056fd409e1d7a124bd7017459dfea2f387b6d5cd</a>  |\n| gxc       | Game X Coin                          | 18         | <a href=\"https://etherscan.io/token/0x953e22945b416730bad05009af05b420e598e412\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x953e22945b416730bad05009af05b420e598e412</a>  |\n| gyen      | Gmo JPY                              | 6          | <a href=\"https://etherscan.io/token/0xc08512927d12348f6620a698105e1baac6ecd911\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc08512927d12348f6620a698105e1baac6ecd911</a>  |\n| hcn       | Himalaya Coin                        | 18         | <a href=\"https://etherscan.io/token/0xb01b22dcd2f4b199a27ec28d8a688dd26f162067\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb01b22dcd2f4b199a27ec28d8a688dd26f162067</a>  |\n| hdo       | Himalaya Dollar                      | 18         | <a href=\"https://etherscan.io/token/0x7c197afcd8d36884309ed731424985e3ed17f018\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7c197afcd8d36884309ed731424985e3ed17f018</a>  |\n| hedg      | HedgeTrade                           | 18         | <a href=\"https://etherscan.io/token/0xf1290473e210b2108a85237fbcd7b6eb42cc654f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf1290473e210b2108a85237fbcd7b6eb42cc654f</a>  |\n| hkdx      | eToro Hong Kong Dollar               | 18         | <a href=\"https://etherscan.io/token/0x1af20b8d1ede928f437b3a86801796b167840d2b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1af20b8d1ede928f437b3a86801796b167840d2b</a>  |\n| hlc       | HalalChain                           | 9          | <a href=\"https://etherscan.io/token/0x58c69ed6cd6887c0225d1fccecc055127843c69b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x58c69ed6cd6887c0225d1fccecc055127843c69b</a>  |\n| hmt       | HUMAN Token                          | 18         | <a href=\"https://etherscan.io/token/0xd1ba9bac957322d6e8c07a160a3a8da11a0d2867\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd1ba9bac957322d6e8c07a160a3a8da11a0d2867</a>  |\n| hold      | Hold                                 | 18         | <a href=\"https://etherscan.io/token/0xd6e1401a079922469e9b965cb090ea6ff64c6839\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd6e1401a079922469e9b965cb090ea6ff64c6839</a>  |\n| hot       | Holo                                 | 18         | <a href=\"https://etherscan.io/token/0x6c6ee5e31d828de241282b9606c8e98ea48526e2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6c6ee5e31d828de241282b9606c8e98ea48526e2</a>  |\n| hqt       | HyperQuant                           | 18         | <a href=\"https://etherscan.io/token/0x3e1d5a855ad9d948373ae68e4fe1f094612b1322\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x3e1d5a855ad9d948373ae68e4fe1f094612b1322</a>  |\n| hst       | Decision Token                       | 18         | <a href=\"https://etherscan.io/token/0x554c20b7c486beee439277b4540a434566dc4c02\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x554c20b7c486beee439277b4540a434566dc4c02</a>  |\n| ht        | Huobi Token                          | 18         | <a href=\"https://etherscan.io/token/0x6f259637dcd74c767781e37bc6133cd6a68aa161\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6f259637dcd74c767781e37bc6133cd6a68aa161</a>  |\n| hum       | HumanScape                           | 18         | <a href=\"https://etherscan.io/token/0x174afe7a032b5a33a3270a9f6c30746e25708532\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x174afe7a032b5a33a3270a9f6c30746e25708532</a>  |\n| husd      | HUSD                                 | 18         | <a href=\"https://etherscan.io/token/0xdf574c24545e5ffecb9a659c229253d4111d87e1\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdf574c24545e5ffecb9a659c229253d4111d87e1</a>  |\n| hxro      | Hxro                                 | 18         | <a href=\"https://etherscan.io/token/0x4bd70556ae3f8a6ec6c4080a0c327b24325438f3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4bd70556ae3f8a6ec6c4080a0c327b24325438f3</a>  |\n| hyb       | Hybrid Block                         | 18         | <a href=\"https://etherscan.io/token/0x6059f55751603ead7dc6d280ad83a7b33d837c90\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6059f55751603ead7dc6d280ad83a7b33d837c90</a>  |\n| hydro     | Hydro                                | 18         | <a href=\"https://etherscan.io/token/0xebbdf302c940c6bfd49c6b165f457fdb324649bc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xebbdf302c940c6bfd49c6b165f457fdb324649bc</a>  |\n| i8        | i8 Exchange Token                    | 18         | <a href=\"https://etherscan.io/token/0xb61bb66bf9caba531e6bb2fb75dec389a1664dfd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb61bb66bf9caba531e6bb2fb75dec389a1664dfd</a>  |\n| iceth     | Interest Compounding ETH Index       | 18         | <a href=\"https://etherscan.io/token/0x7c07f7abe10ce8e33dc6c5ad68fe033085256a84\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7c07f7abe10ce8e33dc6c5ad68fe033085256a84</a>  |\n| idex      | IDEX                                 | 18         | <a href=\"https://etherscan.io/token/0xb705268213d593b8fd88d3fdeff93aff5cbdcfae\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb705268213d593b8fd88d3fdeff93aff5cbdcfae</a>  |\n| idrc      | Rupiah Coin                          | 18         | <a href=\"https://etherscan.io/token/0x569f2241551011d5710c40fc61e0b3906c780b2f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x569f2241551011d5710c40fc61e0b3906c780b2f</a>  |\n| idrt      | Rupiah Token                         | 2          | <a href=\"https://etherscan.io/token/0x998ffe1e43facffb941dc337dd0468d52ba5b48a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x998ffe1e43facffb941dc337dd0468d52ba5b48a</a>  |\n| imxv2     | Immutable X                          | 18         | <a href=\"https://etherscan.io/token/0xf57e7e7c23978c3caec3c3548e3d615c346e79ff\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf57e7e7c23978c3caec3c3548e3d615c346e79ff</a>  |\n| incx      | InternationalCryptoX                 | 18         | <a href=\"https://etherscan.io/token/0xa984a92731c088f1ea4d53b71a2565a399f7d8d5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa984a92731c088f1ea4d53b71a2565a399f7d8d5</a>  |\n| ind       | Indorse                              | 18         | <a href=\"https://etherscan.io/token/0xf8e386eda857484f5a12e4b5daa9984e06e73705\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf8e386eda857484f5a12e4b5daa9984e06e73705</a>  |\n| index     | Index Coop                           | 18         | <a href=\"https://etherscan.io/token/0x0954906da0bf32d5479e25f46056d22f08464cab\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0954906da0bf32d5479e25f46056d22f08464cab</a>  |\n| inf       | Infinitus Token                      | 18         | <a href=\"https://etherscan.io/token/0x00e150d741eda1d49d341189cae4c08a73a49c95\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x00e150d741eda1d49d341189cae4c08a73a49c95</a>  |\n| inj       | Inj                                  | 18         | <a href=\"https://etherscan.io/token/0x84bffffd702d924c6d9b25f87151bf0fb1a8913e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x84bffffd702d924c6d9b25f87151bf0fb1a8913e</a>  |\n| injv2     | Injv2                                | 18         | <a href=\"https://etherscan.io/token/0xe28b3b32b6c345a34ff64674606124dd5aceca30\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe28b3b32b6c345a34ff64674606124dd5aceca30</a>  |\n| inst      | Instadapp                            | 18         | <a href=\"https://etherscan.io/token/0x6f40d4a6237c257fff2db00fa0510deeecd303eb\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6f40d4a6237c257fff2db00fa0510deeecd303eb</a>  |\n| inx       | INX Token                            | 18         | <a href=\"https://etherscan.io/token/0xbbc7f7a6aadac103769c66cbc69ab720f7f9eae3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xbbc7f7a6aadac103769c66cbc69ab720f7f9eae3</a>  |\n| isf       | Susnova                              | 18         | <a href=\"https://etherscan.io/token/0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38</a>  |\n| isr       | Insureum                             | 18         | <a href=\"https://etherscan.io/token/0xd4a293ae8bb9e0be12e99eb19d48239e8c83a136\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd4a293ae8bb9e0be12e99eb19d48239e8c83a136</a>  |\n| ivo       | INVAO Token                          | 18         | <a href=\"https://etherscan.io/token/0xe03df9fda489a405f5db8a919adbc9a1b931a19f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe03df9fda489a405f5db8a919adbc9a1b931a19f</a>  |\n| ivy       | Ivy Koin                             | 18         | <a href=\"https://etherscan.io/token/0xa4ea687a2a7f29cf2dc66b39c68e4411c0d00c49\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa4ea687a2a7f29cf2dc66b39c68e4411c0d00c49</a>  |\n| jbc       | Japan Brand Coin                     | 18         | <a href=\"https://etherscan.io/token/0x3635e381c67252405c1c0e550973155832d5e490\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x3635e381c67252405c1c0e550973155832d5e490</a>  |\n| jfin      | JFIN Coin                            | 18         | <a href=\"https://etherscan.io/token/0x940bdcb99a0ee5fb008a606778ae87ed9789f257\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x940bdcb99a0ee5fb008a606778ae87ed9789f257</a>  |\n| jpyx      | eToro Japanese Yen                   | 18         | <a href=\"https://etherscan.io/token/0x743c79f88dcadc6e7cfd7fa2bd8e2bfc68dae053\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x743c79f88dcadc6e7cfd7fa2bd8e2bfc68dae053</a>  |\n| keep      | Keep                                 | 18         | <a href=\"https://etherscan.io/token/0x85eee30c52b0b379b046fb0f85f4f3dc3009afec\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x85eee30c52b0b379b046fb0f85f4f3dc3009afec</a>  |\n| key       | SelfKey                              | 18         | <a href=\"https://etherscan.io/token/0x4cc19356f2d37338b9802aa8e8fc58b0373296e7\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4cc19356f2d37338b9802aa8e8fc58b0373296e7</a>  |\n| kin       | Kin                                  | 18         | <a href=\"https://etherscan.io/token/0x818fc6c2ec5986bc6e2cbf00939d90556ab12ce5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x818fc6c2ec5986bc6e2cbf00939d90556ab12ce5</a>  |\n| kiro      | Kirobo                               | 18         | <a href=\"https://etherscan.io/token/0xb1191f691a355b43542bea9b8847bc73e7abb137\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb1191f691a355b43542bea9b8847bc73e7abb137</a>  |\n| knc       | Kyber Network                        | 18         | <a href=\"https://etherscan.io/token/0xdd974d5c2e2928dea5f71b9825b8b646686bd200\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdd974d5c2e2928dea5f71b9825b8b646686bd200</a>  |\n| knc2      | Kyber Network                        | 18         | <a href=\"https://etherscan.io/token/0xdefa4e8a7bcba345f687a2f1456f5edd9ce97202\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdefa4e8a7bcba345f687a2f1456f5edd9ce97202</a>  |\n| koin      | Koin                                 | 18         | <a href=\"https://etherscan.io/token/0x1fb62df2b6ef8966161e422dbb40860b70941e50\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1fb62df2b6ef8966161e422dbb40860b70941e50</a>  |\n| koz       | KOZJIN Token                         | 18         | <a href=\"https://etherscan.io/token/0xd95e7d16000cbeb66acbf70b4a843d4346ff4555\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd95e7d16000cbeb66acbf70b4a843d4346ff4555</a>  |\n| kp3r      | Kp3r                                 | 18         | <a href=\"https://etherscan.io/token/0x1ceb5cb57c4d4e2b2433641b95dd330a33185a44\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1ceb5cb57c4d4e2b2433641b95dd330a33185a44</a>  |\n| kze       | Almeela                              | 18         | <a href=\"https://etherscan.io/token/0x8de67d55c58540807601dbf1259537bc2dffc84d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8de67d55c58540807601dbf1259537bc2dffc84d</a>  |\n| layer     | Unilayer                             | 18         | <a href=\"https://etherscan.io/token/0x0ff6ffcfda92c53f615a4a75d982f399c989366b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0ff6ffcfda92c53f615a4a75d982f399c989366b</a>  |\n| lba       | Cred                                 | 18         | <a href=\"https://etherscan.io/token/0xfe5f141bf94fe84bc28ded0ab966c16b17490657\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xfe5f141bf94fe84bc28ded0ab966c16b17490657</a>  |\n| lend      | EthLend                              | 18         | <a href=\"https://etherscan.io/token/0x80fb784b7ed66730e8b1dbd9820afd29931aab03\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x80fb784b7ed66730e8b1dbd9820afd29931aab03</a>  |\n| leo       | Bitfinex LEO                         | 18         | <a href=\"https://etherscan.io/token/0x2af5d2ad76741191d15dfe7bf6ac92d4bd912ca3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2af5d2ad76741191d15dfe7bf6ac92d4bd912ca3</a>  |\n| lgo       | LGO Exchange                         | 8          | <a href=\"https://etherscan.io/token/0x0a50c93c762fdd6e56d86215c24aaad43ab629aa\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0a50c93c762fdd6e56d86215c24aaad43ab629aa</a>  |\n| link      | ChainLink                            | 18         | <a href=\"https://etherscan.io/token/0x514910771af9ca656af840dff83e8264ecf986ca\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x514910771af9ca656af840dff83e8264ecf986ca</a>  |\n| lion      | CoinLion                             | 18         | <a href=\"https://etherscan.io/token/0x2167fb82309cf76513e83b25123f8b0559d6b48f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2167fb82309cf76513e83b25123f8b0559d6b48f</a>  |\n| lnc       | Linker Coin                          | 18         | <a href=\"https://etherscan.io/token/0x6beb418fc6e1958204ac8baddcf109b8e9694966\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6beb418fc6e1958204ac8baddcf109b8e9694966</a>  |\n| loom      | Loom Network                         | 18         | <a href=\"https://etherscan.io/token/0xa4e8c3ec456107ea67d3075bf9e3df3a75823db0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa4e8c3ec456107ea67d3075bf9e3df3a75823db0</a>  |\n| loom1     | Loom Token                           | 18         | <a href=\"https://etherscan.io/token/0x42476f744292107e34519f9c357927074ea3f75d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x42476f744292107e34519f9c357927074ea3f75d</a>  |\n| looks     | LooksRare                            | 18         | <a href=\"https://etherscan.io/token/0xf4d2888d29d722226fafa5d9b24f9164c092421e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf4d2888d29d722226fafa5d9b24f9164c092421e</a>  |\n| lrc       | loopring                             | 18         | <a href=\"https://etherscan.io/token/0xef68e7c694f40c8202821edf525de3782458639f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xef68e7c694f40c8202821edf525de3782458639f</a>  |\n| lrcv2     | loopring V2                          | 18         | <a href=\"https://etherscan.io/token/0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xbbbbca6a901c926f240b89eacb641d8aec7aeafd</a>  |\n| lyn       | Lynchpin                             | 18         | <a href=\"https://etherscan.io/token/0xb0b1685f55843d03739c7d9b0a230f1b7dcf03d5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb0b1685f55843d03739c7d9b0a230f1b7dcf03d5</a>  |\n| mana      | Decentraland                         | 18         | <a href=\"https://etherscan.io/token/0x0f5d2fb29fb7d3cfee444a200298f468908cc942\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0f5d2fb29fb7d3cfee444a200298f468908cc942</a>  |\n| maps      | Maps                                 | 6          | <a href=\"https://etherscan.io/token/0x2b915b505c017abb1547aa5ab355fbe69865cc6d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2b915b505c017abb1547aa5ab355fbe69865cc6d</a>  |\n| matic     | Matic Token                          | 18         | <a href=\"https://etherscan.io/token/0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0</a>  |\n| mcdai     | Dai                                  | 18         | <a href=\"https://etherscan.io/token/0x6b175474e89094c44da98b954eedeac495271d0f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6b175474e89094c44da98b954eedeac495271d0f</a>  |\n| mco       | Crypto.com                           | 8          | <a href=\"https://etherscan.io/token/0xb63b606ac810a52cca15e44bb630fd42d8d1d83d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb63b606ac810a52cca15e44bb630fd42d8d1d83d</a>  |\n| mco2      | Moss Carbon Credit                   | 18         | <a href=\"https://etherscan.io/token/0xfc98e825a2264d890f9a1e68ed50e1526abccacd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xfc98e825a2264d890f9a1e68ed50e1526abccacd</a>  |\n| mcs       | MCS Token                            | 18         | <a href=\"https://etherscan.io/token/0x2fdf40c484b1bd6f1c214acac737fedc8b03e5a8\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2fdf40c484b1bd6f1c214acac737fedc8b03e5a8</a>  |\n| mcx       | MachiX Token                         | 18         | <a href=\"https://etherscan.io/token/0xd15ecdcf5ea68e3995b2d0527a0ae0a3258302f8\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd15ecdcf5ea68e3995b2d0527a0ae0a3258302f8</a>  |\n| mdfc      | MDFC                                 | 18         | <a href=\"https://etherscan.io/token/0x2810ff4092864f4b9259d05dd6da829d61bdcdab\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2810ff4092864f4b9259d05dd6da829d61bdcdab</a>  |\n| mdx       | Mandala                              | 18         | <a href=\"https://etherscan.io/token/0x9d03393d297e42c135625d450c814892505f1a84\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9d03393d297e42c135625d450c814892505f1a84</a>  |\n| medx      | Medibloc                             | 8          | <a href=\"https://etherscan.io/token/0xfd1e80508f243e64ce234ea88a5fd2827c71d4b7\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xfd1e80508f243e64ce234ea88a5fd2827c71d4b7</a>  |\n| meme      | Meme                                 | 8          | <a href=\"https://etherscan.io/token/0xd5525d397898e5502075ea5e830d8914f6f0affe\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd5525d397898e5502075ea5e830d8914f6f0affe</a>  |\n| met       | Metronome                            | 18         | <a href=\"https://etherscan.io/token/0xa3d58c4e56fedcae3a7c43a725aee9a71f0ece4e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa3d58c4e56fedcae3a7c43a725aee9a71f0ece4e</a>  |\n| meta      | Metadium                             | 18         | <a href=\"https://etherscan.io/token/0xde2f7766c8bf14ca67193128535e5c7454f8387c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xde2f7766c8bf14ca67193128535e5c7454f8387c</a>  |\n| mfg       | SyncFab                              | 18         | <a href=\"https://etherscan.io/token/0x6710c63432a2de02954fc0f851db07146a6c0312\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6710c63432a2de02954fc0f851db07146a6c0312</a>  |\n| mfph      | MFPH Token                           | 18         | <a href=\"https://etherscan.io/token/0xbc7e1056ecc72d14228a14a53815c5d3ad86c84e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xbc7e1056ecc72d14228a14a53815c5d3ad86c84e</a>  |\n| mft       | Mainframe                            | 18         | <a href=\"https://etherscan.io/token/0xdf2c7238198ad8b389666574f2d8bc411a4b7428\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdf2c7238198ad8b389666574f2d8bc411a4b7428</a>  |\n| milkv2    | Milkv2                               | 18         | <a href=\"https://etherscan.io/token/0x80c8c3dcfb854f9542567c8dac3f44d709ebc1de\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x80c8c3dcfb854f9542567c8dac3f44d709ebc1de</a>  |\n| mir       | Mirror Protocol                      | 18         | <a href=\"https://etherscan.io/token/0x09a3ecafa817268f77be1283176b946c4ff2e608\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x09a3ecafa817268f77be1283176b946c4ff2e608</a>  |\n| mith      | Mithril                              | 18         | <a href=\"https://etherscan.io/token/0x3893b9422cd5d70a81edeffe3d5a1c6a978310bb\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x3893b9422cd5d70a81edeffe3d5a1c6a978310bb</a>  |\n| mix       | MixMarvel Token                      | 18         | <a href=\"https://etherscan.io/token/0x5d285f735998f36631f678ff41fb56a10a4d0429\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x5d285f735998f36631f678ff41fb56a10a4d0429</a>  |\n| mizn      | Miznettk                             | 18         | <a href=\"https://etherscan.io/token/0x57fe785236542cb21747ed011be2699f43c372dc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x57fe785236542cb21747ed011be2699f43c372dc</a>  |\n| mkr       | Maker                                | 18         | <a href=\"https://etherscan.io/token/0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2</a>  |\n| mns       | Monnos Token                         | 18         | <a href=\"https://etherscan.io/token/0x53884b61963351c283118a8e1fc05ba464a11959\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x53884b61963351c283118a8e1fc05ba464a11959</a>  |\n| moc       | Moss Coin                            | 18         | <a href=\"https://etherscan.io/token/0x865ec58b06bf6305b886793aa20a2da31d034e68\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x865ec58b06bf6305b886793aa20a2da31d034e68</a>  |\n| mof       | Molecular Future                     | 16         | <a href=\"https://etherscan.io/token/0x653430560be843c4a3d143d0110e896c2ab8ac0d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x653430560be843c4a3d143d0110e896c2ab8ac0d</a>  |\n| mpay      | MenaPay                              | 18         | <a href=\"https://etherscan.io/token/0x3810a4ddf41e586fa0dba1463a7951b748cecfca\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x3810a4ddf41e586fa0dba1463a7951b748cecfca</a>  |\n| mpl       | Maple Token                          | 18         | <a href=\"https://etherscan.io/token/0x33349b282065b0284d756f0577fb39c158f935e6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x33349b282065b0284d756f0577fb39c158f935e6</a>  |\n| mtcn      | Multiven                             | 18         | <a href=\"https://etherscan.io/token/0xf6117cc92d7247f605f11d4c942f0feda3399cb5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf6117cc92d7247f605f11d4c942f0feda3399cb5</a>  |\n| mtl       | Metal                                | 8          | <a href=\"https://etherscan.io/token/0xf433089366899d83a9f26a773d59ec7ecf30355e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf433089366899d83a9f26a773d59ec7ecf30355e</a>  |\n| musd      | mStable USD                          | 18         | <a href=\"https://etherscan.io/token/0xe2f2a5c287993345a840db3b0845fbc70f5935a5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe2f2a5c287993345a840db3b0845fbc70f5935a5</a>  |\n| mvl       | Mass Vehicle Ledger                  | 18         | <a href=\"https://etherscan.io/token/0xa849eaae994fb86afa73382e9bd88c2b6b18dc71\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa849eaae994fb86afa73382e9bd88c2b6b18dc71</a>  |\n| mvi       | Metaverse Index                      | 18         | <a href=\"https://etherscan.io/token/0x72e364f2abdc788b7e918bc238b21f109cd634d7\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x72e364f2abdc788b7e918bc238b21f109cd634d7</a>  |\n| mwt       | Mountain Wolf Token                  | 18         | <a href=\"https://etherscan.io/token/0x1bd936a1d180b5afc640ea9b2274156af0b7533b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1bd936a1d180b5afc640ea9b2274156af0b7533b</a>  |\n| nas       | Nebulas                              | 18         | <a href=\"https://etherscan.io/token/0x5d65d971895edc438f465c17db6992698a52318d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x5d65d971895edc438f465c17db6992698a52318d</a>  |\n| nct       | Polyswarm                            | 18         | <a href=\"https://etherscan.io/token/0x9e46a38f5daabe8683e10793b06749eef7d733d1\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9e46a38f5daabe8683e10793b06749eef7d733d1</a>  |\n| ndx       | Indexed Finance                      | 18         | <a href=\"https://etherscan.io/token/0x86772b1409b61c639eaac9ba0acfbb6e238e5f83\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x86772b1409b61c639eaac9ba0acfbb6e238e5f83</a>  |\n| neu       | Neumark                              | 18         | <a href=\"https://etherscan.io/token/0xa823e6722006afe99e91c30ff5295052fe6b8e32\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa823e6722006afe99e91c30ff5295052fe6b8e32</a>  |\n| nexo      | Nexo                                 | 18         | <a href=\"https://etherscan.io/token/0xb62132e35a6c13ee1ee0f84dc5d40bad8d815206\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb62132e35a6c13ee1ee0f84dc5d40bad8d815206</a>  |\n| nftx      | NFTX                                 | 18         | <a href=\"https://etherscan.io/token/0x87d73e916d7057945c9bcd8cdd94e42a6f47f776\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x87d73e916d7057945c9bcd8cdd94e42a6f47f776</a>  |\n| ngnt      | Naira Token                          | 2          | <a href=\"https://etherscan.io/token/0x05bbed16620b352a7f889e23e3cf427d1d379ffe\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x05bbed16620b352a7f889e23e3cf427d1d379ffe</a>  |\n| niax      | IONIAX Token                         | 18         | <a href=\"https://etherscan.io/token/0x8cd18aface2bddd788b4e130ae374f54e43f2960\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8cd18aface2bddd788b4e130ae374f54e43f2960</a>  |\n| nmr       | Numeraire                            | 18         | <a href=\"https://etherscan.io/token/0x1776e1f26f98b1a5df9cd347953a26dd3cb46671\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1776e1f26f98b1a5df9cd347953a26dd3cb46671</a>  |\n| npxs      | Pundi X                              | 18         | <a href=\"https://etherscan.io/token/0xa15c7ebe1f07caf6bff097d8a589fb8ac49ae5b3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa15c7ebe1f07caf6bff097d8a589fb8ac49ae5b3</a>  |\n| ns2drp    | New Silver Series 2 DROP             | 18         | <a href=\"https://etherscan.io/token/0xe4c72b4de5b0f9accea880ad0b1f944f85a9daa0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe4c72b4de5b0f9accea880ad0b1f944f85a9daa0</a>  |\n| nu        | NuCypher                             | 18         | <a href=\"https://etherscan.io/token/0x4fe83213d56308330ec302a8bd641f1d0113a4cc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4fe83213d56308330ec302a8bd641f1d0113a4cc</a>  |\n| nym       | NYM                                  | 6          | <a href=\"https://etherscan.io/token/0x525a8f6f3ba4752868cde25164382bfbae3990e1\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x525a8f6f3ba4752868cde25164382bfbae3990e1</a>  |\n| nzdx      | eToro New Zealand Dollar             | 18         | <a href=\"https://etherscan.io/token/0x6871799a4866bb9068b36b7a9bb93475ac77ac5d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6871799a4866bb9068b36b7a9bb93475ac77ac5d</a>  |\n| ocean     | Ocean Token                          | 18         | <a href=\"https://etherscan.io/token/0x7afebbb46fdb47ed17b22ed075cde2447694fb9e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7afebbb46fdb47ed17b22ed075cde2447694fb9e</a>  |\n| oceanv2   | Ocean Token V2                       | 18         | <a href=\"https://etherscan.io/token/0x967da4048cd07ab37855c090aaf366e4ce1b9f48\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x967da4048cd07ab37855c090aaf366e4ce1b9f48</a>  |\n| ogn       | Origin Token                         | 18         | <a href=\"https://etherscan.io/token/0x8207c1ffc5b6804f6024322ccf34f29c3541ae26\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8207c1ffc5b6804f6024322ccf34f29c3541ae26</a>  |\n| okb       | OKB Token                            | 18               | <a href=\"https://etherscan.io/token/0x75231f58b43240c9718dd58b4967c5114342a86c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x75231f58b43240c9718dd58b4967c5114342a86c</a>  |\n| om        | Om Token                             | 18         | <a href=\"https://etherscan.io/token/0x2baecdf43734f22fd5c152db08e3c27233f0c7d2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2baecdf43734f22fd5c152db08e3c27233f0c7d2</a>  |\n| omg       | OmiseGO Token                        | 18         | <a href=\"https://etherscan.io/token/0xd26114cd6ee289accf82350c8d8487fedb8a0c07\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd26114cd6ee289accf82350c8d8487fedb8a0c07</a>  |\n| onl       | On.Live                              | 18         | <a href=\"https://etherscan.io/token/0x6863be0e7cf7ce860a574760e9020d519a8bdc47\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6863be0e7cf7ce860a574760e9020d519a8bdc47</a>  |\n| opt       | OPTin Token                          | 18         | <a href=\"https://etherscan.io/token/0xde8893346ce8052a02606b62d13b142648e062dd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xde8893346ce8052a02606b62d13b142648e062dd</a>  |\n| orai      | Orai Token                           | 18         | <a href=\"https://etherscan.io/token/0x4c11249814f11b9346808179cf06e71ac328c1b5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4c11249814f11b9346808179cf06e71ac328c1b5</a>  |\n| orbs      | Orbs Token                           | 18         | <a href=\"https://etherscan.io/token/0xff56cc6b1e6ded347aa0b7676c85ab0b3d08b0fa\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xff56cc6b1e6ded347aa0b7676c85ab0b3d08b0fa</a>  |\n| oxt       | Orchid                               | 18         | <a href=\"https://etherscan.io/token/0x4575f41308ec1483f3d399aa9a2826d74da13deb\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4575f41308ec1483f3d399aa9a2826d74da13deb</a>  |\n| oxy       | Oxygen Prime Brokerage               | 6          | <a href=\"https://etherscan.io/token/0x965697b4ef02f0de01384d0d4f9f782b1670c163\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x965697b4ef02f0de01384d0d4f9f782b1670c163</a>  |\n| ohm       | Olympus                              | 9          | <a href=\"https://etherscan.io/token/0x64aa3364f17a4d01c6f1751fd97c2bd3d7e7f1d5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x64aa3364f17a4d01c6f1751fd97c2bd3d7e7f1d5</a>  |\n| par       | PAR Stable Coin                      | 18         | <a href=\"https://etherscan.io/token/0x68037790a0229e9ce6eaa8a99ea92964106c4703\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x68037790a0229e9ce6eaa8a99ea92964106c4703</a>  |\n| pass      | Blockpass                            | 6          | <a href=\"https://etherscan.io/token/0xee4458e052b533b1aabd493b5f8c4d85d7b263dc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xee4458e052b533b1aabd493b5f8c4d85d7b263dc</a>  |\n| pau       | PegGold Token                        | 8          | <a href=\"https://etherscan.io/token/0x57accaad359ed96a0b4d027079b6f5351b043912\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x57accaad359ed96a0b4d027079b6f5351b043912</a>  |\n| pax       | Paxos                                | 18         | <a href=\"https://etherscan.io/token/0x8e870d67f660d95d5be530380d0ec0bd388289e1\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8e870d67f660d95d5be530380d0ec0bd388289e1</a>  |\n| paxg      | Paxos Gold                           | 18         | <a href=\"https://etherscan.io/token/0x45804880de22913dafe09f4980848ece6ecbaf78\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x45804880de22913dafe09f4980848ece6ecbaf78</a>  |\n| pay       | TenX                                 | 18         | <a href=\"https://etherscan.io/token/0xb97048628db6b661d4c2aa833e95dbe1a905b280\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb97048628db6b661d4c2aa833e95dbe1a905b280</a>  |\n| pbch      | PegBitcoin Cash Token                | 8          | <a href=\"https://etherscan.io/token/0xb38bb9f5b9a73a3097d3a7cadd330aa6e6da8586\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb38bb9f5b9a73a3097d3a7cadd330aa6e6da8586</a>  |\n| pbtc      | PegBitcoin Token                     | 8          | <a href=\"https://etherscan.io/token/0x6a7041ff8cb4da0253a00bb1e548caf77c238bda\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6a7041ff8cb4da0253a00bb1e548caf77c238bda</a>  |\n| pdata     | Opiria Token                         | 18         | <a href=\"https://etherscan.io/token/0x0db03b6cde0b2d427c64a04feafd825938368f1f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0db03b6cde0b2d427c64a04feafd825938368f1f</a>  |\n| peg       | PegNet                               | 8          | <a href=\"https://etherscan.io/token/0x996b396b88cc4a1d8df3dbd1c088cdfaee17e6d4\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x996b396b88cc4a1d8df3dbd1c088cdfaee17e6d4</a>  |\n| perp      | Perpetual Protocol                   | 18         | <a href=\"https://etherscan.io/token/0xbc396689893d065f41bc2c6ecbee5e0085233447\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xbc396689893d065f41bc2c6ecbee5e0085233447</a>  |\n| peth      | PegEthereum Token                    | 8          | <a href=\"https://etherscan.io/token/0x6065616a4bad5ce723a5608dcb85d3dbd20b55dd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6065616a4bad5ce723a5608dcb85d3dbd20b55dd</a>  |\n| pfct      | PegFactom Token                      | 8          | <a href=\"https://etherscan.io/token/0x069480de51cfc3a8fdc7d2338925089a3f842740\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x069480de51cfc3a8fdc7d2338925089a3f842740</a>  |\n| phnx      | Pheonix Dao                          | 18         | <a href=\"https://etherscan.io/token/0x38a2fdc11f526ddd5a607c1f251c065f40fbf2f7\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x38a2fdc11f526ddd5a607c1f251c065f40fbf2f7</a>  |\n| pie       | DeFiPie                              | 18         | <a href=\"https://etherscan.io/token/0x607c794cda77efb21f8848b7910ecf27451ae842\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x607c794cda77efb21f8848b7910ecf27451ae842</a>  |\n| planet    | Planet                               | 18         | <a href=\"https://etherscan.io/token/0x307d45afbb7e84f82ef3d251a6bb0f00edf632e4\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x307d45afbb7e84f82ef3d251a6bb0f00edf632e4</a>  |\n| plc       | PlusCoin                             | 18         | <a href=\"https://etherscan.io/token/0xdf99c7f9e0eadd71057a801055da810985df38bd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdf99c7f9e0eadd71057a801055da810985df38bd</a>  |\n| plnx      | eToro Polish Zloty                   | 18         | <a href=\"https://etherscan.io/token/0xaace6480798b4a7b596ec4ce3a26b8de9b9ae2e2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xaace6480798b4a7b596ec4ce3a26b8de9b9ae2e2</a>  |\n| plx       | PLN Stable Token                     | 18         | <a href=\"https://etherscan.io/token/0x8d682bc7ad206e54055c609ea1d4717caab665d0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8d682bc7ad206e54055c609ea1d4717caab665d0</a>  |\n| pma       | PumaPay                              | 18         | <a href=\"https://etherscan.io/token/0x846c66cf71c43f80403b51fe3906b3599d63336f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x846c66cf71c43f80403b51fe3906b3599d63336f</a>  |\n| poly      | Polymath                             | 18         | <a href=\"https://etherscan.io/token/0x9992ec3cf6a55b00978cddf2b27bc6882d88d1ec\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9992ec3cf6a55b00978cddf2b27bc6882d88d1ec</a>  |\n| powr      | Power Ledger                         | 6          | <a href=\"https://etherscan.io/token/0x595832f8fc6bf59c85c527fec3740a1b7a361269\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x595832f8fc6bf59c85c527fec3740a1b7a361269</a>  |\n| ppt       | Populous Platform                    | 8          | <a href=\"https://etherscan.io/token/0xd4fa1460f537bb9085d22c7bccb5dd450ef28e3a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd4fa1460f537bb9085d22c7bccb5dd450ef28e3a</a>  |\n| prdx      | PRDX Token                           | 9          | <a href=\"https://etherscan.io/token/0xe17900f23b7ebb2791f25f1eaa63d8f5e603e9a5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe17900f23b7ebb2791f25f1eaa63d8f5e603e9a5</a>  |\n| prints    | FingerprintsDAO                      | 18         | <a href=\"https://etherscan.io/token/0x4dd28568d05f09b02220b09c2cb307bfd837cb95\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4dd28568d05f09b02220b09c2cb307bfd837cb95</a>  |\n| pro       | Propy                                | 18         | <a href=\"https://etherscan.io/token/0x9041fe5b3fdea0f5e4afdc17e75180738d877a01\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9041fe5b3fdea0f5e4afdc17e75180738d877a01</a>  |\n| prts      | Protos                               | 0          | <a href=\"https://etherscan.io/token/0x835a44027ee4e92bbd8874e5ede9e5148b069e96\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x835a44027ee4e92bbd8874e5ede9e5148b069e96</a>  |\n| pstake    | PSTAKE Finance                       | 18         | <a href=\"https://etherscan.io/token/0xfB5c6815cA3AC72Ce9F5006869AE67f18bF77006\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xfB5c6815cA3AC72Ce9F5006869AE67f18bF77006</a>  |\n| pundix    | Pundi X2                             | 18         | <a href=\"https://etherscan.io/token/0x0fd10b9899882a6f2fcb5c371e17e70fdee00c38\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0fd10b9899882a6f2fcb5c371e17e70fdee00c38</a>  |\n| pusd      | PegUSD Token                         | 8          | <a href=\"https://etherscan.io/token/0x93d3296cac208422bf587c3597d116e809870f2b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x93d3296cac208422bf587c3597d116e809870f2b</a>  |\n| pxp       | PointPay Crypto Banking Token V2     | 18         | <a href=\"https://etherscan.io/token/0x95aa5d2dbd3c16ee3fdea82d5c6ec3e38ce3314f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x95aa5d2dbd3c16ee3fdea82d5c6ec3e38ce3314f</a>  |\n| pyr       | Pyr Token                            | 18               | <a href=\"https://etherscan.io/token/0x9534ad65fb398e27ac8f4251dae1780b989d136e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9534ad65fb398e27ac8f4251dae1780b989d136e</a>  |\n| qash      | QASH                                 | 6          | <a href=\"https://etherscan.io/token/0x618e75ac90b12c6049ba3b27f5d5f8651b0037f6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x618e75ac90b12c6049ba3b27f5d5f8651b0037f6</a>  |\n| qcad      | QCAD                                 | 2          | <a href=\"https://etherscan.io/token/0x4a16baf414b8e637ed12019fad5dd705735db2e0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4a16baf414b8e637ed12019fad5dd705735db2e0</a>  |\n| qdt       | Quadrans Token                       | 18         | <a href=\"https://etherscan.io/token/0x9adc7710e9d1b29d8a78c04d52d32532297c2ef3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9adc7710e9d1b29d8a78c04d52d32532297c2ef3</a>  |\n| qkc       | QuarkChain                                | 18         | <a href=\"https://etherscan.io/token/0xea26c4ac16d4a5a106820bc8aee85fd0b7b2b664\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xea26c4ac16d4a5a106820bc8aee85fd0b7b2b664</a>  |\n| qnt       | Quant                                | 18         | <a href=\"https://etherscan.io/token/0x4a220e6096b25eadb88358cb44068a3248254675\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4a220e6096b25eadb88358cb44068a3248254675</a>  |\n| qrdo      | Qredo                                | 8          | <a href=\"https://etherscan.io/token/0x4123a133ae3c521fd134d7b13a2dec35b56c2463\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4123a133ae3c521fd134d7b13a2dec35b56c2463</a>  |\n| qrl       | Qrl                                  | 8          | <a href=\"https://etherscan.io/token/0x697beac28b09e122c4332d163985e8a73121b97f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x697beac28b09e122c4332d163985e8a73121b97f</a>  |\n| qsp       | Quantstamp                           | 18         | <a href=\"https://etherscan.io/token/0x99ea4db9ee77acd40b119bd1dc4e33e1c070b80d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x99ea4db9ee77acd40b119bd1dc4e33e1c070b80d</a>  |\n| quick     | Quickswap                            | 18         | <a href=\"https://etherscan.io/token/0x6c28aef8977c9b773996d0e8376d2ee379446f2f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6c28aef8977c9b773996d0e8376d2ee379446f2f</a>  |\n| qvt       | Qvolta                               | 18         | <a href=\"https://etherscan.io/token/0x1183f92a5624d68e85ffb9170f16bf0443b4c242\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1183f92a5624d68e85ffb9170f16bf0443b4c242</a>  |\n| rad       | Radicle                              | 18         | <a href=\"https://etherscan.io/token/0x31c8eacbffdd875c74b94b077895bd78cf1e64a3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x31c8eacbffdd875c74b94b077895bd78cf1e64a3</a>  |\n| rare      | SuperRare                            | 18         | <a href=\"https://etherscan.io/token/0xba5bde662c17e2adff1075610382b9b691296350\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xba5bde662c17e2adff1075610382b9b691296350</a>  |\n| rari      | Rarible                              | 18         | <a href=\"https://etherscan.io/token/0xfca59cd816ab1ead66534d82bc21e7515ce441cf\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xfca59cd816ab1ead66534d82bc21e7515ce441cf</a>  |\n| ray       | Raydium                        | 6                | <a href=\"https://etherscan.io/token/0x5245c0249e5eeb2a0838266800471fd32adb1089\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x5245c0249e5eeb2a0838266800471fd32adb1089</a>  |\n| rby       | Ruby X                               | 18         | <a href=\"https://etherscan.io/token/0xf7705dee19a63e0bc1a240f723c5c0f570c78572\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf7705dee19a63e0bc1a240f723c5c0f570c78572</a>  |\n| rdn       | Raiden Network                       | 18         | <a href=\"https://etherscan.io/token/0x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6</a>  |\n| reb       | Regblo                               | 18         | <a href=\"https://etherscan.io/token/0x61383ac89988b498df5363050ff07fe5c52ecdda\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x61383ac89988b498df5363050ff07fe5c52ecdda</a>  |\n| rebl      | Rebellious                           | 18         | <a href=\"https://etherscan.io/token/0x5f53f7a8075614b699baad0bc2c899f4bad8fbbf\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x5f53f7a8075614b699baad0bc2c899f4bad8fbbf</a>  |\n| reef      | Reef                                 | 18         | <a href=\"https://etherscan.io/token/0xfe3e6a25e6b192a42a44ecddcd13796471735acf\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xfe3e6a25e6b192a42a44ecddcd13796471735acf</a>  |\n| rep       | Augur                                | 18         | <a href=\"https://etherscan.io/token/0x1985365e9f78359a9b6ad760e32412f4a445e862\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1985365e9f78359a9b6ad760e32412f4a445e862</a>  |\n| repv2     | Augur V2 Token                       | 18         | <a href=\"https://etherscan.io/token/0x221657776846890989a759ba2973e427dff5c9bb\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x221657776846890989a759ba2973e427dff5c9bb</a>  |\n| seth-h    | Staked ETH Harbour                   | 18         | <a href=\"https://etherscan.io/token/0x65077fa7df8e38e135bd4052ac243f603729892d\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x65077fa7df8e38e135bd4052ac243f603729892d</a>  |\n| reth-h    | Reward ETH Harbour                   | 18         | <a href=\"https://etherscan.io/token/0xcbe26dbc91b05c160050167107154780f36ceaab\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xcbe26dbc91b05c160050167107154780f36ceaab</a>  |\n| rfr       | Refereum                             | 4          | <a href=\"https://etherscan.io/token/0xd0929d411954c47438dc1d871dd6081f5c5e149c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd0929d411954c47438dc1d871dd6081f5c5e149c</a>  |\n| rfuel     | RioDeFi                              | 18         | <a href=\"https://etherscan.io/token/0xaf9f549774ecedbd0966c52f250acc548d3f36e5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xaf9f549774ecedbd0966c52f250acc548d3f36e5</a>  |\n| rgt       | Rari Governance Token                | 18         | <a href=\"https://etherscan.io/token/0xd291e7a03283640fdc51b121ac401383a46cc623\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd291e7a03283640fdc51b121ac401383a46cc623</a>  |\n| rif       | RIF Token                            | 18         | <a href=\"https://etherscan.io/token/0x2acc95758f8b5f583470ba265eb685a8f45fc9d5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2acc95758f8b5f583470ba265eb685a8f45fc9d5</a>  |\n| ringx     | Ringx Token                          | 18         | <a href=\"https://etherscan.io/token/0x7f86c782ec802ac402e0369d2e6d500256f7abc5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7f86c782ec802ac402e0369d2e6d500256f7abc5</a>  |\n| rlc       | Iexec Rlc                            | 9          | <a href=\"https://etherscan.io/token/0x607f4c5bb672230e8672085532f7e901544a7375\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x607f4c5bb672230e8672085532f7e901544a7375</a>  |\n| rsr       | Reserve Rights                       | 18         | <a href=\"https://etherscan.io/token/0x320623b8e4ff03373931769a31fc52a4e78b5d70\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x320623b8e4ff03373931769a31fc52a4e78b5d70</a>  |\n| rly       | Rally                                | 18         | <a href=\"https://etherscan.io/token/0xf1f955016ecbcd7321c7266bccfb96c68ea5e49b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf1f955016ecbcd7321c7266bccfb96c68ea5e49b</a>  |\n| rndr      | Render Token                         | 18         | <a href=\"https://etherscan.io/token/0x6de037ef9ad2725eb40118bb1702ebb27e4aeb24\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6de037ef9ad2725eb40118bb1702ebb27e4aeb24</a>  |\n| ron       | Ronin                              | 18         | <a href=\"https://etherscan.io/token/0x23f043426b2336e723b32fb3bf4a1ca410f7c49a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x23f043426b2336e723b32fb3bf4a1ca410f7c49a</a>  |\n| ronc      | RONCoin                              | 18         | <a href=\"https://etherscan.io/token/0xf1b819fdb689f43afc161db789800ed799f18388\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf1b819fdb689f43afc161db789800ed799f18388</a>  |\n| roobee    | ROOBEE                               | 18         | <a href=\"https://etherscan.io/token/0xa31b1767e09f842ecfd4bc471fe44f830e3891aa\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa31b1767e09f842ecfd4bc471fe44f830e3891aa</a>  |\n| rook      | ROOK                           | 18               | <a href=\"https://etherscan.io/token/0xfa5047c9c78b8877af97bdcb85db743fd7313d4a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xfa5047c9c78b8877af97bdcb85db743fd7313d4a</a>  |\n| rsr       | Reserve Rig                          | 18         | <a href=\"https://etherscan.io/token/0x320623b8E4fF03373931769A31Fc52A4E78B5d70\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x320623b8E4fF03373931769A31Fc52A4E78B5d70</a>  |\n| rubx      | eToro Russian Ruble                  | 18         | <a href=\"https://etherscan.io/token/0xd6d69a3d5e51dbc2636dc332338765fcca71d5d5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd6d69a3d5e51dbc2636dc332338765fcca71d5d5</a>  |\n| ruedatk   | Ruedacoin                            | 6          | <a href=\"https://etherscan.io/token/0xe2f43e8053444e764e658bab63d49f873a75ce63\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe2f43e8053444e764e658bab63d49f873a75ce63</a>  |\n| salt      | Salt                                 | 8          | <a href=\"https://etherscan.io/token/0x4156d3342d5c385a87d264f90653733592000581\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4156d3342d5c385a87d264f90653733592000581</a>  |\n| sand      | Sand                                 | 18         | <a href=\"https://etherscan.io/token/0x3845badade8e6dff049820680d1f14bd3903a5d0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x3845badade8e6dff049820680d1f14bd3903a5d0</a>  |\n| sashimi   | SashimiToken                         | 18         | <a href=\"https://etherscan.io/token/0xc28e27870558cf22add83540d2126da2e4b464c2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc28e27870558cf22add83540d2126da2e4b464c2</a>  |\n| sd        | Stader                               | 18         | <a href=\"https://etherscan.io/token/0xC7452D6a59a3a38dCe2Ed44c9586F1E0ccd7bfF4\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xC7452D6a59a3a38dCe2Ed44c9586F1E0ccd7bfF4</a>  |\n| sga       | Saga                                 | 18         | <a href=\"https://etherscan.io/token/0xed0849bf46cfb9845a2d900a0a4e593f2dd3673c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xed0849bf46cfb9845a2d900a0a4e593f2dd3673c</a>  |\n| sgdx      | eToro Singapore Dollar               | 18         | <a href=\"https://etherscan.io/token/0x0e3e965acffb719e2f5dd4309969e2debe6215dd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0e3e965acffb719e2f5dd4309969e2debe6215dd</a>  |\n| sgr       | Sogur                                | 18         | <a href=\"https://etherscan.io/token/0xaea8e1b6cb5c05d1dac618551c76bcd578ea3524\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xaea8e1b6cb5c05d1dac618551c76bcd578ea3524</a>  |\n| shib      | Shiba Inu                            | 18         | <a href=\"https://etherscan.io/token/0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce</a>  |\n| shk       | iShook                               | 18         | <a href=\"https://etherscan.io/token/0xebe4a49df7885d015329c919bf43e6460a858f1e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xebe4a49df7885d015329c919bf43e6460a858f1e</a>  |\n| shopx     | Splyt Core Token                     | 18         | <a href=\"https://etherscan.io/token/0x7bef710a5759d197ec0bf621c3df802c2d60d848\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7bef710a5759d197ec0bf621c3df802c2d60d848</a>  |\n| shr       | ShareToken                           | 2          | <a href=\"https://etherscan.io/token/0xee5fe244406f35d9b4ddb488a64d51456630befc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xee5fe244406f35d9b4ddb488a64d51456630befc</a>  |\n| sih       | Sih                                  | 18         | <a href=\"https://etherscan.io/token/0x6d728ff862bfe74be2aba30537e992a24f259a22\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6d728ff862bfe74be2aba30537e992a24f259a22</a>  |\n| sipher    | Sipher Token                         | 18         | <a href=\"https://etherscan.io/token/0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511</a>  |\n| sis       | Symbiosis Finance                       | 18         | <a href=\"https://etherscan.io/token/0xd38bb40815d2b0c2d2c866e0c72c5728ffc76dd9\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd38bb40815d2b0c2d2c866e0c72c5728ffc76dd9</a>  |\n| silv      | XBullion Silver                      | 8          | <a href=\"https://etherscan.io/token/0x628ab8b061fea2af1239b68efa5e46135d186666\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x628ab8b061fea2af1239b68efa5e46135d186666</a>  |\n| skale     | SKALE Network                        | 18         | <a href=\"https://etherscan.io/token/0x00c83aecc790e8a4453e5dd3b0b4b3680501a7a7\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x00c83aecc790e8a4453e5dd3b0b4b3680501a7a7</a>  |\n| slab      | SLAB                                 | 18         | <a href=\"https://etherscan.io/token/0x994466f822af45cf5db0a0f41b9af6d503bcf3d5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x994466f822af45cf5db0a0f41b9af6d503bcf3d5</a>  |\n| slot      | AlphaSlot                            | 18         | <a href=\"https://etherscan.io/token/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2</a>  |\n| slp       | Smooth Love Potion                   | 0          | <a href=\"https://etherscan.io/token/0xcc8fa225d80b9c7d42f96e9570156c65d6caaa25\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xcc8fa225d80b9c7d42f96e9570156c65d6caaa25</a>  |\n| slvx      | eToro Silver                         | 18         | <a href=\"https://etherscan.io/token/0x8e4d222dbd4f8f9e7c175e77d6e71715c3da78e0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8e4d222dbd4f8f9e7c175e77d6e71715c3da78e0</a>  |\n| snc       | SunContract                          | 18         | <a href=\"https://etherscan.io/token/0xf4134146af2d511dd5ea8cdb1c4ac88c57d60404\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf4134146af2d511dd5ea8cdb1c4ac88c57d60404</a>  |\n| snov      | Snovio                               | 18         | <a href=\"https://etherscan.io/token/0xbdc5bac39dbe132b1e030e898ae3830017d7d969\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xbdc5bac39dbe132b1e030e898ae3830017d7d969</a>  |\n| snt       | Status Network Token                 | 18         | <a href=\"https://etherscan.io/token/0x744d70fdbe2ba4cf95131626614a1763df805b9e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x744d70fdbe2ba4cf95131626614a1763df805b9e</a>  |\n| snx       | Synthetix Network                    | 18         | <a href=\"https://etherscan.io/token/0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f</a>  |\n| soc       | SODACoin                             | 18         | <a href=\"https://etherscan.io/token/0xcad49c39b72c37b32cee8b14f33f316d3a8bc335\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xcad49c39b72c37b32cee8b14f33f316d3a8bc335</a>  |\n| sohm      | Staked OHM                           | 9          | <a href=\"https://etherscan.io/token/0x04906695d6d12cf5459975d7c3c03356e4ccd460\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x04906695d6d12cf5459975d7c3c03356e4ccd460</a>  |\n| solve     | Solve Token                          | 8          | <a href=\"https://etherscan.io/token/0x446c9033e7516d820cc9a2ce2d0b7328b579406f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x446c9033e7516d820cc9a2ce2d0b7328b579406f</a>  |\n| spell     | Spell Token                          | 18         | <a href=\"https://etherscan.io/token/0x090185f2135308bad17527004364ebcc2d37e5f6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x090185f2135308bad17527004364ebcc2d37e5f6</a>  |\n| spo       | Sparrow Options                      | 18         | <a href=\"https://etherscan.io/token/0x89eafa06d99f0a4d816918245266800c9a0941e0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x89eafa06d99f0a4d816918245266800c9a0941e0</a>  |\n| srnt      | Serenity                             | 18         | <a href=\"https://etherscan.io/token/0xbc7942054f77b82e8a71ace170e4b00ebae67eb6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xbc7942054f77b82e8a71ace170e4b00ebae67eb6</a>  |\n| stbu      | Stobox Token                         | 18         | <a href=\"https://etherscan.io/token/0x212dd60d4bf0da8372fe8116474602d429e5735f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x212dd60d4bf0da8372fe8116474602d429e5735f</a>  |\n| stc       | Student Coin                         | 2          | <a href=\"https://etherscan.io/token/0xb8b7791b1a445fb1e202683a0a329504772e0e52\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb8b7791b1a445fb1e202683a0a329504772e0e52</a>  |\n| stcv2     | Student Coin V2                      | 18         | <a href=\"https://etherscan.io/token/0x15b543e986b8c34074dfc9901136d9355a537e7e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x15b543e986b8c34074dfc9901136d9355a537e7e</a>  |\n| stkaave   | Staked Aave                          | 18         | <a href=\"https://etherscan.io/token/0x4da27a545c0c5b758a6ba100e3a049001de870f5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4da27a545c0c5b758a6ba100e3a049001de870f5</a>  |\n| store     | Store                                | 8          | <a href=\"https://etherscan.io/token/0x2c0f41eb07a0635bac34bd7d11d0ca6058279601\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2c0f41eb07a0635bac34bd7d11d0ca6058279601</a>  |\n| storj     | Storj                                | 8          | <a href=\"https://etherscan.io/token/0xb64ef51c888972c908cfacf59b47c1afbc0ab8ac\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb64ef51c888972c908cfacf59b47c1afbc0ab8ac</a>  |\n| storm     | Storm                                | 18         | <a href=\"https://etherscan.io/token/0xd0a4b8946cb52f0661273bfbc6fd0e0c75fc6433\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd0a4b8946cb52f0661273bfbc6fd0e0c75fc6433</a>  |\n| stmx    | StormX                                 | 18         | <a href=\"https://etherscan.io/token/0xbe9375c6a420d2eeb258962efb95551a5b722803\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xbe9375c6a420d2eeb258962efb95551a5b722803</a>  |\n| stzen     | stakedZEN                            | 8          | <a href=\"https://etherscan.io/token/0x31b595e7cfdb624d10a3e7a562ed98c3567e3865\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x31b595e7cfdb624d10a3e7a562ed98c3567e3865</a>  |\n| squig     | Squiggle                             | 4          | <a href=\"https://etherscan.io/token/0x373acda15ce392362e4b46ed97a7feecd7ef9eb8\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x373acda15ce392362e4b46ed97a7feecd7ef9eb8</a>  |\n| super     | SuperFarm                            | 18         | <a href=\"https://etherscan.io/token/0xe53ec727dbdeb9e2d5456c3be40cff031ab40a55\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe53ec727dbdeb9e2d5456c3be40cff031ab40a55</a>  |\n| sushi     | SushiToken                           | 18         | <a href=\"https://etherscan.io/token/0x6b3595068778dd592e39a122f4f5a5cf09c90fe2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6b3595068778dd592e39a122f4f5a5cf09c90fe2</a>  |\n| sxp       | Swipe                                | 18         | <a href=\"https://etherscan.io/token/0x8ce9137d39326ad0cd6491fb5cc0cba0e089b6a9\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8ce9137d39326ad0cd6491fb5cc0cba0e089b6a9</a>  |\n| t         | Threshold                            | 18         | <a href=\"https://etherscan.io/token/0xcdf7028ceab81fa0c6971208e83fa7872994bee5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xcdf7028ceab81fa0c6971208e83fa7872994bee5</a>  |\n| taud      | TrueAUD                              | 18         | <a href=\"https://etherscan.io/token/0x00006100f7090010005f1bd7ae6122c3c2cf0090\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x00006100f7090010005f1bd7ae6122c3c2cf0090</a>  |\n| tbtc1     | Tbtc1                                | 18         | <a href=\"https://etherscan.io/token/0x8daebade922df735c38c80c7ebd708af50815faa\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8daebade922df735c38c80c7ebd708af50815faa</a>  |\n| tcad      | TrueCAD                              | 18         | <a href=\"https://etherscan.io/token/0x00000100f2a2bd000715001920eb70d229700085\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x00000100f2a2bd000715001920eb70d229700085</a>  |\n| tco       | Think Coin                           | 18         | <a href=\"https://etherscan.io/token/0x6288014d6ba425d71f5fdc1dbfb01378241d78db\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6288014d6ba425d71f5fdc1dbfb01378241d78db</a>  |\n| tel       | Telcoin                              | 2          | <a href=\"https://etherscan.io/token/0x467bccd9d29f223bce8043b84e8c8b282827790f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x467bccd9d29f223bce8043b84e8c8b282827790f</a>  |\n| ten       | Tokenomy                             | 18         | <a href=\"https://etherscan.io/token/0xdd16ec0f66e54d453e6756713e533355989040e4\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdd16ec0f66e54d453e6756713e533355989040e4</a>  |\n| tenx      | TenX Token                           | 18         | <a href=\"https://etherscan.io/token/0x515ba0a2e286af10115284f151cf398688a69170\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x515ba0a2e286af10115284f151cf398688a69170</a>  |\n| tgbp      | TrueGBP                              | 18         | <a href=\"https://etherscan.io/token/0x00000000441378008ea67f4284a57932b1c000a5\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x00000000441378008ea67f4284a57932b1c000a5</a>  |\n| thkd      | TrueHKD                              | 18         | <a href=\"https://etherscan.io/token/0x0000852600ceb001e08e00bc008be620d60031f2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0000852600ceb001e08e00bc008be620d60031f2</a>  |\n| tiox      | Trade Token X                        | 18         | <a href=\"https://etherscan.io/token/0xd947b0ceab2a8885866b9a04a06ae99de852a3d4\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd947b0ceab2a8885866b9a04a06ae99de852a3d4</a>  |\n| trl       | Triall Token                         | 18         | <a href=\"https://etherscan.io/token/0x58f9102bf53cf186682bd9a281d3cd3c616eec41\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x58f9102bf53cf186682bd9a281d3cd3c616eec41</a>  |\n| tknt      | Tknt                                 | 18         | <a href=\"https://etherscan.io/token/0xbce7bd79558dda90b261506768f265c5543a9f90\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xbce7bd79558dda90b261506768f265c5543a9f90</a>  |\n| tkx       | Tokenize                             | 8          | <a href=\"https://etherscan.io/token/0x667102bd3413bfeaa3dffb48fa8288819e480a88\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x667102bd3413bfeaa3dffb48fa8288819e480a88</a>  |\n| tlab      | TLAB                                 | 18         | <a href=\"https://etherscan.io/token/0x36222730e78a8656230c54f9e402a062d168d2d9\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x36222730e78a8656230c54f9e402a062d168d2d9</a>  |\n| tnt       | Tierion                              | 8          | <a href=\"https://etherscan.io/token/0x08f5a9235b08173b7569f83645d2c7fb55e8ccd8\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x08f5a9235b08173b7569f83645d2c7fb55e8ccd8</a>  |\n| tok       | Tokenplace                           | 8          | <a href=\"https://etherscan.io/token/0x4fb721ef3bf99e0f2c193847afa296b9257d3c30\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4fb721ef3bf99e0f2c193847afa296b9257d3c30</a>  |\n| traxx     | TokenTrax                            | 18         | <a href=\"https://etherscan.io/token/0xd43be54c1aedf7ee4099104f2dae4ea88b18a249\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd43be54c1aedf7ee4099104f2dae4ea88b18a249</a>  |\n| trac      | OriginTrail                          | 18         | <a href=\"https://etherscan.io/token/0xaa7a9ca87d3694b5755f213b5d04094b8d0f0a6f\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xaa7a9ca87d3694b5755f213b5d04094b8d0f0a6f</a>  |\n| tribe     | Tribe                                | 18         | <a href=\"https://etherscan.io/token/0xc7283b66eb1eb5fb86327f08e1b5816b0720212b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc7283b66eb1eb5fb86327f08e1b5816b0720212b</a>  |\n| trst      | WeTrust                              | 6          | <a href=\"https://etherscan.io/token/0xcb94be6f13a1182e4a4b6140cb7bf2025d28e41b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xcb94be6f13a1182e4a4b6140cb7bf2025d28e41b</a>  |\n| tru       | Tru                                  | 8          | <a href=\"https://etherscan.io/token/0x4c19596f5aaff459fa38b0f7ed92f11ae6543784\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4c19596f5aaff459fa38b0f7ed92f11ae6543784</a>  |\n| tryb      | Bilira Token                         | 6          | <a href=\"https://etherscan.io/token/0x2c537e5624e4af88a7ae4060c022609376c8d0eb\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2c537e5624e4af88a7ae4060c022609376c8d0eb</a>  |\n| bico      | Biconomy                             | 18         | <a href=\"https://etherscan.io/token/0xF17e65822b568B3903685a7c9F496CF7656Cc6C2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xF17e65822b568B3903685a7c9F496CF7656Cc6C2</a>  |\n| tryx      | eToro Turkish Lira                   | 18         | <a href=\"https://etherscan.io/token/0x6faff971d9248e7d398a98fdbe6a81f6d7489568\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6faff971d9248e7d398a98fdbe6a81f6d7489568</a>  |\n| tusd      | TrueUSD                              | 18         | <a href=\"https://etherscan.io/token/0x0000000000085d4780b73119b644ae5ecd22b376\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0000000000085d4780b73119b644ae5ecd22b376</a>  |\n| txl       | Tixl                                 | 18         | <a href=\"https://etherscan.io/token/0x8eef5a82e6aa222a60f009ac18c24ee12dbf4b41\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8eef5a82e6aa222a60f009ac18c24ee12dbf4b41</a>  |\n| uair      | Unicorn AIR Security Token           | 0          | <a href=\"https://etherscan.io/token/0xac47fbb90458695044d9b08d6de285148db4daff\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xac47fbb90458695044d9b08d6de285148db4daff</a>  |\n| uco       | UnirisToken                          | 18         | <a href=\"https://etherscan.io/token/0x8a3d77e9d6968b780564936d15b09805827c21fa\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8a3d77e9d6968b780564936d15b09805827c21fa</a>  |\n| ukg       | UnikoinGold                          | 18         | <a href=\"https://etherscan.io/token/0x24692791bc444c5cd0b81e3cbcaba4b04acd1f3b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x24692791bc444c5cd0b81e3cbcaba4b04acd1f3b</a>  |\n| uma       | UMA Voting Token V1                  | 18         | <a href=\"https://etherscan.io/token/0x04fa0d235c4abf4bcf4787af4cf447de572ef828\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x04fa0d235c4abf4bcf4787af4cf447de572ef828</a>  |\n| umee      | Umee                                 | 6          | <a href=\"https://etherscan.io/token/0xc0a4df35568f116c370e6a6a6022ceb908eeddac\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc0a4df35568f116c370e6a6a6022ceb908eeddac</a>  |\n| unb       | Unbound Protocol                     | 18         | <a href=\"https://etherscan.io/token/0x8db253a1943dddf1af9bcf8706ac9a0ce939d922\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8db253a1943dddf1af9bcf8706ac9a0ce939d922</a>  |\n| uni       | Uniswap Token                        | 18         | <a href=\"https://etherscan.io/token/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984</a>  |\n| up        | UpToken                              | 8          | <a href=\"https://etherscan.io/token/0x6ba460ab75cd2c56343b3517ffeba60748654d26\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6ba460ab75cd2c56343b3517ffeba60748654d26</a>  |\n| upbtc     | Universal Bitcoin                    | 8          | <a href=\"https://etherscan.io/token/0xc7461b398005e50bcc43c8e636378c6722e76c01\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc7461b398005e50bcc43c8e636378c6722e76c01</a>  |\n| upp       | Sentinel Protocol                    | 18         | <a href=\"https://etherscan.io/token/0xc86d054809623432210c107af2e3f619dcfbf652\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc86d054809623432210c107af2e3f619dcfbf652</a>  |\n| upt       | Universal Protocol Token             | 18         | <a href=\"https://etherscan.io/token/0x6ca88cc8d9288f5cad825053b6a1b179b05c76fc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6ca88cc8d9288f5cad825053b6a1b179b05c76fc</a>  |\n| upusd     | Universal US Dollar                  | 2          | <a href=\"https://etherscan.io/token/0x86367c0e517622dacdab379f2de389c3c9524345\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x86367c0e517622dacdab379f2de389c3c9524345</a>  |\n| uqc       | Uquid Coin                           | 18         | <a href=\"https://etherscan.io/token/0xd01db73e047855efb414e6202098c4be4cd2423b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd01db73e047855efb414e6202098c4be4cd2423b</a>  |\n| usdc      | USD Coin                             | 6          | <a href=\"https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48</a>  |\n| usdt      | Tether                               | 6          | <a href=\"https://etherscan.io/token/0xdac17f958d2ee523a2206206994597c13d831ec7\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdac17f958d2ee523a2206206994597c13d831ec7</a>  |\n| usdx      | eToro United States Dollar           | 18         | <a href=\"https://etherscan.io/token/0x4e3856c37b2fe7ff2fe34510cda82a1dffd63cd0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4e3856c37b2fe7ff2fe34510cda82a1dffd63cd0</a>  |\n| usg       | US Gold                              | 9          | <a href=\"https://etherscan.io/token/0x4000369acfa25c8fe5d17fe3312e30c332bef633\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4000369acfa25c8fe5d17fe3312e30c332bef633</a>  |\n| uspx      | USPX Token                           | 0          | <a href=\"https://etherscan.io/token/0x38d3d9abbdba8305ebb8b72996efe55bf785aed0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x38d3d9abbdba8305ebb8b72996efe55bf785aed0</a>  |\n| ust       | TerraUSD                             | 18         | <a href=\"https://etherscan.io/token/0xa47c8bf37f92abed4a126bda807a7b7498661acd\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa47c8bf37f92abed4a126bda807a7b7498661acd</a>  |\n| usx       | USD Stable Token                     | 18         | <a href=\"https://etherscan.io/token/0xe72f4c4ff9d294fc34829947e4371da306f90465\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe72f4c4ff9d294fc34829947e4371da306f90465</a>  |\n| utk       | UTrust                               | 18         | <a href=\"https://etherscan.io/token/0x70a72833d6bf7f508c8224ce59ea1ef3d0ea3a38\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x70a72833d6bf7f508c8224ce59ea1ef3d0ea3a38</a>  |\n| utk1      | UTrust Token                         | 18         | <a href=\"https://etherscan.io/token/0xdc9ac3c20d1ed0b540df9b1fedc10039df13f99c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xdc9ac3c20d1ed0b540df9b1fedc10039df13f99c</a>  |\n| valor     | ValorToken                           | 18         | <a href=\"https://etherscan.io/token/0x297e4e5e59ad72b1b0a2fd446929e76117be0e0a\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x297e4e5e59ad72b1b0a2fd446929e76117be0e0a</a>  |\n| vdx       | Vodi X                               | 18         | <a href=\"https://etherscan.io/token/0x91e64f39c1fe14492e8fdf5a8b0f305bd218c8a1\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x91e64f39c1fe14492e8fdf5a8b0f305bd218c8a1</a>  |\n| vega      | Vega Protocol                        | 18         | <a href=\"https://etherscan.io/token/0xcb84d72e61e383767c4dfeb2d8ff7f4fb89abc6e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xcb84d72e61e383767c4dfeb2d8ff7f4fb89abc6e</a>  |\n| visr      | Visor.Finance                        | 18         | <a href=\"https://etherscan.io/token/0xf938424f7210f31df2aee3011291b658f872e91e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf938424f7210f31df2aee3011291b658f872e91e</a>  |\n| vrgx      | VroomGo                              | 8          | <a href=\"https://etherscan.io/token/0x4861b1a0ead261897174fd849ca0f5154fcf2442\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4861b1a0ead261897174fd849ca0f5154fcf2442</a>  |\n| vsp       | Vesper Token                         | 18         | <a href=\"https://etherscan.io/token/0x1b40183efb4dd766f11bda7a7c3ad8982e998421\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1b40183efb4dd766f11bda7a7c3ad8982e998421</a>  |\n| vxc       | Vinx Coin                            | 18         | <a href=\"https://etherscan.io/token/0x14f0a12a43c36c49d4b403dd6e1a9b8222be456c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x14f0a12a43c36c49d4b403dd6e1a9b8222be456c</a>  |\n| wabi      | Tael Token                           | 18         | <a href=\"https://etherscan.io/token/0x286bda1413a2df81731d4930ce2f862a35a609fe\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x286bda1413a2df81731d4930ce2f862a35a609fe</a>  |\n| wafl      | Wafl Token                           | 18         | <a href=\"https://etherscan.io/token/0x3fee076a0f0218899b89fe7e3f54dd2dc18917e0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x3fee076a0f0218899b89fe7e3f54dd2dc18917e0</a>  |\n| wax       | Wax                                  | 8          | <a href=\"https://etherscan.io/token/0x39bb259f66e1c59d5abef88375979b4d20d98022\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x39bb259f66e1c59d5abef88375979b4d20d98022</a>  |\n| wbtc      | Wrapped Bitcoin                      | 8          | <a href=\"https://etherscan.io/token/0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2260fac5e5542a773aa44fbcfedf7c193bc2c599</a>  |\n| wcfg      | Wrapped Centrifuge                   | 18         | <a href=\"https://etherscan.io/token/0xc221b7e65ffc80de234bbb6667abdd46593d34f0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc221b7e65ffc80de234bbb6667abdd46593d34f0</a>  |\n| wec       | Whole Earth Coin                     | 18         | <a href=\"https://etherscan.io/token/0xcc1a8bd438bebc4b2a885a34475bb974f2124317\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xcc1a8bd438bebc4b2a885a34475bb974f2124317</a>  |\n| wet       | We Show Token                        | 18         | <a href=\"https://etherscan.io/token/0x36d10c6800d569bb8c4fe284a05ffe3b752f972c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x36d10c6800d569bb8c4fe284a05ffe3b752f972c</a>  |\n| weth      | Wrapped Ether                        | 18         | <a href=\"https://etherscan.io/token/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2</a>  |\n| whale     | WHALE                                | 4          | <a href=\"https://etherscan.io/token/0x9355372396e3f6daf13359b7b607a3374cc638e0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x9355372396e3f6daf13359b7b607a3374cc638e0</a>  |\n| wht       | Whatshalal                           | 18         | <a href=\"https://etherscan.io/token/0xae8d4da01658dd0ac118dde60f5b78042d0da7f2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xae8d4da01658dd0ac118dde60f5b78042d0da7f2</a>  |\n| wnxm      | Wrapped NXM                          | 18         | <a href=\"https://etherscan.io/token/0x0d438f3b5175bebc262bf23753c1e53d03432bde\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0d438f3b5175bebc262bf23753c1e53d03432bde</a>  |\n| wpx       | WalletPlusX                          | 18         | <a href=\"https://etherscan.io/token/0x4bb0a085db8cedf43344bd2fbec83c2c79c4e76b\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4bb0a085db8cedf43344bd2fbec83c2c79c4e76b</a>  |\n| wsteth    | Wrapped stETH                        | 18         | <a href=\"https://etherscan.io/token/0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0</a> |\n| wtc       | Walton Token                         | 18         | <a href=\"https://etherscan.io/token/0xb7cb1c96db6b22b0d3d9536e0108d062bd488f74\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb7cb1c96db6b22b0d3d9536e0108d062bd488f74</a>  |\n| wtk       | WadzPay Token                        | 18         | <a href=\"https://etherscan.io/token/0x4cff49d0a19ed6ff845a9122fa912abcfb1f68a6\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x4cff49d0a19ed6ff845a9122fa912abcfb1f68a6</a>  |\n| wxrp      | Wrapped XRP                          | 18         | <a href=\"https://etherscan.io/token/0x39fbbabf11738317a448031930706cd3e612e1b9\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x39fbbabf11738317a448031930706cd3e612e1b9</a>  |\n| wxrpv0    | Wrapped XRP v0                       | 6          | <a href=\"https://etherscan.io/token/0xda7e5a3841550a5ba271dcc76a885af902142dfc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xda7e5a3841550a5ba271dcc76a885af902142dfc</a>  |\n| wluna     | Wrapped LUNA                         | 18         | <a href=\"https://etherscan.io/token/0xd2877702675e6ceb975b4a1dff9fb7baf4c91ea9\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xd2877702675e6ceb975b4a1dff9fb7baf4c91ea9</a>  |\n| wlxt      | Wallex Token                         | 18         | <a href=\"https://etherscan.io/token/0x1fd389ac8e6c958b0f01067540fdff8a11488201\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1fd389ac8e6c958b0f01067540fdff8a11488201</a>  |\n| wxt       | Wirex                                | 18         | <a href=\"https://etherscan.io/token/0xa02120696c7b8fe16c09c749e4598819b2b0e915\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa02120696c7b8fe16c09c749e4598819b2b0e915</a>  |\n| wild      | Wilder World                         | 18         | <a href=\"https://etherscan.io/token/0x2a3bff78b79a009976eea096a51a948a3dc00e34\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2a3bff78b79a009976eea096a51a948a3dc00e34</a>  |\n| xaud      | XAUD Token                           | 5          | <a href=\"https://etherscan.io/token/0x1185a1b58bdd774a36cc9598c5e3531dfeb1b736\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1185a1b58bdd774a36cc9598c5e3531dfeb1b736</a>  |\n| xbgold    | XBullion Token                       | 8          | <a href=\"https://etherscan.io/token/0x670f9d9a26d3d42030794ff035d35a67aa092ead\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x670f9d9a26d3d42030794ff035d35a67aa092ead</a>  |\n| xcd       | CapdaxToken                          | 18         | <a href=\"https://etherscan.io/token/0xca00bc15f67ebea4b20dfaaa847cace113cc5501\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xca00bc15f67ebea4b20dfaaa847cace113cc5501</a>  |\n| xex       | Cross Exchange Token                 | 18         | <a href=\"https://etherscan.io/token/0xbf68b3756f82b522588511da682dfd7e3bf34dee\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xbf68b3756f82b522588511da682dfd7e3bf34dee</a>  |\n| xrl       | Rialto                               | 9          | <a href=\"https://etherscan.io/token/0xb24754be79281553dc1adc160ddf5cd9b74361a4\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xb24754be79281553dc1adc160ddf5cd9b74361a4</a>  |\n| xsgd      | StraitsX                             | 6          | <a href=\"https://etherscan.io/token/0x70e8de73ce538da2beed35d14187f6959a8eca96\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x70e8de73ce538da2beed35d14187f6959a8eca96</a>  |\n| xsushi    | xSUSHI                               | 18         | <a href=\"https://etherscan.io/token/0x8798249c2e607446efb7ad49ec89dd1865ff4272\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x8798249c2e607446efb7ad49ec89dd1865ff4272</a>  |\n| xtp       | Tap                                  | 18         | <a href=\"https://etherscan.io/token/0x6368e1e18c4c419ddfc608a0bed1ccb87b9250fc\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x6368e1e18c4c419ddfc608a0bed1ccb87b9250fc</a>  |\n| yfdai     | Yfdai.Finance                        | 18         | <a href=\"https://etherscan.io/token/0xf4cd3d3fda8d7fd6c5a500203e38640a70bf9577\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf4cd3d3fda8d7fd6c5a500203e38640a70bf9577</a>  |\n| yfi       | Yearn.Finance                        | 18         | <a href=\"https://etherscan.io/token/0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e</a>  |\n| yfii      | YFII.Finance                         | 18         | <a href=\"https://etherscan.io/token/0xa1d0e215a23d7030842fc67ce582a6afa3ccab83\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa1d0e215a23d7030842fc67ce582a6afa3ccab83</a>  |\n| ygg       | Yield Guild Games                    | 18         | <a href=\"https://etherscan.io/token/0x25f8087ead173b73d6e8b84329989a8eea16cf73\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x25f8087ead173b73d6e8b84329989a8eea16cf73</a>  |\n| yld       | Yld                                  | 18         | <a href=\"https://etherscan.io/token/0xf94b5c5651c888d928439ab6514b93944eee6f48\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf94b5c5651c888d928439ab6514b93944eee6f48</a>  |\n| yng       | Young Token                          | 18         | <a href=\"https://etherscan.io/token/0xa26cbb76156090f4b40a1799a220fc4c946afb3c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xa26cbb76156090f4b40a1799a220fc4c946afb3c</a>  |\n| ysey      | YSEY Utility Token                   | 3          | <a href=\"https://etherscan.io/token/0x1358efe5d9bfc2005918c0b2f220a4345c9ee7a3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x1358efe5d9bfc2005918c0b2f220a4345c9ee7a3</a>  |\n| zarx      | eToro South African Rand             | 18         | <a href=\"https://etherscan.io/token/0x29ec3ff4e1dcad5a207dbd5d14e48073abba0bd3\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x29ec3ff4e1dcad5a207dbd5d14e48073abba0bd3</a>  |\n| zco       | Zebi Coin                            | 8          | <a href=\"https://etherscan.io/token/0x2008e3057bd734e10ad13c9eae45ff132abc1722\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x2008e3057bd734e10ad13c9eae45ff132abc1722</a>  |\n| zil       | Zilliqa                              | 12         | <a href=\"https://etherscan.io/token/0x05f4a42e251f2d52b8ed15e9fedaacfcef1fad27\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x05f4a42e251f2d52b8ed15e9fedaacfcef1fad27</a>  |\n| zix       | Zeex Token                           | 18         | <a href=\"https://etherscan.io/token/0xf3c092ca8cd6d3d4ca004dc1d0f1fe8ccab53599\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xf3c092ca8cd6d3d4ca004dc1d0f1fe8ccab53599</a>  |\n| zlw       | Zelwin                               | 18         | <a href=\"https://etherscan.io/token/0x5319e86f0e41a06e49eb37046b8c11d78bcad68c\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x5319e86f0e41a06e49eb37046b8c11d78bcad68c</a>  |\n| zmt       | Zipmex Token                         | 18         | <a href=\"https://etherscan.io/token/0xaa602de53347579f86b996d2add74bb6f79462b2\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xaa602de53347579f86b996d2add74bb6f79462b2</a>  |\n| zoom      | CoinZoom                             | 18         | <a href=\"https://etherscan.io/token/0x69cf3091c91eb72db05e45c76e58225177dea742\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0x69cf3091c91eb72db05e45c76e58225177dea742</a>  |\n| zrx       | 0x Token                             | 18         | <a href=\"https://etherscan.io/token/0xe41d2489571d322189246dafa5ebde1f4699f498\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xe41d2489571d322189246dafa5ebde1f4699f498</a>  |\n| zusd      | Z.com Usd                            | 6          | <a href=\"https://etherscan.io/token/0xc56c2b7e71b54d38aab6d52e94a04cbfa8f604fa\" target=“_blank” rel=“noreferrer”>https://etherscan.io/token/0xc56c2b7e71b54d38aab6d52e94a04cbfa8f604fa</a>  |\n\n<!--{# Uncomment to put tokens in a collapsible table\n</details>\n#}-->\n\n## Test Ethereum - TERC20 Tokens\n\nTERC20 tokens can be accessed on different Testnets with the following identifiers.\n\n| Testnet         | Token Id   | Token Name                         | Precision | Contract Details                                                                                                                                             |\n| :-------------- | :--------- | :--------------------------------- | :-------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Ethereum Goerli | fixed      | Goerli Example Fixed Supply Token  | 18        | <a href=\"https://goerli.etherscan.io/token/0xa13de8df4ef9d6016f0826858d48045848429390\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xa13de8df4ef9d6016f0826858d48045848429390</a> |\n| Ethereum Goerli | gterc2dp   | Goerli ERC20 Token 2 Decimals      | 2         | <a href=\"https://goerli.etherscan.io/token/0xe19e232e942cde4320b6354646cbb1336ae732c7\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xe19e232e942cde4320b6354646cbb1336ae732c7</a> |\n| Ethereum Goerli | gterc6dp   | Goerli ERC20 Token 6 Decimals      | 6         | <a href=\"https://goerli.etherscan.io/token/0xe7afa17e6e5257806d2309b01e6de320668ec3dc\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xe7afa17e6e5257806d2309b01e6de320668ec3dc</a> |\n| Ethereum Goerli | gterc18dp  | Goerli ERC20 Token 18 Decimals     | 18        | <a href=\"https://goerli.etherscan.io/token/0x61d54356be035944a3868eaa9556353b7150699d\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x61d54356be035944a3868eaa9556353b7150699d</a> |\n| Ethereum Goerli | gtaave18dp | Goerli Test AAVE Token 18 Decimals | 18        | <a href=\"https://goerli.etherscan.io/token/0x631d5e3c45a459e8f98b9d6a2734fce7b051f845\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x631d5e3c45a459e8f98b9d6a2734fce7b051f845</a> |\n| Ethereum Goerli | gtbat18dp  | Goerli Test BAT Token 18 Decimals  | 18        | <a href=\"https://goerli.etherscan.io/token/0x95458b26c8b524eb5ef92c7a1759ede6224bef2e\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x95458b26c8b524eb5ef92c7a1759ede6224bef2e</a> |\n| Ethereum Goerli | gtcomp18dp | Goerli Test COMP Token 18 Decimals | 18        | <a href=\"https://goerli.etherscan.io/token/0xa1ff97c394b25926acb09d12bacf0613055a2727\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xa1ff97c394b25926acb09d12bacf0613055a2727</a> |\n| Ethereum Goerli | gtgrt18dp  | Goerli Test GRT Token 18 Decimals  | 18        | <a href=\"https://goerli.etherscan.io/token/0x1441f298d1f15084a0e5c714c966033e39597de7\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x1441f298d1f15084a0e5c714c966033e39597de7</a> |\n| Ethereum Goerli | gtlink18dp | Goerli Test LINK Token 18 Decimals | 18        | <a href=\"https://goerli.etherscan.io/token/0xfe4537ff71aef28592c5c7331ed4b20f276d770b\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xfe4537ff71aef28592c5c7331ed4b20f276d770b</a> |\n| Ethereum Goerli | gtmkr18dp  | Goerli Test MKR Token 18 Decimals  | 18        | <a href=\"https://goerli.etherscan.io/token/0xf84e8207e4dc846e250208a6e4b05aa3e7ab00c6\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xf84e8207e4dc846e250208a6e4b05aa3e7ab00c6</a> |\n| Ethereum Goerli | gtsnx18dp  | Goerli Test SNX1 Token 18 Decimals | 18        | <a href=\"https://goerli.etherscan.io/token/0x50608a26bff103290a4a47b152395047801e9280\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x50608a26bff103290a4a47b152395047801e9280</a> |\n| Ethereum Goerli | gtuni18dp  | Goerli Test UNI Token 18 Decimals  | 18        | <a href=\"https://goerli.etherscan.io/token/0x6be1a99c215872cea33217b0f4bad63f186ddfac\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x6be1a99c215872cea33217b0f4bad63f186ddfac</a> |\n| Ethereum Goerli | gtusdt6dp  | Goerli Test USDT Token 6 Decimals  | 6         | <a href=\"https://goerli.etherscan.io/token/0x51445dcddf5246229bae8c0ba3ea462e63038641\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x51445dcddf5246229bae8c0ba3ea462e63038641</a> |\n| Ethereum Goerli | gtyfi18dp  | Goerli Test YFI Token 18 Decimals  | 18        | <a href=\"https://goerli.etherscan.io/token/0xf4755c1a9aaad9d6b919edb8346ce9b46d066be4\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xf4755c1a9aaad9d6b919edb8346ce9b46d066be4</a> |\n| Ethereum Goerli | gtwbtc8dp  | Goerli Test WBTC Token 8 Decimals  | 8         | <a href=\"https://goerli.etherscan.io/token/0xd4bccebe77b7c1da89818f8889e3ea09046e7e38\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xd4bccebe77b7c1da89818f8889e3ea09046e7e38</a> |\n| Ethereum Goerli | ghcn       | Himalayan Coin                     | 18        | <a href=\"https://goerli.etherscan.io/token/0xa05e3efe2771cd04191f3eadb9a99ba3b4bf9d26\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xa05e3efe2771cd04191f3eadb9a99ba3b4bf9d26</a> |\n| Ethereum Goerli | ghdo       | Himalayan Dollar                   | 18        | <a href=\"https://goerli.etherscan.io/token/0x5426635915740813092eeff72158bc492799da5f\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x5426635915740813092eeff72158bc492799da5f</a> |\n| Ethereum Goerli | gusdt      | Goerli USDT                        | 18        | <a href=\"https://goerli.etherscan.io/token/0x64d081854fad45e64db52cd28ba78ae1ecfee59b\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x64d081854fad45e64db52cd28ba78ae1ecfee59b</a> |\n| Ethereum Goerli | terc2dp1   | Test ERC Token 2 Decimals          | 2         | <a href=\"https://goerli.etherscan.io/token/0xceef48d58cc3a51d8b6df155633007415b9bae01\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xceef48d58cc3a51d8b6df155633007415b9bae01</a> |\n| Ethereum Goerli | terc2dp2   | Test ERC Token 2 Decimals          | 2         | <a href=\"https://goerli.etherscan.io/token/0x168AE5b381F7C317AC6EF2161c6e5fcC0e0de41e\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x168AE5b381F7C317AC6EF2161c6e5fcC0e0de41e</a> |\n| Ethereum Goerli | terc2dp3   | Test ERC Token 2 Decimals          | 2         | <a href=\"https://goerli.etherscan.io/token/0x12cb9d6127ac74847cc444e6661cfd1b5107bd26\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x12cb9d6127ac74847cc444e6661cfd1b5107bd26</a> |\n| Ethereum Goerli | terc2dp4   | Test ERC Token 2 Decimals          | 2         | <a href=\"https://goerli.etherscan.io/token/0x458fdef6e1e58614d82f3116d8ca1f23419cb8c0\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x458fdef6e1e58614d82f3116d8ca1f23419cb8c0</a> |\n| Ethereum Goerli | terc2dp5   | Test ERC Token 2 Decimals          | 2         | <a href=\"https://goerli.etherscan.io/token/0xf44c85bf1d556a8268a1212cf0b9248af4f238bd\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xf44c85bf1d556a8268a1212cf0b9248af4f238bd</a> |\n| Ethereum Goerli | terc6dp1   | Test ERC Token 6 Decimals          | 6         | <a href=\"https://goerli.etherscan.io/token/0x3b9f958f0ba34aa103fabb054f29400703470bac\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x3b9f958f0ba34aa103fabb054f29400703470bac</a> |\n| Ethereum Goerli | terc6dp2   | Test ERC Token 6 Decimals          | 6         | <a href=\"https://goerli.etherscan.io/token/0x2508d109a0cd87e597a1de071325f5cf56d4639a\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x2508d109a0cd87e597a1de071325f5cf56d4639a</a> |\n| Ethereum Goerli | terc6dp3   | Test ERC Token 6 Decimals          | 6         | <a href=\"https://goerli.etherscan.io/token/0xdda2375104ee9a97e1d7aa4bc48ede2c4c6ddf48\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xdda2375104ee9a97e1d7aa4bc48ede2c4c6ddf48</a> |\n| Ethereum Goerli | terc6dp4   | Test ERC Token 6 Decimals          | 6         | <a href=\"https://goerli.etherscan.io/token/0x06c1f1195c59ec5f318d12d4cc2d1f9d45261756\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x06c1f1195c59ec5f318d12d4cc2d1f9d45261756</a> |\n| Ethereum Goerli | terc6dp5   | Test ERC Token 6 Decimals          | 6         | <a href=\"https://goerli.etherscan.io/token/0x3326af8eeb6d4ce1f1f0652fcb3d5e07cd9c1039\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x3326af8eeb6d4ce1f1f0652fcb3d5e07cd9c1039</a> |\n| Ethereum Goerli | terc18dp1   | Test ERC Token 18 Decimals        | 18        | <a href=\"https://goerli.etherscan.io/token/0x9f77b76e6866b3f5dd99382c96f16eddabc0b78e\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x9f77b76e6866b3f5dd99382c96f16eddabc0b78e</a> |\n| Ethereum Goerli | terc18dp2   | Test ERC Token 18 Decimals        | 18        | <a href=\"https://goerli.etherscan.io/token/0x18b17853ff62122c60f113b8b8967243c39ad30e\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x18b17853ff62122c60f113b8b8967243c39ad30e</a> |\n| Ethereum Goerli | terc18dp3   | Test ERC Token 18 Decimals        | 18        | <a href=\"https://goerli.etherscan.io/token/0x96f13e2ea4b738380922dd9f5cd8fcf0416e5f2d\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x96f13e2ea4b738380922dd9f5cd8fcf0416e5f2d</a> |\n| Ethereum Goerli | terc18dp4   | Test ERC Token 18 Decimals        | 18        | <a href=\"https://goerli.etherscan.io/token/0xbecf20f89b6898bd8bbf3fa93fb4bcda367b9594\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xbecf20f89b6898bd8bbf3fa93fb4bcda367b9594</a> |\n| Ethereum Goerli | terc18dp5   | Test ERC Token 18 Decimals        | 18        | <a href=\"https://goerli.etherscan.io/token/0x4464fe55f9a8aea46e02c4a22b4d74661805ec26\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x4464fe55f9a8aea46e02c4a22b4d74661805ec26</a> |\n| Ethereum Goerli | terc18dp6   | Test ERC Token 18 Decimals        | 18        | <a href=\"https://goerli.etherscan.io/token/0x998ddfd1ac3ed76fc163528c5fc69b8d67fa5395\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x998ddfd1ac3ed76fc163528c5fc69b8d67fa5395</a> |\n| Ethereum Goerli | terc18dp7   | Test ERC Token 18 Decimals        | 18        | <a href=\"https://goerli.etherscan.io/token/0xf2555ac243ab2606fa71e2f2728117054dd1867b\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xf2555ac243ab2606fa71e2f2728117054dd1867b</a> |\n| Ethereum Goerli | terc18dp8   | Test ERC Token 18 Decimals        | 18        | <a href=\"https://goerli.etherscan.io/token/0xd9da1e909e3b4b2c1ec31b702bef0bf1e42533e4\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xd9da1e909e3b4b2c1ec31b702bef0bf1e42533e4</a> |\n| Ethereum Goerli | terc18dp9   | Test ERC Token 18 Decimals        | 18        | <a href=\"https://goerli.etherscan.io/token/0xb91be6a36b60c4576aff75a50d2b7c762349ddec\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xb91be6a36b60c4576aff75a50d2b7c762349ddec</a> |\n| Ethereum Goerli | terc18dp10   | Test ERC Token 18 Decimals       | 18        | <a href=\"https://goerli.etherscan.io/token/0xc53d2c04795a1cef22a91c9d52c04f5082bb5631\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xc53d2c04795a1cef22a91c9d52c04f5082bb5631</a> |\n| Ethereum Goerli | terc18dp11   | Test ERC Token 18 Decimals       | 18        | <a href=\"https://goerli.etherscan.io/token/0xc325d7f188dc6015f45d3d39e58c5404e79b5cb9\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xc325d7f188dc6015f45d3d39e58c5404e79b5cb9</a> |\n| Ethereum Goerli | terc18dp12   | Test ERC Token 18 Decimals       | 18        | <a href=\"https://goerli.etherscan.io/token/0x7a8f375798284920cd27d1c757ceca3675603ab1\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x7a8f375798284920cd27d1c757ceca3675603ab1</a> |\n| Ethereum Goerli | terc18dp13   | Test ERC Token 18 Decimals       | 18        | <a href=\"https://goerli.etherscan.io/token/0x2e3f4bf47e4ea53a7a94f0597b47fe3caab78b0d\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x2e3f4bf47e4ea53a7a94f0597b47fe3caab78b0d</a> |\n| Ethereum Goerli | terc18dp14   | Test ERC Token 18 Decimals       | 18        | <a href=\"https://goerli.etherscan.io/token/0x4f369aa78b9f299cb50ad4d96e13bdfbd8be7239\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x4f369aa78b9f299cb50ad4d96e13bdfbd8be7239</a> |\n| Ethereum Goerli | terc18dp15   | Test ERC Token 18 Decimals       | 18        | <a href=\"https://goerli.etherscan.io/token/0x0fcb9bc4c67d502a45a07f514638ca8f83ba2912\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x0fcb9bc4c67d502a45a07f514638ca8f83ba2912</a> |\n| Ethereum Goerli | teuroc       | Test Euro Coin                   | 6        | <a href=\"https://goerli.etherscan.io/token/0xa683d909e996052955500ddc45ca13e25c76e286\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0xa683d909e996052955500ddc45ca13e25c76e286</a> |\n| Ethereum Goerli | tmatic     | Test Polygon                       | 18        | <a href=\"https://goerli.etherscan.io/token/0x499d11e0b6eac7c0593d8fb292dcbbf815fb29ae\" target=“_blank” rel=“noreferrer”>https://goerli.etherscan.io/token/0x499d11e0b6eac7c0593d8fb292dcbbf815fb29ae</a> |\n| Ethereum Kovan  | schz       | SchnauzerCoin                      | 18        | <a href=\"https://kovan.etherscan.io/token/0x050e25a2630b2aee94546589fd39785254de112c\" target=“_blank” rel=“noreferrer”>https://kovan.etherscan.io/token/0x050e25a2630b2aee94546589fd39785254de112c</a>   |\n| Ethereum Kovan  | terc20     | Test ERC20 Token                   | 18        | <a href=\"https://kovan.etherscan.io/token/0x731a10897d267e19b34503ad902d0a29173ba4b1\" target=“_blank” rel=“noreferrer”>https://kovan.etherscan.io/token/0x731a10897d267e19b34503ad902d0a29173ba4b1</a>   |\n| Ethereum Kovan  | terc2dp    | Test ERC20 Token 2 Decimals        | 2         | <a href=\"https://kovan.etherscan.io/token/0x107295c724c29553f51c5373b959f947065e6445\" target=“_blank” rel=“noreferrer”>https://kovan.etherscan.io/token/0x107295c724c29553f51c5373b959f947065e6445</a>   |\n| Ethereum Kovan  | terc6dp    | Test ERC20 Token 6 Decimals        | 6         | <a href=\"https://kovan.etherscan.io/token/0x4fcae60b370e5e523d18ba1fdf3bae46de88ac70\" target=“_blank” rel=“noreferrer”>https://kovan.etherscan.io/token/0x4fcae60b370e5e523d18ba1fdf3bae46de88ac70</a>   |\n| Ethereum Kovan  | terc18dp   | Test ERC20 Token 18 Decimals       | 18        | <a href=\"https://kovan.etherscan.io/token/0xd1e7cd06a5c81af9307cf3162f0fe740a0a69d25\" target=“_blank” rel=“noreferrer”>https://kovan.etherscan.io/token/0xd1e7cd06a5c81af9307cf3162f0fe740a0a69d25</a>   |\n\n### Wallet functionality\n\nUnlike Ether, ERC20 tokens do not have the full functionality of a wallet. You cannot create wallets, create/list/get\nreceive addresses, or share wallets for ERC20 tokens.\n\nTo retrieve token details associated with an Ethereum wallet, such as balance, pending approvals, policies, and\nwebhooks, set the `allTokens` parameter to true with the following calls:\n\n1.  [Get Wallet](#operation/v2.wallet.get)\n2.  [List Wallets](#operation/v2.wallet.list)\n3.  [List Pending Approvals](#operation/v2.approval.list)\n4.  [List Wallet Webhooks](#operation/v2.wallet.listwebhooks)\n5.  [List Transfers](#operation/v2.internal.listtransfers)\n6.  [Add Wallet Webhook](#operation/v2.wallet.addwebhook)\n\n### Keychains\n\nERC20 tokens do not have a direct association with keys or keychains. Instead, all tokens share the same keys/keychains\nthat belong to the Ethereum wallet.\n\n### Balances\n\nEach token has a different divisibility factor which is specified in the token contract. This value is usually\n1,000,000,000,000,000,000 (<code>10<sup>18</sup></code>) units, but can vary from token to token. Check the\n[client constants](#client-constants) to see the number of decimal places the token supports.\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n### Transactions\n\nBitGo's Ethereum multisig contract currently only supports one sender and one recipient. That means that the `sendMany`\ncall only accepts one recipient for tokens.\n\n### ERC20 Tokens Webhooks\n\nBy setting the `allTokens` parameter to true, a generic webhook is created which triggers on all ERC20 token and ETH\ntransactions. It sends an HTPP request to your webhook URL and specifies whether it is Ethereum or a token using the\nfield \"coin\".\n\nHere's an example response for a test token called \"terc\".\n\n```\n{\n    \"hash\":\"0x3e00ae17961d3d42ae722085904ba84e63a32b005ff46afff28b7c9c76f63291\",\n    \"transfer\":\"5b612d25c9067f2a1db11a15f165989e\",\n    \"coin\":\"terc\",\n    \"type\":\"transfer\",\n    \"state\":\"confirmed\",\n    \"wallet\":\"5a13adcab70f2c284fdd9682db5e6d64\"\n}\n```\n\nTo get additional details about this transfer, you need to get the transfer details using the token name and transfer\nid. For the above transfer you'd need to call the [Get Transfer](#operation/v2.wallet.gettransfer) route to check the\namount transferred and other details (e.g.\n`/api/v2/terc/wallet/5a13adcab70f2c284fdd9682db5e6d64/transfer/5b612d25c9067f2a1db11a15f165989e`).\n\n> Note: Transactions that send both Ethereum and ERC20 tokens (or multiple token types)\n> [supported by BitGo](#section/Ethereum-ERC20-Tokens) generate one webhook notification for each.\n\n## Hedera Hashgraph\n\nHedera (HBAR) can be accessed with the following coin types:\n\n| Environment       | Coin Type | Faucet                                                                   |\n| :---------------- | :-------- | :----------------------------------------------------------------------- |\n| Hedera Production | hbar      | <a href=\"https://portal.hedera.com/register\" target=“_blank” rel=“noreferrer”>https://portal.hedera.com/register</a> |\n| Hedera Testnet    | thbar     | <a href=\"https://portal.hedera.com/register\" target=“_blank” rel=“noreferrer”>https://portal.hedera.com/register</a> |\n\n### Generating wallets\n\nTo create a HBAR wallet using BitGoJS:\n\n```javascript\nbitgo\n  .coin('thbar')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n\n    // print the new wallets address to send to\n    console.dir(wallet.coinSpecific.baseAddress);\n  });\n```\n\nCreating HBAR wallets is restricted to enterprise customers. In production, there is limit of 100 wallets total per\nenterprise. In testnet, there is no limit.\n\n> **Note:** To inquire about increasing your limit, contact BitGo at support@bitgo.com.\n\nBefore you can use an HBAR wallet, it must be initialized on the Hedera blockchain. A funding transaction must first be\nsent to the wallet's address. When BitGo detects this funding transaction, it automatically sends another initialization\ntransaction to set up the signers and the home domain of the account. There is a fee associated with creating HBAR\nwallets that BitGo covers for the user.\n\nUntil the initialization transaction is confirmed, the wallet is _not_ ready for use, and the receive address is _not_\nexposed in the API. This is to protect users from losing funds by sending to a wallet that does not exist on the\nnetwork.\n\n> **Warning:** Do not use an HBAR wallet while it is being initialized or you may lose funds.\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/thbar/wallet/generate\n```\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('thbar')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/thbar/wallet/$WALLET/address\n```\n\nHBAR receive addresses are defined as a memo which can be attached to a transaction. For each BitGo wallet, an\nincrementing string number value is used as the memo. Whenever a new address is created, the incremented `memoId` and is\nreturned in the `coinSpecific` property of the address.\n\n### Balances\n\nHBAR (HBAR) is the native asset of the Hedera blockchain. The base unit of HBAR is tinybar:\n\n- 1 tinybar is (<code>10<sup>-8</sup></code>) or 0.00000001 HBAR.\n- 1 HBAR is (<code>10<sup>8</sup></code>) or 100000000 tinybars (100 million).\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n## Litecoin\n\nLitecoin can be accessed with the following coin types:\n\n| Environment         | Coin Type | Faucet                                                                 |\n| :------------------ | :-------- | :--------------------------------------------------------------------- |\n| Litecoin Production | ltc       |                                                                        |\n| Litecoin Testnet    | tltc      | <a href=\"http://testnet.litecointools.com/\" target=“_blank” rel=“noreferrer”>http://testnet.litecointools.com/</a> |\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('tltc')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/tltc/wallet/generate\n```\n\nFor Litecoin, BitGo uses the same 2-of-3 multisig P2SH scheme as for Bitcoin, with the keys in the order of User, Backup\nand BitGo respectively.\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('tltc')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tltc/wallet/$WALLET/address\n```\n\n> See the table of address types under [Address Derivation (BIP-32)](#address-derivation-bip-32) above. Litecoin\n> defaults to chain 0.\n\n### Converting addresses\n\n```javascript\nbitgo.coin('ltc').canonicalAddress('3GBygsGPvTdfKMbq4AKZZRu1sPMWPEsBfd', 2);\n// MNQ7zkgMsaV67rsjA3JuP59RC5wxRXpwgE\n\nbitgo.coin('ltc').canonicalAddress('3GBygsGPvTdfKMbq4AKZZRu1sPMWPEsBfd', 1);\nbitgo.coin('ltc').canonicalAddress('MNQ7zkgMsaV67rsjA3JuP59RC5wxRXpwgE', 1);\n// 3GBygsGPvTdfKMbq4AKZZRu1sPMWPEsBfd\n```\n\n```shell\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d \"{ \\\"address\\\": \\\"3GBygsGPvTdfKMbq4AKZZRu1sPMWPEsBfd\\\", \\\"scriptHashVersion\\\": 2 }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/ltc/canonicaladdress\n# MNQ7zkgMsaV67rsjA3JuP59RC5wxRXpwgE\n```\n\nLitecoin used to support the same P2SH address format as Bitcoin, but switched to other version identifiers. This is why\nsome Litecoin addresses start with `3` and some with `M`. Both addresses are the same.\n\nFor incoming transactions, BitGo converts each address that start with `3` to one that starts with `M`. For outgoing\ntransactions, BitGo only accepts the new address format.\n\n> In testnet, the new P2SH addresses start with `Q`, so the corresponding conversion could be between\n> `2MsFGJvxH1kCoRp3XEYvKduAjY6eYz9PJHz` and `QLc2RwpX2rFtZzoZrexLibcAgV6Nsg74Jn`.\n\n#### Method\n\n`bitgo.coin('ltc').canonicalAddress(address, scriptHashVersion)`\n\n`bitgo.coin('tltc').canonicalAddress(address, scriptHashVersion)`\n\n#### HTTP Request\n\n`POST /api/v2/:coin/canonicaladdress`\n\n#### Function Arguments\n\n| Parameter         | Type    | Required | Description                                               |\n| :---------------- | :------ | :------- | :-------------------------------------------------------- |\n| address           | String  | Yes      | The address string to convert                             |\n| scriptHashVersion | Integer | No       | `1` for old address format, `2` for new. Defaults to `2`. |\n\n### Balances\n\nLitecoin (LTC) is the native asset of the Litecoin blockchain. The base unit of Litecoin is microlitecoin:\n\n- 1 microlitecoin is (<code>10<sup>-8</sup></code>) or 0.00000001 Litecoin.\n- 1 Litecoin is (<code>10<sup>8</sup></code>) or 100000000 microlitecoins (100 million).\n\nBalances are supported in string and number format but string is recommended to ensure values do not exceed the\nprogrammable number limit: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n<!--{#\n## Polkadot\n\nPolkadot can be accessed with the following coin types:\n\n| Environment | Coin Type | Faucet |\n|:----------- |:--------- |:------ |\n|             | DOT       |        |\n\n### Generating wallets\n\n```javascript\n```\n\n```shell\n```\n\n### Creating addresses\n\n```javascript\n```\n\n```shell\n``\n#}-->\n\n## RSK Smart Bitcoin\n\n> Note: RSK was formely known as Rootstock\n\nRSK Smart Bitcoincan be accessed with the following coin types:\n\n| Environment    | Coin Type | Faucet                                           |\n| :------------- | :-------- | :----------------------------------------------- |\n| RSK Production | rbtc      |                                                  |\n| RSK Testnet    | trbtc     | <a href=\"https://faucet.rsk.co/\" target=“_blank” rel=“noreferrer”>https://faucet.rsk.co/</a> |\n\n### Enterprise fee address\n\n```shell\nENTERPRISEID=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/trbtc/enterprise/$ENTERPRISEID/feeAddressBalance\n```\n\nRSK uses the same fee address structure as Ethereum.\n\nEach enterprise has a fee address which will be used to pay for transaction fees on all RSK wallets in that enterprise.\nThe fee address is displayed in the dashboard of the BitGo website, and you must fund it before creating a wallet,\naddress, or sending a transaction. If the enterprise's fee address runs out of funds, you will not be able to create new\nwallets, addresses, or send transactions until you fund the fee address. You will not be able to use one of your own RSK\nwallets to fund the fee address if the fee address is too low (because you will not be able to send transactions from\nyour RSK wallet). I It is best to create and fund a non-BitGo RSK account, so you can use it to fund your BitGo\nenterprise fee address. Any open source RSK wallet can be used to create an account.\n\nNote that the fee address is a single-signature account, and the private key is created and owned by BitGo. You will not\nbe able to send funds out of the fee address once you have sent them in.\n\nThere will be a `feeAddress` field under the `CoinSpecific` key for RSK wallets. You will use this address to pay the\nfees for creating transactions and addresses.\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('trbtc')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n    enterprise: '5612c2beeecf83610b621b90964448cd',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/trbtc/wallet/generate\n```\n\nBefore you can use an RSK wallet, it must be initialized on the RSK blockchain. When you create an RSK wallet, BitGo\nsends a transaction on the RSK network in order to generate the wallet.\n\nUntil the initialization transaction is confirmed, the wallet is _not_ ready for use, and the receive address is _not_\nexposed in the API. This is to protect users from losing funds by sending to a wallet that does not exist on the\nnetwork.\n\n> **Warning:** Do not use an RSK wallet while it is being initialized or you may lose funds.\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('trbtc')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/trbtc/wallet/$WALLET/address\n```\n\nRSK address creation requires interactions with the RSK blockchain. In order to deploy a receive address contract, BitGo\nsends a transaction on the RSK network. Make sure to fund the fee address mentioned above. Like the wallet creation\nprocess, a RSK address will not be immediately usable upon creation and so the caller of this function will have to wait\nfor the initialization transaction to be confirmed before attempting to fetch, or send to, the address.\n\n### Balances\n\nSmart Bitcoin (RBTC) is the native asset of the RSK blockchain and is pegged 1:1 to BTC. RSK is a smart-contract\ncompatible Bitcoin sidechain and uses the Ethereum Virtual Machine (EVM).\n\nRBTC is used to pay for RSK gas fees like Ether is used to pay for Ethereum gas fees. The base unit of Smart Bitcoin is\nwei:\n\n- 1 wei is (<code>10<sup>-18</sup></code>) or 0.000000000000000001 RSK.\n- 1 RSK is (<code>10<sup>18</sup></code>) or 1000000000000000000 wei (1 quintillion).\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n### Transactions\n\nBitGo's RSK multisig contract currently only supports one sender and one recipient. That means that the `sendMany` call\nwill only accept one recipient.\n\n<!--{#\n## Solana\n\nSolana can be accessed with the following coin types:\n\n| Environment | Coin Type | Faucet |\n|:----------- |:--------- |:------ |\n|             | SOL       |        |\n\n### Generating wallets\n\n```javascript\n```\n\n```shell\n```\n\n### Creating addresses\n\n```javascript\n```\n\n```shell\n``\n#}-->\n\n## Stacks\n\n<a href=\"https://docs.stacks.co/\" target=“_blank” rel=“noreferrer”>Stacks</a> can be accessed with the following coin types:\n\n| Environment    | Coin Type | Faucet                                                                                                             |\n| :------------- | :-------- | :----------------------------------------------------------------------------------------------------------------- |\n| STX Production | stx       |                                                                                                                    |\n| STX Testnet    | tstx      | <a href=\"https://docs.stacks.co/understand-stacks/testnet#faucet\" target=“_blank” rel=“noreferrer”>https://docs.stacks.co/understand-stacks/testnet#faucet</a> |\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('tstx')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/tbtc/wallet/generate\n```\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('tstx')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tstx/wallet/$WALLET/address\n```\n\n### Balances\n\n<a href=\"https://docs.stacks.co/understand-stacks/network#tokens\" target=“_blank” rel=“noreferrer”>Stacks</a> Stacks (STX) is the native asset of the Stacks\nblockchain. It is called a \"token,\" but as a layer-1 asset it is treated here as a coin. The base unit of STX is a\nmicro-STX:\n\n- 1 micro-STX is (<code>10<sup>-6</sup></code>) or 0.000001 STX.\n- 1 STX is (<code>10<sup>6</sup></code>) or 1000000 micro-STX (1 million).\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n### Fee rate\n\n<a href=\"https://docs.stacks.co/understand-stacks/network#fees\" target=“_blank” rel=“noreferrer”>Fees</a> fees are calculated based on the estimate fee rate and the\nsize of the raw transaction in bytes. The fee rate is a market determined variable. For the testnet, it is set to 1\nmicro-STX.\n\n### Set the fee manually\n\nIn order to set the fee manually, add `feeRate` param to the body of the request.\n\nExample for single recipient transfer:\n\n```javascript\n{\n    recipients: [{\n        amount: amount, //string - amount in micro-stx\n        address: receiverAddress, //string\n    }],\n    feeRate: 500000 // amount in micro-stx as number or string, equal to 0.5 STX\n}\n```\n\n### Send-Many: send to multiple recipients\n\nStacks doesnt provide a native funtionality to send to many recipients in the same transaction but there is\n<a href=\"https://explorer.stacks.co/txid/SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.send-many-memo?chain=mainnet\" target=“_blank” rel=“noreferrer”>smart contract</a>\nthat allows us to do it. It also supports for memos on each receiver. In order to use it, the recipients params in the\nbody of a transfer transaction should have more than 1 recipient object.\n\n```javascript\n{\n    recipients: [{\n        amount: \"amount1\", //string - amount in micro-stx\n        address: \"receiverAddress1\", //string\n        memo: \"memo1\", //string - optional\n    },{\n        amount: \"amount2\", //string - amount in micro-stx\n        address: \"receiverAddress2\", //string\n        memo: \"memo2\", //string - optional\n    },{\n        amount: \"amount3\", //string - amount in micro-stx\n        address: \"receiverAddress3\", //string\n        memo: \"memo3\", //string - optional\n    },{\n        amount: \"amount4\", //string - amount in micro-stx\n        address: \"receiverAddress4\", //string\n        memo: \"memo4\", //string - optional\n    }],\n}\n```\n\n### Staking\n\nStacks refers to staking as <a href=\"https://www.stacks.co/stacking\" target=“_blank” rel=“noreferrer”>stacking</a>. Stacks is a proof of stake protocol where users\ncan delegate part of their funds to a validator (or \"stacker\") to stake and get rewards for participating in securing\nthe network. Stacks has a unique staking mechanism where users delegate STX but earn BTC as reward. When users delegate,\nfunds are “locked” but remain in the wallet. Users must undelegate to “unlock” the funds to be withdrawn or sent out.\n\nCurrently, BitGo allows users to act as delegators which means that from their wallets they can:\n\n- Delegate (or stake) STX\n- Undelegate (or unstake) STX\n- Receive rewards for delegating STX.\n\n### Delegating\n\nStaking cycles run in sequence. Users must delegate their funds before the cycle ends in order to generate rewards from\na stacker (validator).\n\n> **Note:** BitGo recommends that users use a specific BTC address solely for generating rewards.\n\n### Stacks staking examples\n\nThese examples are for wallet endpoints like:\n\n```\nhttps://app.bitgo.com/api/v2/stx/wallet/walletId/tx/build\nhttps://app.bitgo.com/api/v2/stx/wallet/walletId/tx/initiate\n```\n\n#### Delegate\n\nTo get the BTC Address hash and version BitGo recommends that you use a script like this:\n\n**Note:** Addresses must be in legacy format (and start with a `1` or a `3`). Native SegWit addresses (that start with\n`bc1`) are not supported.\n\n```javascript\nconst bitcoinjs = require('bitcoinjs-lib');\n\nconst btcAddress = '1QF7K4izEcgDxu9yRBLpFe6viFihiL1w5j';\nconst parsedAddress = bitcoinjs.address.fromBase58Check(btcAddress);\n\nconst btcAddressVersionToHashMode = (version) => {\n  switch (version) {\n    case '0': // BTC version for mainnet P2PKH\n    case '111': // BTC version for testnet P2PKH\n      return { data: [0], type: 'Buffer' };\n    case '5': // BTC version for mainnet P2SH\n    case '196': // BTC version for testnet P2SH\n      return { data: [1], type: 'Buffer' };\n    default:\n      break;\n  }\n};\nconst AddressHash = bas58.hash.toJSON();\nconst AddressVersion = btcAddressVersionToHashMode(parsedAddress.version.toString());\nconsole.log(AddressHash); //{type: 'Buffer',data: [ 254, 245, 252,  42, 179, 220, 238, 122, 241, 132, 202, 47, 217,  13,  20,  38, 151, 116, 250, 128]}\nconsole.log(AddressVersion); //{ data: [ 0 ], type: 'Buffer' }\n```\n\nThe body of the request transaction should look like this:\n\n```javascript\n{\n    type: \"stakingLock\",\n    recipients: [{\n        amount: amount, //string - amount in micro-stx\n        address: validatorAddress, //string\n    }],\n    stakingOptions: {\n        contractName: 'pox',\n        functionName: 'delegate-stx',\n        functionArgs: [\n            // First param is the amount in micro-stx do delegate\n            {\n                type: 'uint128',\n                val: amount //string - amount in micro-stx\n            },\n            // Second param is validator address\n            {\n                type: 'principal',\n                val: validatorAddress //string\n            },\n            // Third param is the delegation cycles that delegate permisions will last.\n            // Is a required parameter and must be a 1 or higher.\n            {\n                type: 'optional',\n                val: numberOfCycles //string\n            },\n            // Fourth param is the BTC address in which you will receive the rewards.\n            // Is required.\n            {\n                type: 'optional',\n                val: {\n                    type: 'tuple',\n                    val: [{\n                            key: 'hashbytes',\n                            type: 'buffer',\n                            val: AddressHash\n                        },\n                        {\n                            key: 'version',\n                            type: 'buffer',\n                            val: AddressVersion\n                        },\n                    ],\n                },\n            },\n        ],\n    };\n}\n```\n\n#### Revoke delegate\n\nThe body of the request transaction should look like this:\n\n```javascript\n{\n    type: \"stakingUnlock\",\n    recipients: [{\n        amount: '0', // string\n        address: '', // empty string\n    }],\n    stakingOptions: {\n        contractName: 'pox',\n        functionName: 'revoke-delegate-stx',\n        functionArgs: [] // empty array\n        },\n}\n```\n\n## Avalanche Contract Chain (C-Chain)\n\nAvalanche can be accessed with the following coin types\n\n| Environment             | Coin Type | Faucet                                                                 |\n| ----------------------- | --------- | ---------------------------------------------------------------------- |\n| Avax C-Chain Production | avaxc     |\n| Avax C-Chain Testnet    | tavaxc    | <a href=\"https://faucet.avax-test.network/\" target=“_blank” rel=“noreferrer”>https://faucet.avax-test.network/</a> |\n\n### Enterprise fee address\n\n```shell\nENTERPRISEID=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tavaxc/enterprise/$ENTERPRISEID/feeAddressBalance\n```\n\nThe C-Chain is an instance of the Ethereum Virtual Machine (EVM). Each enterprise has a fee address which will be used\nto pay for transaction fees on all Avalanche C-Chain wallets in that enterprise. The fee address is displayed in the\ndashboard of the BitGo website, and you must fund it before creating a wallet, address, or sending a transaction. If the\nenterprise's fee address runs out of funds, you will not be able to create new wallets, addresses, or send transactions\nuntil you fund the fee address. You will not be able to use one of your own Avalanche C-Chain wallets to fund the fee\naddress if the fee address is too low (because you will not be able to send transactions from your Avalanche C-Chain\nwallet). It is best to create and fund a non-BitGo Avalanche C-Chain account, so you can use it to fund your BitGo\nenterprise fee address. Any open source Avalanche C-Chain wallet can be used to create an account.\n\nPlease note that the fee address is a single-signature account, and that the private key is created and owned by BitGo.\nYou will not be able to send funds out of the fee address once you have sent them in.\n\nThere will be a `feeAddress` field under the `CoinSpecific` key for Avalanche C-Chain wallets. You will use this address\nto pay the fees for creating transactions and addresses.\n\n### Wallet construction\n\n```javascript\nbitgo\n  .coin('tavaxc')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n    enterprise: '5612c2beeecf83610b621b90964448cd',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/tavaxc/wallet/generate\n```\n\nAvalanche C-Chain wallets can only be created under an enterprise. You must pass in the id of the enterprise to\nassociate the wallet with.\n\nThe creation of Avalanche C-Chain wallets requires interaction with the Avalanche ledger to be complete. When you create\nan Avalanche C-Chain wallet, BitGo sends an initialization transaction on the Avalanche network in order to create the\nwallet. While these initialization transactions are unconfirmed, the wallet should not be used, nor should anyone\nattempt to send funds to the wallet. For this reason, while the wallet's initialization transactions are still\nunconfirmed on the Avalanche C-Chain network, the wallet's receive address will _not_ be visible through the API. This\nis to protect users against sending to a Avalanche C-Chain wallet which does not exist on the network and losing funds.\n\n```javascript\nbitgo\n  .coin('tavaxc')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tavaxc/wallet/$WALLET/address\n```\n\nAvalanche C-Chain address creation requires interactions with the Avalanche blockchain. In order to deploy a receive\naddress contract, BitGo sends a transaction on the Avalanche C-Chain network. Please make sure to fund the fee address\nmentioned above. Like the wallet creation process, a Avalanche C-Chain address will not be immediately usable upon\ncreation and so the caller of this function will have to wait for the initialization transaction to be confirmed before\nattempting to fetch the address or send funds to it.\n\n### Balances\n\nEach Avax is comprised of `1,000,000,000,000,000,000` (<code>10<sup>18</sup></code>) wei, so not even a single Avax can\nbe stored numerically without exceeding the range of Javascript numbers.\n\nFor that reason, only string balance properties are available, which are `balanceString`, `confirmedBalanceString`, and\n`spendableBalanceString`.\n\n### Transactions\n\nBitGo's Avalanche C-Chain multisig contract currently only supports one sender and one recipient. That means that the\n`sendMany` call will only accept one recipient.\n\n## Stellar\n\nStellar can be accessed with the following coin types:\n\n| Environment        | Coin Type | Faucet                                                                                                                               |\n| :----------------- | :-------- | :----------------------------------------------------------------------------------------------------------------------------------- |\n| Stellar Production | xlm       |                                                                                                                                      |\n| Stellar Testnet    | txlm      | <a href=\"https://www.stellar.org/laboratory/#account-creator?network=test\" target=“_blank” rel=“noreferrer”>https://www.stellar.org/laboratory/#account-creator?network=test</a> |\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('txlm')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/txlm/wallet/generate\n```\n\nBefore you can use a Stellar wallet, it must be initialized on the Stellar blockchain. A funding transaction must first\nbe sent to the wallet's address. When BitGo detects this funding transaction, it automatically sends another\ninitialization transaction to set up the signers and the home domain of the account.\n\nUntil the initialization transaction is confirmed, the wallet is _not_ ready for use, and the receive address is _not_\nexposed in the API. This is to protect users from losing funds by sending to a wallet that does not exist on the\nnetwork.\n\n> **Warning:** Do not use a Stellar wallet while it is being initialized or you may lose funds.\n\nStellar accounts must maintain a minimum balance. See [Stellar Balances](#xlm-balances).\n\n### Required reserve\n\n```shell\ncurl -X GET \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/txlm/requiredReserve\n```\n\nFetch information about reserve requirements for an account. See [Stellar Balances](#xlm-balances).\n\n#### HTTP Request\n\n`GET /api/v2/:coin/requiredReserve`\n\n#### HTTP Response\n\n| Field          | Description                                                     |\n| :------------- | :-------------------------------------------------------------- |\n| baseFee        | base fee used in transaction fees.                              |\n| baseReserve    | base reserve used in minimum account balances.                  |\n| reserve        | minimum account balance, calculated using base reserve.         |\n| minimumFunding | minimum funding balance, calculated using reserve and base fee. |\n| height         | the height of the block that provides the base values.          |\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('txlm')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/txlm/wallet/$WALLET/address\n```\n\nThe BIP-32 standard cannot be taken advantage of, and hence generated XLM addresses differ only in their sequentially\nincrementing <a href=\"https://www.stellar.org/developers/guides/concepts/transactions.html#memo\" target=“_blank” rel=“noreferrer”>memo</a> id components. The memo\ntype used by BitGo is `MEMO_ID`: a 64-bit unsigned numeric string. Whenever a new address is created, the incremented\n`memoId` and the `rootAddress` are returned in the address' `coinSpecific` property.\n\n<a id=\"xlm-balances\"></a>\n\n### Balances\n\nLumen (XLM) is the native asset of the Stellar blockchain. The base unit of Lumen is stroop:\n\n- 1 stroop is <code>10<sup> </sup>-7</code> or 0.0000001 Lumen.\n- 1 Lumen is <code>10<sup> </sup>7</code> or 10000000 stroop (10 million).\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\nAll Stellar accounts must maintain a <a href=\"https://developers.stellar.org/docs/glossary/minimum-balance/\" target=“_blank” rel=“noreferrer”>minimum balance</a> of\nlumens. The minimum balance is calculated using the base reserve, which is currently 0.5 XLM. The absolute minimum\nbalance for an account is 1 XLM, which is equal to (2 + 0 entries) \\* 0.5 base reserve. Each additional entry reserves\nan additional 0.5 XLM.\n\n### Base fee\n\nStellar has a <a href=\"https://www.stellar.org/developers/guides/concepts/fees.html#transaction-fee\" target=“_blank” rel=“noreferrer”>base fee</a> determined\ndynamically using a version of a VCG auction. When you submit a transaction to the network, you specify the maximum base\nfee you’re willing to pay per operation, but you’re actually charged the lowest possible fee based on network activity.\n\nWhen network activity is below capacity, you pay the network minimum, which is currently 100 stroops (0.00001 XLM) per\noperation.\n\n### Transactions\n\nStellar uses an account-based model, similar to XRP. Additionally, due to the use of memo, Stellar transactions only\nsupport one input and one output.\n\n### Federation\n\nBitGo supports the <a href=\"https://www.stellar.org/developers/guides/concepts/federation.html\" target=“_blank” rel=“noreferrer”>Stellar federation protocol</a>\nthat matches Stellar addresses to Stellar accounts. Additionally, the BitGo federation server provides the next memo id\nfor the wallet. Stellar accounts can be looked up by their Stellar address or their account ID.\n\nUsers can create email-like usernames for their Stellar wallets. A\n<a href=\"https://www.stellar.org/developers/guides/concepts/federation.html#stellar-addresses\" target=“_blank” rel=“noreferrer”>Stellar address</a> is conformed by\nthe Stellar username and the account's\n<a href=\"https://www.stellar.org/developers/guides/concepts/accounts.html#home-domain\" target=“_blank” rel=“noreferrer”>home domain</a> (e.g. `test*bitgo.com`).\n\nStellar usernames are unique, and only accept lower-case letters, numbers and the characters: `-_.+@`. The home domain\nis automatically set to `bitgo.com`. A Stellar username can only be set once the wallet has been initialized, and it\ncannot be changed. See [Update Wallet](#operation/v2.wallet.update).\n\n## Stellar Tokens\n\nStellar tokens can be accessed with the following coin types:\n\n| Environment     | Coin Type                                                         | Code | Issuer Website                                     |\n| :-------------- | :---------------------------------------------------------------- | :--- | :------------------------------------------------- |\n| Stellar Mainnet | xlm:AQUA-GBNZILSTVQZ4R7IKQDGHYGY2QXL5QOFJYQMXPKWRRM5PAV7Y4M67AQUA | AQUA | <a href=\"https://aqua.network\" target=“_blank” rel=“noreferrer”>aqua.network</a>               |\n| Stellar Testnet | txlm:BST-GBQTIOS3XGHB7LVYGBKQVJGCZ3R4JL5E4CBSWJ5ALIJUHBKS6263644L | BST  |                                                    |\n| Stellar Mainnet | xlm:VELO-GDM4RQUQQUVSKQA7S6EM7XBZP3FCGH4Q7CL6TABQ7B2BEJ5ERARM2M5M | VELO | <a href=\"https://velo.org\" target=“_blank” rel=“noreferrer”>velo.org</a>                       |\n| Stellar Mainnet | xlm:SLT-GCKA6K5PCQ6PNF5RQBF7PQDJWRHO6UOGFMRLK3DYHDOI244V47XKQ4GP  | SLT  | <a href=\"https://smartlands.io\" target=“_blank” rel=“noreferrer”>smartlands.io</a>             |\n| Stellar Mainnet | xlm:USD-GDUKMGUGDZQK6YHYA5Z6AY2G4XDSZPSZ3SW5UN3ARVMO6QSRDWP5YLEX  | USD  | <a href=\"https://anchorusd.com\" target=“_blank” rel=“noreferrer”>anchorusd.com</a>             |\n| Stellar Mainnet | xlm:ETH-GBVOL67TMUQBGL4TZYNMY3ZQ5WGQYFPFD5VJRWXR72VA33VFNL225PL5  | ETH  | <a href=\"https://stellarport.io\" target=“_blank” rel=“noreferrer”>stellarport.io</a>           |\n| Stellar Mainnet | xlm:WXT-GASBLVHS5FOABSDNW5SPPH3QRJYXY5JHA2AOA2QHH2FJLZBRXSG4SWXT  | WXT  | <a href=\"https://wxt.wirexapp.com\" target=“_blank” rel=“noreferrer”>wxt.wirexapp.com</a>       |\n| Stellar Mainnet | xlm:USDC-GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN | USDC | <a href=\"https://www.centre.io/\" target=“_blank” rel=“noreferrer”>centre.io</a>                |\n| Stellar Mainnet | xlm:SIX-GDMS6EECOH6MBMCP3FYRYEVRBIV3TQGLOFQIPVAITBRJUMTI6V7A2X6Z  | SIX  | <a href=\"https://six.network/\" target=“_blank” rel=“noreferrer”>six.network</a>                |\n| Stellar Mainnet | xlm:ARST-GCSAZVWXZKWS4XS223M5F54H2B6XPIIXZZGP7KEAIU6YSL5HDRGCI3DG | ARST | <a href=\"https://anchors.stablex.org\" target=“_blank” rel=“noreferrer”>anchors.stablex.org</a> |\n| Stellar Mainnet | xlm:BRLT-GCHQ3F2BF5P74DMDNOOGHT5DUCKC773AW5DTOFINC26W4KGYFPYDPRSO | BRLT | <a href=\"https://anchors.stablex.org\" target=“_blank” rel=“noreferrer”>anchors.stablex.org</a> |\n\n### Wallet functionality\n\nStellar tokens are stored in Stellar wallets. As a result certain wallet functionality available to other coins is not\navailable to supported tokens. It is not possible to create wallets, create/list/get receive addresses, or share wallets\nfor Stellar tokens. All these functions will have to be done with the coin set to xlm or txlm since that is the actual\ncoin type being used. In order to retrieve all token details associated with a Stellar wallet, such as balance, pending\napprovals, policies, and webhooks, set the \"allTokens\" parameter to true with the following calls:\n\n1.  [Get Wallet](#operation/v2.wallet.get)\n2.  [List Wallets](#operation/v2.wallet.list)\n3.  [List Pending Approvals](#operation/v2.approval.list)\n4.  [List Wallet Webhooks](#operation/v2.wallet.listwebhooks)\n5.  [List Transfers](#operation/v2.internal.listtransfers)\n6.  [Add Wallet Webhook](#operation/v2.wallet.addwebhook)\n\n### Wallet trust lines (trusted tokens)\n\nStellar tokens must be \"trusted\" on-chain by sending a\n<a href=\"https://www.stellar.org/developers/guides/concepts/assets.html#trustlines\" target=“_blank” rel=“noreferrer”>trustline</a> transaction from the receiving\nwallet authorizing holding the token.\n\nFor self-managed wallets, use [Build transaction](#operation/v2.wallet.tx.build) and\n[Send half-signed transaction](#operation/v2.wallet.tx.send) with the `type` and `trustlines` parameters.\n\nFor custodial wallets, contact us at [support@bitgo.com](mailto:support@bitgo.com).\n\n### Keychains\n\nStellar tokens do not have a direct association with keys or keychains. Instead, all tokens share the same\nkeys/keychains which belong to the Stellar wallet.\n\n### Balances\n\nStellar tokens share the same precision as Lumen (<code>10<sup> </sup>7</code>). To view token balances, call\n[Get Wallet](#operation/v2.wallet.get) with `expandBalance=true` and `allTokens=true`:\n\n      {{baseUrl}}/api/v2/xlm/wallet/{walletId}}?expandBalance=true&allTokens=true\n\n### Transactions\n\nStellar token transactions spend two types of assets: the token itself being sent and XLM (Lumens) paid in transaction\nfees. For this reason, BitGo will generate two transfers on the sending wallet with the same `txid` to track changes in\nboth balances.\n\n### Stellar Tokens Webhooks\n\nBy setting the \"allTokens\" parameter to true, a generic webhook is created which will trigger on all Stellar token and\nXLM transactions. It will send an http request to your webhook url and specify whether it is Stellar or a token using\nthe field \"coin\". Here's an example response for a test token called\n\"txlm:BST-GBQTIOS3XGHB7LVYGBKQVJGCZ3R4JL5E4CBSWJ5ALIJUHBKS6263644L\".\n\n```\n{\n    \"hash\":\"26683ffb83b86f29c9c0ccd14e8cbebf17fa903dab286320b3ef2e36f5d9a924\",\n    \"transfer\":\"5b612d25c9067f2a1db11a15f165989e\",\n    \"coin\":\"txlm:BST-GBQTIOS3XGHB7LVYGBKQVJGCZ3R4JL5E4CBSWJ5ALIJUHBKS6263644L\",\n    \"type\":\"transfer\",\n    \"state\":\"confirmed\",\n    \"wallet\":\"5a13adcab70f2c284fdd9682db5e6d64\"\n}\n```\n\nTo get additional details about this transfer, you will then need to get the transfer details using the token name and\ntransfer id. For the above transfer you'd need to call the [Get Transfer](#operation/v2.wallet.gettransfer) route to\ncheck the amount transferred and other details (e.g.\n`/api/v2/txlm:BST-GBQTIOS3XGHB7LVYGBKQVJGCZ3R4JL5E4CBSWJ5ALIJUHBKS6263644L/wallet/5a13adcab70f2c284fdd9682db5e6d64/transfer/5b612d25c9067f2a1db11a15f165989e`).\n\nNote: A transaction that sends both XLM and a Stellar token will cause one webhook notification for each asset.\n\n## Tezos\n\nTezos (xtz) can be accessed with the following coin types:\n\n| Environment            | Coin Type | Faucet                                                     |\n| :--------------------- | :-------- | :--------------------------------------------------------- |\n| Tezos Production       | xtz       | <a href=\"https://faucet.tezos.com/\" target=“_blank” rel=“noreferrer”>https://faucet.tezos.com/</a>     |\n| Tezos Carthage Testnet | txtz      | <a href=\"https://faucet.tzalpha.net/\" target=“_blank” rel=“noreferrer”>https://faucet.tzalpha.net/</a> |\n\n### Enterprise fee address\n\n```shell\nENTERPRISEID=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/txtz/enterprise/$ENTERPRISEID/feeAddressBalance\n```\n\nEach enterprise has a fee address which will be used to pay for transaction fees on every Tezos wallet in such\nenterprise. The fee address is displayed in the dashboard of the BitGo website, and you must fund it before creating a\nwallet, address, or sending funds. Unlike in Bitcoin (where the sending wallet also pays the transaction fees) BitGo's\nTezos wallet contract requires a separate account to initiate the transaction and pay the fees. If the enterprise's fee\naddress runs out of funds, you will not be able to create new wallets, addresses, or send transactions until you fund\nthe fee address. You will not be able to use one of your own Tezos wallets to fund the fee address if the fee address is\ntoo low (because you will not be able to send transactions from your wallet) so it is best to create and fund a\nnon-BitGo Tezos account so you can use it to fund your BitGo enterprise fee address. Any open source Tezos wallet or\nexchange can be used to create an account.\n\nNote that the fee address is a single-signature account and the private key is created and owned by BitGo, so you will\nnot be able to send funds out of the fee address once you have sent them in.\n\nThere will be a 'feeAddress' field under the 'CoinSpecific' key for Tezos wallets. You will use this address to pay the\nfees for creating transactions and addresses.\n\n### Generating wallets\n\nTo create a Tezos wallet using BitGoJS:\n\n```javascript\nbitgo\n  .coin('txtz')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n\n    // print the new wallets address to send to\n    console.dir(wallet.coinSpecific.rootAddress);\n  });\n```\n\nIt currently costs 1.33964 ꜩ to create a new Tezos wallet. This amount is payed by the fee account and consists of\n0.04764 ꜩ in baker fees, 1.035 ꜩ storage fees, and 0.257 ꜩ for allocation fees.\n\nTo create a Tezos wallet using the platform API:\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/txtz/wallet/generate\n```\n\nA similar operation will need to be provided above to the resultant rootAddress.\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('txtz')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/txtz/wallet/$WALLET/address\n```\n\nThe creation of receive addresses for Tezos wallets results in additional accounts associated with the main wallet. When\na user receives funds on a receive address, those funds need to be consolidated in the base address of the wallet first\nin order to be spent. See [Consolidate account](#operation/v2.wallet.consolidateaccount.build).\n\n### Sending\n\nFunds can only be sent out from the wallet's base address. If your wallet has sufficient funds but you are unable to\nsend, you may need to consolidate the funds from the receive addresses into the base address by calling\n[Consolidate account](#operation/v2.wallet.consolidateaccount.build) first. Fees of transactions sent from the base\nwallet address are paid for by the fee address, while fees of consolidation transactions taken from the receive address\nitself. The public key of every Tezos receive address must be revealed to the network before it can send transactions.\nThe reveal operation will be added to the address' first consolidation transaction. The baker fee for a reveal operation\nis 0.00142 ꜩ and for a consolidation transaction is 0.04764 ꜩ.\n\n### Balances\n\ntez (ꜩ) (XTZ) is the native asset of the Tezos blockchain. The base unit of tez is micro tez (or \"mutez\"):\n\n- 1 micro tez is (<code>10<sup>-6</sup></code>) or 0.000001 tez.\n- 1 tez is (<code>10<sup>6</sup></code>) or 1000000 micro tez (1 million).\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\nFunds stored in the base address of a Tezos wallet are considered \"spendable balance\". The sum of the balances of the\nbase address and the receive addresses is the wallet's \"confirmed balance\".\n\n## TRON\n\nTRON (TRX) can be accessed with the following coin types:\n\n| Environment         | Coin Type | Faucet                                                                                         |\n| :------------------ | :-------- | :--------------------------------------------------------------------------------------------- |\n| TRON Production     | trx       |                                                                                                |\n| TRON Tronex Testnet | ttrx      | <a href=\"http://testnet.tronex.io/status/getStatusPage\" target=“_blank” rel=“noreferrer”>http://testnet.tronex.io/status/getStatusPage</a> |\n\n### Generating wallets\n\nTo create an Tron wallet using BitGoJS:\n\n```javascript\nbitgo\n  .coin('ttrx')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n\n    // print the new wallets address to send to\n    console.dir(wallet.coinSpecific.rootAddress);\n  });\n```\n\nYou need to fund the wallet with 100 TRX as wallet creation costs this much for an individual user. You can find the\naddress to fill on the rootAddress field above.\n\nTo create an TRON wallet using the platform API:\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/ttrx/wallet/generate\n```\n\nA similar operation will need to be provided above to the resultant rootAddress.\n\n### Creating addresses\n\nDue to protocol limitations, multiple receive addresses for a wallet is not supported yet.\n\nThat means that the `sendMany` call is not supported since transactions are one to one in TRON. Using such method will\nresult in a `400` error.\n\n### Balances\n\nTronix (TRX) is the native asset of the TRON blockchain. The base unit of Tronix is sun:\n\n- 1 sun is (<code>10<sup>-6</sup></code>) or 0.000001 Tronix.\n- 1 Tronix is (<code>10<sup>6</sup></code>) or 1000000 sun (1 million).\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n## XRP Ledger (Ripple)\n\nXRP can be accessed with the following coin types:\n\n| Environment    | Coin Type | Faucet |\n| :------------- | :-------- | :----- |\n| XRP Production | xrp       |        |\n| XRP Altnet     | txrp      |        |\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('txrp')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/txrp/wallet/generate\n```\n\nBefore you can use an XRP wallet, it must be initialized on the XRP blockchain (or XRP Ledger). When you create an XRP\nwallet, BitGo sends 4 initialization transactions on the XRP network to generate the wallet.\n\nUntil the initialization transaction is confirmed, the wallet is _not_ ready for use, and the receive address is _not_\nexposed in the API. This is to protect users from losing funds by sending to a wallet that does not exist on the\nnetwork.\n\n> **Warning:** Do not use an XRP wallet while it is being initialized or you may lose funds.\n\nThe fee for creating an XRP wallet is currently 25 XRP. In production, there is limit of 5 wallets total per enterprise\nplus a mantatory payment agreement. In testnet, there is no limit.\n\n> **Note:** To inquire about increasing your limit, contact BitGo at support@bitgo.com.\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('txrp')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/txrp/wallet/$WALLET/address\n```\n\nA key difference between XRP and Bitcoin is that XRP has no concept of UTXOs, and operates on an account-based model\ninstead. Additionally, XRP transactions only support one input and one output. That means that the `sendMany` call is\nnot supported.\n\nThe BIP-32 standard therefore cannot be taken advantage of, and hence generated XRP addresses differ only in their\nsequentially incrementing destination tag components.\n\n### Balances\n\nXRP (XRP) is the native asset of the XRP ledger. The base unit of XRP is drop:\n\n- 1 drop is (<code>10<sup>-6</sup></code>) or 0.000001 XRP.\n- 1 XRP is (<code>10<sup>6</sup></code>) or 1000000 drops (1 million).\n\nBalances are supported in string format: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n> XRP is formerly known as Ripple.\n\n## Zcash\n\nBitGo supports transparent transactions with the latest Zcash network upgrade, Sapling. This means only Sapling\ncompatible transactions will be generated and read by BitGo. To sign Sapling transactions, BitGo SDK version 9.2.0 or\ngreater is required.\n\nZcash can be accessed with the following coin types:\n\n| Environment      | Coin Type | Faucet                                                           |\n| :--------------- | :-------- | :--------------------------------------------------------------- |\n| Zcash Production | zec       |                                                                  |\n| Zcash Testnet    | tzec      | <a href=\"https://faucet.testnet.z.cash/\" target=“_blank” rel=“noreferrer”>https://faucet.testnet.z.cash/</a> |\n\n### Notes on shielded transactions\n\nOnly transparent addresses are supported by BitGo wallets which limits the type of transactions allowed. A Zcash BitGo\nwallet can receive funds from a transparent or a shielded address but can only send funds to a transparent address.\n\n### Generating wallets\n\n```javascript\nbitgo\n  .coin('tzec')\n  .wallets()\n  .generateWallet({\n    label: 'My Test Wallet',\n    passphrase: 'secretpassphrase1a5df8380e0e30',\n  })\n  .then(function (wallet) {\n    // print the new wallet\n    console.dir(wallet);\n  });\n```\n\n```shell\nLABEL=\"My Test Wallet\"\nPASSPHRASE=\"secretpassphrase1a5df8380e0e30\"\n\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n-d \"{ \\\"label\\\": \\\"$LABEL\\\", \\\"passphrase\\\": \\\"$PASSPHRASE\\\" }\" \\\nhttp://$BITGO_EXPRESS_HOST:3080/api/v2/tzec/wallet/generate\n```\n\n### Creating addresses\n\n```javascript\nbitgo\n  .coin('tzec')\n  .wallets()\n  .getWallet({ id: '585c51a5df8380e0e3082e46' })\n  .then(function (wallet) {\n    return wallet.createAddress();\n  })\n  .then(function (newAddress) {\n    // print new address details\n    console.dir(newAddress);\n  });\n```\n\n```shell\nWALLET=585c51a5df8380e0e3082e46\n\ncurl -X POST \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tzec/wallet/$WALLET/address\n```\n\n> See the table of address types under [Address Derivation (BIP-32)](#address-derivation-bip-32) above. Zcash defaults\n> to chain 0 (and does not support segwit).\n\n### Balances\n\nZec (ZEC) is the native asset of the Zcash blockchain. The base unit of ZEC is zatoshi:\n\n- 1 zatoshi is (<code>10<sup>-8</sup></code>) or 0.00000001 Zec.\n- 1 ZEC is (<code>10<sup>8</sup></code>) or 100000000 zatoshis (100 million).\n\nBalances are supported in string and number format but string is recommended to ensure values do not exceed the\nprogrammable number limit: `balanceString`, `confirmedBalanceString`, and `spendableBalanceString`.\n\n### Sending Transactions using BitGoJS or BitGo Express\n\nZcash blockchain parameters update with each hard fork, and this means an updated version of BitGoJS or BitGo Express is\nrequired to successfully sign and send transactions using the new blockchain parameters.\n\nFor the current Zcash blockchain parameters, the minimum supported versions for sending Zcash are BitGoJS 9.2.0 or\ngreater, and BitGo Express 9.2.0 or greater.\n\nIf an SDK version is detected which does not support the current blockchain parameters, an `UnsupportedSdkVersion` error\nwill be returned when attempting to build or send transactions.\n"
    },
    {
      "name": "Enterprise"
    },
    {
      "name": "Express"
    },
    {
      "name": "Federation",
      "description": "Implementation of the [Stellar Federation protocol.](https://www.stellar.org/developers/guides/concepts/federation.html)\n\nThe Stellar Federation protocol maps Stellar addresses to more information about a given user. It’s a way for Stellar client software to resolve email-like addresses such as test*bitgo.com into account IDs like: GCTTCPH4IIDK7P72FFAEJ3ZFN6WDHJH6GGMRPHPM56ZWGIQ7B3XTIJAM.\n"
    },
    {
      "name": "Key"
    },
    {
      "name": "Lightning",
      "description": "(Experimental) Lightning network related endpoints.\n"
    },
    {
      "name": "Overview",
      "description": "BitGo provides a simple and robust RESTful API and client SDK to integrate digital currency wallets with your\napplication. In BitGo Platform V2, we extend our API and SDK so that you can manage **multiple digital currencies** and\nwallets through a **single, unified interface**.\n\nWith the BitGo SDK you can:\n\n- Create multi-signature wallets\n- List wallet balances and transactions\n- Create and sign transactions\n- Monitor transactions and receive notifications\n- Securely authenticate users\n- Run multi-user workflows in enterprise environments\n- Apply policies and spending limits\n\nThis is the latest documentation for the BitGo APIs, which is generated from the\n<a href=\"https://swagger.io/docs/specification/about/\" target=“_blank” rel=“noreferrer”>OpenAPI 3.0</a> schema. OpenAPI technology improves the validation of client\nrequests and increases the consistency between the API documentation and server-side implementation of API endpoints.\n\n> When calling BitGo APIs, implement a 100 second timeout to ensure that you do not terminate connections prematurely.\n\n## Multi-Signature Wallets\n\nMulti-signature wallets are highly secure because they allow for each transaction to be approved by more than one person\nwith one or more devices. Without multiple signatures, all credentials to approve a transaction must reside with a\nsingle person on one device. If that person or device is compromised by an attacker, all funds can be taken without\nrecourse and without the ability to audit the individual that invoked the key.\n\nBitGo's multi-signature wallets allow you to keep control of your Bitcoin or other cryptocurrency despite introducing\nthe concept of a co-signer. This allows enterprises to set up and maintain roles, policies, and rules on the wallet,\nmaking digital currency usable for businesses.\n\nFor more information, read the BitGo whitepaper,\n<a href=\"https://www.bitgo.com/content-library/BitGo-White-Paper-Digital-Asset-Wallet-Security.pdf\" rel=\"noreferrer\" target=\"_blank\">Digital\nAsset Wallet Security - A Comparison: Multi-Signature and Multi-Party Computation</a>.\n\n## User Authentication\n\nAll calls to endpoints that require authentication must pass the client access token in the `Authorization` HTTP header\nof the request message.\n\n### Access Token\n\nYou can create an access token in the BitGo web UI at **User Settings** > **Developer Options**. An access token can\nlimit access by:\n\n- Expiration date\n- Operations\n- Client IP addresses\n\n### Header\n\nThe format of the header is `Authorization: Bearer <TOKEN>`.\n\nThe following example uses <a href=\"https://httpie.org/\" target=“_blank” rel=“noreferrer”>HTTPie</a> to call the [Get session API](#operation/user.getsession) from\nthe command line:\n\n```bash\n$ http -v get https://app.bitgo-test.com/api/v2/user/me Authorization:\"Bearer $TEST_TOKEN\"\nGET /api/v2/user/me HTTP/1.1\nAccept: */*\nAccept-Encoding: gzip, deflate\nAuthorization: Bearer v2x83...\nConnection: keep-alive\nHost: app.bitgo-test.com\nUser-Agent: HTTPie/1.0.0\n\nHTTP/1.1 200 OK\n...\n```\n\n> **Warning:** Only use this method in a test environment. Using a\n> <a href=\"https://swagger.io/docs/specification/authentication/bearer-authentication/\" target=“_blank” rel=“noreferrer”>bearer authentication</a> in this way\n> <a href=\"https://datatracker.ietf.org/doc/html/rfc6750#section-5.3\" target=“_blank” rel=“noreferrer”>sends the token in plain text</a>, although, still over\n> HTTPS. In production, BitGo strongly recommends that you use Auth V2 or Auth V3 authentication schemes provided in\n> BitGo's SDK and Express application.\n\n### Auth V2\n\nBitGo's SDK and Express App secures tokens using our\n<a href=\"https://blog.bitgo.com/bitgo-public-key-pinning-1f22f9176958\" target=“_blank” rel=“noreferrer”>Auth V2</a> protocol, which does not send the access token\nover the wire. For this reason, we recommend that API requests from 3rd party clients should be proxied through BitGo\nExpress.\n\nThe Auth V2 scheme is used by default when you make requests to [BitGo Express](#section/BitGo-Express-REST-API) using\nthe `Bearer <token>` authentication method with a V2 access token (beginning with the prefix `v2x`). BitGo Express uses\nthe provided token to calculate the correct authentication information, without exposing the token outside the BitGo\nExpress application process.\n\n### Auth V3\n\nAuth V3 is similar to the Auth V2 scheme, with additional protections against replay attacks and protocol downgrades.\n\nSpecifically, V3 adds the following verification steps to the Auth V2 scheme:\n\n- **Request timestamp validity window**\n\nIf the request timestamp on an incoming request is more than five minutes behind the server clock when a request is\nbeing checked for authenticity, it is considered invalid and the request is rejected with a 401 Unauthorized.\n\n- **Request replay checking**\n\nIn Auth V2, each incoming request must bear a valid **hashed message authentication code**\n(<a href=\"https://en.wikipedia.org/wiki/HMAC\" target=“_blank” rel=“noreferrer”>HMAC</a>) which proves knowledge of the user's access token without revealing it to\nthe BitGo server or the transport layer carrying the request. If a previous request is replayed, the HMAC value remains\nvalid and the BitGo server could be instructed to repeat a previous action (for example, return a list of transfers or\nlist wallet balances).\n\nAuth V3 prevents this type of attack by saving all valid HMAC values up to the duration of the request validity window.\nRequests with HMAC values that were used for a previous request are rejected with a `401 Unauthorized` and not\nprocessed.\n\n- **Protocol downgrade protection**\n\nTo prevent Auth V3 requests from being captured and modified in an attempt to downgrade them to Auth V2 for replay, the\nauthentication scheme version (in the `bitgo-auth-version` request header) is added to the HMAC subject calculated by\nthe client and verified by the server. Since altering the auth version requires calculating a new HMAC value, which in\nturn requires knowledge of the user's access token, the `bitgo-auth-version` header cannot be altered by a\nman-in-the-middle to downgrade the auth version and perform a request replay attack.\n\nCurrently, the Auth V3 scheme is not used by default; it can be enabled with the startup flag `--authversion` in BitGo\nExpress or the BitGo SDK. For more, see\n<a href=\"https://github.com/BitGo/BitGoJS/blob/master/modules/express/README.md\" target=“_blank” rel=“noreferrer”>BitGo Express README</a>.\n\n## Software Development Kit\n\nThe BitGo web APIs allow developers to create and manage multi-signature wallets, manipulate their policies, and\ninteract with multiple digital currencies over a single robust interface.\n\nSensitive operations, such as the creation of user private keys and signing of transactions, must be performed\nclient-side. For this we recommend our\n<a href=\"https://github.com/BitGo/BitGoJS\" rel=\"noreferrer\" target=\"_blank\">Software Development Kit (SDK)</a>, which\nimplements client-side wallet features and interfaces with our APIs.\n\nCurrently, our SDK is available in JavaScript and runs in either Node.js or a browser. If your application does not use\nnative JavaScript, refer to the [BitGo Express REST API guide](#section/BitGo-Express-REST-API), which offers the same\nfeature set via a local server daemon.\n\nInstalling the JavaScript SDK (via npm)\n\n```shell\nnpm install --save bitgo\n```\n\nTo initialize your environment and authenticate, use the following code:\n\n```javascript\nconst BitGoJS = require('bitgo');\n// Read the user authentication section to get your API access token\nconst bitgo = new BitGoJS.BitGo({\n  env: 'test',\n  accessToken: process.env.ACCESS_TOKEN,\n});\nconst coin = bitgo.coin('tbtc');\n```\n\n## BitGo Express REST API\n\nThe BitGo Express REST API is a lightweight service for developers who want to use the BitGo service, but are developing\nin a language other than JavaScript.\n\nBitGo Express runs as a service in your own data center and handles the client-side operations involving your own keys,\nsuch as partially signing transactions before submitting them to BitGo. This ensures your keys never leave your network,\nand are never seen by BitGo. BitGo Express can also proxy the standard BitGo REST APIs, providing a unified interface to\nBitGo through a single REST API.\n\nWe recommend using Docker to run BitGo Express, and we also support running from the source code directly.\n\nTo try out BitGo Express, run this command:\n\n```shell\ndocker run -it -p 3080:3080 bitgosdk/express:latest\n```\n\nYou should see this output from BitGo Express:\n\n```\nBitGo-Express running\nEnvironment: test\nBase URI: http://0.0.0.0:3080\n```\n\nTo make sure the service is up and running, send a ping request to BitGo Express with curl:\n\n```bash\n$ curl localhost:3080/api/v2/ping\n{\"status\":\"service is ok!\",\"environment\":\"BitGo Testnet\",\"configEnv\":\"testnet\",\"configVersion\":79}\n```\n\n> **Note:** Make _all_ BitGo REST API calls to the machine on which bitgo-express is running. BitGo Express will either\n> handle the request itself or proxy it to the BitGo service.\n\nFor more, see <a href=\"https://github.com/BitGo/BitGoJS/blob/master/modules/express/README.md\" target=“_blank” rel=“noreferrer”>BitGo Express README</a>.\n\n## Environments\n\nBitGo has two separate environments available for development and production. For security reasons, all BitGo API\nrequests are made using TLS over HTTPS.\n\n### Test Environment\n\nThe BitGo test environment is used by default in our examples and the SDK. It is entirely separate from BitGo's\nproduction environment and there is no overlap in either data or accounts. You will need to create accounts at\n<a href=\"https://app.bitgo-test.com/\" rel=\"noreferrer\" target=\"_blank\">app.bitgo-test.com</a>.\n\n- BitGo Test Site: https://app.bitgo-test.com/\n- Test Environment API: https://app.bitgo-test.com/docs\n\nIn the test environment, you can use the value `0000000` in place of the one-time password (OTP) when authenticating.\n\nThis environment is connected to the TestNet networks of various\n[digital currencies](#section/Coin-Digital-Currency-Support) we support. Tokens on these networks can be obtained from\nfaucets and do not represent real money.\n\n### Production Environment\n\nThe BitGo production endpoint is live and used by partners and our own web application on app.bitgo.com.\n\n- Production Site: https://app.bitgo.com/\n- Production API: https://app.bitgo.com/docs\n\nTo use this environment, specify `{ env: 'prod' }` when using the SDK or `-e prod` when running BitGo Express. SSL\ncertifications should be provided to secure traffic to and from the BitGo Express instances when operating in the\nProduction environment.\n\n## Coin / Digital Currency Support\n\nBitGo Platform V2 supports a variety of digital currencies, with more being added every quarter.\n\nTo select a coin use the following (replacing `btc` with your chosen coin identifier):\n\n```javascript\nvar bitgo = new BitGoJS.BitGo({\n  env: 'test',\n  accessToken: process.env.ACCESS_TOKEN,\n});\nvar coin = bitgo.coin('btc');\n```\n\n### Coins in Production\n\nFor supported ECR20 and TERC20 tokens, see [Ethereum - ERC20 Tokens](#section/Ethereum-ERC20-Tokens).\n\n| Blockchain                              | Native Coin   | Mainnet Id                                                      | Testnet Id | Base Unit      | Divisibility                  | Family  | BitGo Access | BitGo Wallets |\n| :-------------------------------------- | :------------ | :-------------------------------------------------------------- | :--------- | :------------- | :---------------------------- | :------ | :----------- | :------------ |\n| [Algorand](#algorand)                   | Algo          | <a href=\"https://coinmarketcap.com/currencies/algorand/\" target=“_blank” rel=“noreferrer”>ALGO</a>          | tALGO      | microAlgo      | <code>10<sup>-6</sup></code>  | Account | Enterprise   | Hot/Cold      |\n| [Avax C-Chain](#avalanche)              | Avax          | <a href=\"https://coinmarketcap.com/currencies/avalanche/\" target=“_blank” rel=“noreferrer”>AVAX</a>         | tAVAX      | wei            | <code>10<sup>-18</sup></code> | Account | Enterprise   | Hot/Cold      |\n| [Bitcoin](#bitcoin)                     | Bitcoin       | <a href=\"https://coinmarketcap.com/currencies/bitcoin/\" target=“_blank” rel=“noreferrer”>BTC</a>            | tBTC       | satoshi        | <code>10<sup>-8</sup></code>  | UTXO    | All          | Hot/Cold      |\n| [Bitcoin Cash](#bitcoin-cash)           | Bitcoin Cash  | <a href=\"https://coinmarketcap.com/currencies/bitcoin-cash/\" target=“_blank” rel=“noreferrer”>BCH</a>       | tBCH       | satoshi        | <code>10<sup>-8</sup></code>  | UTXO    | All          | Hot/Cold      |\n| [Bitcoin Gold](#bitcoin-gold)           | Bitcoin Gold  | <a href=\"https://coinmarketcap.com/currencies/bitcoin-gold/\" target=“_blank” rel=“noreferrer”>BTG</a>       | n/a        | satoshi        | <code>10<sup>-8</sup></code>  | UTXO    | All          | Hot/Cold      |\n| [Casper](#casper)                       | Casper        | <a href=\"https://coinmarketcap.com/currencies/casper/\" target=“_blank” rel=“noreferrer”>CSPR</a>            | tCSPR      | mote           | <code>10<sup>-9</sup></code>  | Account | Enterprise   | Hot/Cold      |\n| [Celo](#celo)                           | CELO          | <a href=\"https://coinmarketcap.com/currencies/celo/\" target=“_blank” rel=“noreferrer”>CELO</a>              | tCELO      | wei            | <code>10<sup>-18</sup></code> | Account | Enterprise   | Hot           |\n| [Dash](#dash)                           | Dash          | <a href=\"https://coinmarketcap.com/currencies/dash/\" target=“_blank” rel=“noreferrer”>DASH</a>              | tDASH      | duff           | <code>10<sup>-8</sup></code>  | UTXO    | All          | Hot/Cold      |\n| [EOS](#eos)                             | EOS           | <a href=\"https://coinmarketcap.com/currencies/eos/\" target=“_blank” rel=“noreferrer”>EOS</a>                | tEOS       | -              | <code>10<sup>-4</sup></code>  | Account | Enterprise   | Hot/Cold      |\n| [Ethereum](#ethereum)                   | Ether         | <a href=\"https://coinmarketcap.com/currencies/ethereum/\" target=“_blank” rel=“noreferrer”>ETH</a>           | tETH       | wei            | <code>10<sup>-18</sup></code> | Account | Enterprise   | Hot/Cold      |\n| [Hedera](#hedera-hashgraph)             | HBAR          | <a href=\"https://coinmarketcap.com/currencies/hedera-hashgraph/\" target=“_blank” rel=“noreferrer”>HBAR</a>  | tHBAR      | tinybar        | <code>10<sup>-8</sup></code>  | Account | Enterprise   | Hot/Cold      |\n| [Litecoin](#litecoin)                   | Litecoin      | <a href=\"https://coinmarketcap.com/currencies/litecoin/\" target=“_blank” rel=“noreferrer”>LTC</a>           | tLTC       | microlitecoins | <code>10<sup>-8</sup></code>  | UTXO    | All          | Hot/Cold      |\n| [RSK Smart Bitcoin](#rsk-smart-bitcoin) | Smart Bitcoin | <a href=\"https://coinmarketcap.com/currencies/rsk-smart-bitcoin/\" target=“_blank” rel=“noreferrer”>RBTC</a> | tRBTC      | wei            | <code>10<sup>-18</sup></code> | Account | Enterprise   | Hot/Cold      |\n| [Stacks](#stacks)                       | Stacks        | <a href=\"https://coinmarketcap.com/currencies/stacks/\" target=“_blank” rel=“noreferrer”>STX</a>             | tSTX       | micro-STX      | <code>10<sup>-6</sup></code>  | UTXO    | All          | Hot/Cold      |\n| [Stellar](#stellar)                     | Lumen         | <a href=\"https://coinmarketcap.com/currencies/stellar/\" target=“_blank” rel=“noreferrer”>XLM</a>            | tXLM       | stroop         | <code>10<sup>-7</sup></code>  | Account | All          | Hot/Cold      |\n| [Tezos](#tezos)                         | tez           | <a href=\"https://coinmarketcap.com/currencies/tezos/\" target=“_blank” rel=“noreferrer”>XTZ</a>              | tXTZ       | micro tez      | <code>10<sup>-6</sup></code>  | Account | Enterprise   | Hot           |\n| [Tron](#tron)                           | Tronix        | <a href=\"https://coinmarketcap.com/currencies/tron/\" target=“_blank” rel=“noreferrer”>TRX</a>               | tTRX       | sun            | <code>10<sup>-6</sup></code>  | Account | All          | Hot/Cold      |\n| [XRP Ledger](#xrp-ledger-ripple)        | XRP           | <a href=\"https://coinmarketcap.com/currencies/xrp/\" target=“_blank” rel=“noreferrer”>XRP</a>                | tXRP       | drop           | <code>10<sup>-8</sup></code>  | Account | Enterprise   | Hot/Cold      |\n| [Zcash](#zcash)                         | Zec           | <a href=\"https://coinmarketcap.com/currencies/zcash/\" target=“_blank” rel=“noreferrer”>ZEC</a>              | tZEC       | zatoshi        | <code>10<sup>-8</sup></code>  | UTXO    | All          | Hot/Cold      |\n\n<aside class=\"info\">\n\n> **Caution:** Changing the coin identifier can change how blockchain fees are assessed (even though the wallet and\n> address might still be usable).\n\n</aside>\n\n## HTTP Status Codes\n\nThe BitGo API returns the following HTTP status codes:\n\n| HTTP Status | Meaning           | Description                                                                           |\n| ----------- | ----------------- | ------------------------------------------------------------------------------------- |\n| 200         | Success           | The operation succeeded                                                               |\n| 201         | Created           | A new object was created                                                              |\n| 202         | Accepted          | The operation succeeded, but requires approval (e.g., sending funds)                  |\n| 206         | Partial Content   | The server is delivering only part of the resource.                                   |\n| 400         | Bad Request       | The client request is invalid                                                         |\n| 401         | Unauthorized      | Authentication failed (e.g., invalid token specified by the **Authorization** header) |\n| 403         | Forbidden         | Authentication failed, but the operation is not allowed                               |\n| 404         | Not Found         | Requested resource does not exist                                                     |\n| 429         | Too Many Requests | Client request rate exceeded the limit                                                |\n\n## Error Handling\n\nWhen the server returns a 4xx status code, the response body contains an error object with the following structure:\n\n```json\n{\n  \"error\": \"invalid wallet id\",\n  \"name\": \"InvalidWalletId\",\n  \"requestId\": \"cjo7uw7si0buzttlmazmvthay\"\n}\n```\n\nThe **name** value is an error code that does not change. The **error** value is a human-readable message which may\nchange.\n\n## Pagination\n\nCertain routes, such as listing wallets or transactions, may return an array of results and require pagination.\n\nBy default, the API returns 25 results per request. The `limit` parameter can be used to increase the number of results\nper request, up to a maximum of 500.\n\nTo get the next batch of results, call the same route again with a `prevId` request parameter corresponding to the\n`nextBatchPrevId` property received in the last call.\n\n```javascript\nbitgo\n  .coin('tbtc')\n  .wallets()\n  .list({ limit: 50 })\n  .then(function (wallets) {\n    // print wallet list\n    console.dir(wallets);\n  });\n```\n\n```shell\ncurl \\\n-H \"Authorization: Bearer $ACCESS_TOKEN\" \\\nhttps://app.bitgo-test.com/api/v2/tbtc/wallet?limit=50\n```\n\n> Example JSON Response:\n\n```json\n{\n  \"coin\": \"tbtc\",\n  \"wallets\": [\n    {\n      \"_wallet\": {\n        \"id\": \"585a0860c5a04c696edd2c331ce2f346\",\n        \"coin\": \"tbtc\",\n        \"label\": \"V2 TBTC Test Wallet\",\n        ...\n      }\n    },\n    ...\n  ],\n  \"count\": 50,\n  \"nextBatchPrevId\": \"590b73478c8fc40727b0c3d421ec909c\"\n}\n```\n\n## Balance Strings\n\nFor most digital currencies, the wallet, transaction, and address objects have `balance` properties that return an\ninteger value. But some currencies have ranges that exceed values that can be stored as a typical number in JavaScript.\n\nIn BitGo Platform V2, `balance` properties with a string data type were added for **all** digital currencies (and have\nthe suffix, `String`). BitGo recommends that you use string balances for all currencies (and not number) to ensure\nvalues do not exceed the programmable number limit.\n\n| Integer            | String (recommended)     |\n| :----------------- | :----------------------- |\n| `balance`          | `balanceString`          |\n| `confirmedBalance` | `confirmedBalanceString` |\n| `spendableBalance` | `spendableBalanceString` |\n\n## BitGo UTXO Library\n\nThe BitGo UTXO Library (@bitgo/utxo-lib) is an open source library for UTXO transaction building and does not require a\nBitGo account or the BitGo SDK to be used. The library allows any developer working with UTXO-based blockchains to\neasily build and sign their own transactions.\n\nFor more, see the <a href=\"https://github.com/BitGo/BitGoJS/tree/master/modules/utxo-lib\" target=“_blank” rel=“noreferrer”>BitGo UTXO Library</a>.\n"
    },
    {
      "name": "Pending approval"
    },
    {
      "name": "Policy"
    },
    {
      "name": "Portfolio REST API",
      "description": "## Rate-Limiting\nAll REST endpoints are rate-limited to 10 requests/second. Once the limit is reached, requests will be rejected with `429 Too Many Requests`\n\nThe following headers are returned on every request <table> <tr> <td>Header</td><td>Description</td> </tr> <tr> <td>X-Ratelimit-Limit</td><td>Request limit per second</td> </tr> <tr> <td>X-Ratelimit-Remaining</td><td>Remaining number of requests allowed in interval</td> </tr> <tr> <td>X-Ratelimit-Reset</td><td>Duration in milliseconds until the total quota resets</td> </tr> </table>\nThe following header is also returned if the response is `429 Too Many Requests` <table> <tr> <td>Header</td><td>Description</td> </tr> <tr> <td>Retry-After</td><td>Duration in seconds of how long to wait before making a new request</td> </tr> </table>"
    },
    {
      "name": "Send label"
    },
    {
      "name": "Staking History",
      "description": "API to retrieve staking and reward history"
    },
    {
      "name": "Staking Request",
      "description": "API to create, retrieve staking requests, and retrieve staking request transactions. A staking request can be of type STAKE or UNSTAKE"
    },
    {
      "name": "Staking State Information",
      "description": "API to retrieve staking state information like balances and attributes"
    },
    {
      "name": "Trade REST API",
      "description": "## Rate-Limiting\nAll REST endpoints are rate-limited to 10 requests/second. Once the limit is reached, requests will be rejected with `429 Too Many Requests`\n\nThe following headers are returned on every request <table> <tr> <td>Header</td><td>Description</td> </tr> <tr> <td>X-Ratelimit-Limit</td><td>Request limit per second</td> </tr> <tr> <td>X-Ratelimit-Remaining</td><td>Remaining number of requests allowed in interval</td> </tr> <tr> <td>X-Ratelimit-Reset</td><td>Duration in milliseconds until the total quota resets</td> </tr> </table>\nThe following header is also returned if the response is `429 Too Many Requests` <table> <tr> <td>Header</td><td>Description</td> </tr> <tr> <td>Retry-After</td><td>Duration in seconds of how long to wait before making a new request</td> </tr> </table>"
    },
    {
      "name": "Trade Websocket API",
      "description": "The websocket feed provides real-time market data updates for the orderbook, orders, and trades.\n\n## Endpoints\n\n| Environment | Endpoint                                         |\n| ----------- | ------------------------------------------------ |\n| Production  | wss://app.bitgo.com/api/prime/trading/v1/ws      |\n| Test        | wss://app.bitgo-test.com/api/prime/trading/v1/ws |\n\n## Authentication\n\n```\nAuthorization: Bearer <access token>\n```\n\n## Timeout\n\nThe websocket connection is only valid for 60 seconds if no messages are sent/recieved. To keep the connection alive,\nthe client must respond to PING frames with a PONG.\n\n## The Level2 Channel\n\nThe level2 Channel will provide a feed of snapshots of the order book.\n\n#### Subscribe\n\nIn order to subscribe, you must indicate the accountId, channel and productId.\n\n```\n{\n  \"type\": \"subscribe\",\n  \"accountId\": \"f230fdebfa084ffebc7e00515f54603f\",\n  \"channel\": \"level2\",\n  \"productId\": \"BTC-USD\"\n}\n```\n\n#### Messages\n\n```\n{\n  \"channel\": \"level2\",\n  \"type\": \"snapshot\",\n  \"product\": \"BTC-USD\",\n  \"time\": \"2020-01-01T09:35:26.465Z\",\n  \"bids\": [[\"7001.10\", \"1.5084\"]],\n  \"asks\": [[\"7002.55\", \"2.7524\"]],\n}\n```\n\n```\n{\n  \"channel\": \"level2\",\n  \"type\": \"error\",\n  \"message\": \"invalid product BTC-ETH\",\n  \"time\": \"2020-01-01T09:35:26.465Z\",\n}\n```\n\n## The Orders Channel\n\nThe orders channel provides updates to client orders and will let you know if an order is: Created, Completed, Canceled,\nor if there is an Error. This channel will also provide updates to individual fills within an order.\n\n#### Subscribe\n\n```\n{\n  \"type\": \"subscribe\",\n  \"channel\": \"orders\",\n  \"accountId\": \"f230fdebfa084ffebc7e00515f54603f\",\n}\n```\n\n#### Messages\n\n##### Order Creation Update\n\n```\n{\n  \"channel\": \"order\",\n  \"time\": \"2019-04-25T01:02:03.045678Z\",\n  \"accountId\": \"f230fdebfa084ffebc7e00515f54603f\",\n  \"orderId\": \"14db12f5-4d3d-4fd8-8ced-062aa81bb4bc\",\n  \"clientOrderId\": \"my-order-1\",\n  \"product\": \"BTC-USD\",\n  \"status\": \"opened\",\n  \"type\": \"market\",\n  \"side\": \"buy\",\n  \"quantity\": \"1.01\",\n}\n```\n\n##### Fill Update\n\n```\n{\n  \"channel\": \"order\",\n  \"time\": \"2019-04-25T01:02:04.045678Z\",\n  \"accountId\": \"f230fdebfa084ffebc7e00515f54603f\",\n  \"orderId\": \"14db12f5-4d3d-4fd8-8ced-062aa81bb4bc\",\n  \"clientOrderId\": \"my-order-1\",\n  \"product\": \"BTC-USD\",\n  \"status\": \"opened\",\n  \"type\": \"market\",\n  \"side\": \"buy\",\n  \"quantity\": \"1.01\",\n  \"cumulativeQuantity\": \"0.50\",\n  \"averagePrice\": \"7090.1\",\n  \"tradeId\": \"a6a9ab1b-2947-41b7-b44d-4ce61fca8b92\",\n  \"fillQuantity\": \"0.50\",\n  \"fillPrice\": \"7090.1\",\n}\n```\n\n##### Order Completed\n\n```\n{\n  \"channel\": \"order\",\n  \"time\": \"2019-04-25T01:02:03.045678Z\",\n  \"accountId\": \"f230fdebfa084ffebc7e00515f54603f\",\n  \"orderId\": \"14db12f5-4d3d-4fd8-8ced-062aa81bb4bc\",\n  \"clientOrderId\": \"my-order-1\",\n  \"product\": \"BTC-USD\",\n  \"status\": \"completed\",\n  \"type\": \"market\",\n  \"side\": \"buy\",\n  \"quantity\": \"1.01\",\n  \"cumulativeQuantity\": \"1.01\",\n  \"averagePrice\": \"7090.1\",\n}\n```\n\n##### Order Canceled\n\n```\n{\n  \"channel\": \"order\",\n  \"time\": \"2019-04-25T01:02:03.045678Z\",\n  \"accountId\": \"f230fdebfa084ffebc7e00515f54603f\",\n  \"orderId\": \"14db12f5-4d3d-4fd8-8ced-062aa81bb4bc\",\n  \"clientOrderId\": \"my-order-1\",\n  \"product\": \"BTC-USD\",\n  \"status\": \"canceled\",\n  \"type\": \"market\",\n  \"side\": \"buy\",\n  \"quantity\": \"1.01\",\n  \"cumulativeQuantity\": \"0.50\",\n  \"averagePrice\": \"7090.1\",\n}\n```\n\n##### Order Error\n\n```\n{\n  \"channel\": \"order\",\n  \"time\": \"2019-04-25T01:02:03.045678Z\",\n  \"accountId\": \"f230fdebfa084ffebc7e00515f54603f\",\n  \"orderId\": \"14db12f5-4d3d-4fd8-8ced-062aa81bb4bc\",\n  \"clientOrderId\": \"my-order-1\",\n  \"product\": \"BTC-USD\",\n  \"status\": \"error\",\n  \"message\": \"insufficient fund\",\n  \"type\": \"market\",\n  \"side\": \"buy\",\n  \"quantity\": \"1.01\",\n  \"cumulativeQuantity\": \"0.50\",\n  \"averagePrice\": \"7090.1\",\n}\n```\n"
    },
    {
      "name": "Trading Account Settings",
      "description": "Tools for managing BitGo offchain Trading Account Settings"
    },
    {
      "name": "Trading Partners",
      "description": "Tools for referring and accessing trading partner details for clearing and settlement"
    },
    {
      "name": "Transaction request"
    },
    {
      "name": "Transfer"
    },
    {
      "name": "User"
    },
    {
      "name": "Wallet"
    },
    {
      "name": "Wallet share",
      "description": "Sharing a wallet involves giving another user permission to use the wallet.\n\nIn order for the receiver to use the wallet, we also need to share the\nprivate key with them. Each user on BitGo creates\na public-private keypair for this purpose during their signup process.\n\nThe BitGo SDK does the following client-side to create a new wallet share:\n\n* Get the receiving user’s sharing key (a derived path of the receiver’s public key)\n* Decrypt the wallet to be shared locally\n* Re-encrypt the wallet against the public key above, so that only the receiver may decrypt it\n* Upload the encrypted keys to the BitGo service, which informs the receiver they have a pending share\n"
    },
    {
      "name": "Webhook",
      "description": "Webhooks may be setup to programmatically receive callbacks from BitGo. These may be attached to wallets (in the case of transfers), or to a block (for block notifications). Webhook notifications are triggered when the specified event occurs, such as an incoming transaction.\n\nBitGo servers will make a POST http request to the URL defined with a JSON payload, and expect a HTTP 200 OK. If a successful response is not received, BitGo will attempt to retry the webhook with an increasing delay between each retry.\n\nSince anyone on the Internet can send HTTP requests to the Webhook URL, the request body payload should not be trusted. Please verify any information sent in the webhook by fetching the transfer/block data from BitGo before processing the notification.\n\nDevelopers should take care to ensure that their application succeeds even in the cases of transient network error, or if receive the same webhook twice due to an improper acknowledgement.\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Getting started",
      "tags": [
        "Overview"
      ]
    },
    {
      "name": "Settlement",
      "tags": [
        "Trading Account Settings",
        "Clearing & Settlement",
        "Trading Partners"
      ]
    },
    {
      "name": "Portfolio",
      "tags": [
        "Portfolio REST API"
      ]
    },
    {
      "name": "Trade",
      "tags": [
        "Trade REST API",
        "Trade Websocket API"
      ]
    },
    {
      "name": "Wallets",
      "tags": [
        "Address",
        "Audit log",
        "Enterprise",
        "Express",
        "Federation",
        "Key",
        "Pending approval",
        "Policy",
        "Send label",
        "Transfer",
        "Transaction request",
        "User",
        "Wallet",
        "Wallet share",
        "Webhook"
      ]
    },
    {
      "name": "Staking",
      "tags": [
        "Staking Request",
        "Staking State Information",
        "Staking History",
        "Staking Internal"
      ]
    },
    {
      "name": "Lightning",
      "tags": [
        "Lightning"
      ]
    },
    {
      "name": "Addendum",
      "tags": [
        "Bank account",
        "Coin-specific implementation"
      ]
    }
  ],
  "components": {
    "parameters": {
      "address": {
        "name": "address",
        "in": "query",
        "description": "Filter by address string",
        "schema": {
          "$ref": "#/components/schemas/AddressString"
        }
      },
      "addressOrId": {
        "name": "addressOrId",
        "in": "path",
        "description": "Address or Id which will be used for information lookup",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "auditLogType": {
        "name": "type",
        "in": "query",
        "description": "Filter by AuditLog type",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AuditLogType"
          }
        }
      },
      "chain": {
        "name": "chain",
        "in": "query",
        "description": "Filter by address chain. May be given multiple times.",
        "schema": {
          "$ref": "#/components/schemas/Chain"
        }
      },
      "coin": {
        "name": "coin",
        "in": "query",
        "description": "Filter by coin",
        "schema": {
          "$ref": "#/components/schemas/Coin"
        }
      },
      "coinArray": {
        "name": "coin",
        "in": "query",
        "description": "Filter by coin",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Coin"
          }
        }
      },
      "coinSingleOrList": {
        "name": "coin",
        "in": "query",
        "description": "Filter by coin(s)",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Coin"
          }
        }
      },
      "pathId": {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "pathBankAccountId": {
        "name": "bankAccountId",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "pathApprovalId": {
        "name": "approvalId",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "pathShareId": {
        "name": "shareId",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "pathWalletId": {
        "name": "walletId",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "pathAddressId": {
        "name": "addressId",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "pathEnterpriseId": {
        "name": "enterpriseId",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "queryEnterpriseIdOrPersonal": {
        "name": "enterpriseId",
        "in": "query",
        "description": "Filter by enterprise",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Id"
            },
            {
              "type": "string",
              "enum": [
                "personal"
              ]
            }
          ]
        }
      },
      "queryIdArray": {
        "name": "id",
        "in": "query",
        "description": "Filter by id",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "queryEnterpriseArray": {
        "name": "enterprise",
        "in": "query",
        "description": "Filter by enterprise",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "queryEnterpriseIdArray": {
        "name": "enterpriseId",
        "in": "query",
        "description": "Filter by enterprise",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "pathUserId": {
        "name": "userId",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "pathTransferId": {
        "name": "transferId",
        "in": "path",
        "required": true,
        "description": "a transfer or transaction id",
        "example": "f5d8ee39a430901c91a5917b9f2dc19d6d1a0e9cea205b009ca73dd04470b9a5 or 585951a5df8380e0e3063e9f12345678",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Id"
            },
            {
              "$ref": "#/components/schemas/TxId"
            }
          ]
        }
      },
      "pathSequenceId": {
        "name": "sequenceId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "A `sequenceId` is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a `sequenceId` you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because the system only confirms one send request per `sequenceId` (and fails all subsequent attempts), you can retry sending without the risk of double spending. The `sequenceId` is only visible to users on the wallet and is not shared publicly.\n"
      },
      "pathCoin": {
        "name": "coin",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Coin"
        }
      },
      "pathBitcoin": {
        "name": "coin",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Bitcoin"
        }
      },
      "pathAlgorand": {
        "name": "coin",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ConsolidationCoins"
        }
      },
      "pathAddress": {
        "name": "address",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/AddressString"
        }
      },
      "pathWebhookId": {
        "name": "webhookId",
        "required": true,
        "in": "path",
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "queryFederationQ": {
        "name": "q",
        "in": "query",
        "required": true,
        "example": "test*bitgo.com",
        "schema": {
          "type": "string"
        }
      },
      "queryFederationType": {
        "name": "type",
        "in": "query",
        "required": true,
        "example": "name",
        "schema": {
          "type": "string",
          "enum": [
            "name",
            "id"
          ]
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 500,
          "default": 25
        },
        "description": "Maximum number of results to return.  If the result set is truncated, use the `nextBatchPrevId` value to get the next batch."
      },
      "feeRate": {
        "name": "feeRate",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 0
        }
      },
      "enterpriseId": {
        "name": "enterpriseId",
        "in": "query",
        "description": "Filter by enterprise",
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "numBlocks": {
        "name": "numBlocks",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 2,
          "minimum": 1,
          "maximum": 1000
        },
        "description": "Sets the target estimated number of blocks for a confirmation"
      },
      "maxFeeRate": {
        "name": "maxFeeRate",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 0
        }
      },
      "enforceMinConfirmsForChange": {
        "name": "enforceMinConfirmsForChange",
        "in": "query",
        "description": "Enforces `minConfirms` on change inputs",
        "schema": {
          "type": "boolean"
        }
      },
      "minValue": {
        "name": "minValue",
        "in": "query",
        "description": "Minimum value of each unspent in base units (e.g. satoshis)",
        "schema": {
          "type": "number",
          "minimum": 0
        }
      },
      "maxValue": {
        "name": "maxValue",
        "in": "query",
        "description": "Maximum value of each unspent in base units (e.g. satoshis)",
        "schema": {
          "type": "number",
          "minimum": 0
        }
      },
      "minHeight": {
        "name": "minHeight",
        "in": "query",
        "description": "Minimum block height of the unspents",
        "schema": {
          "type": "number",
          "minimum": 0
        }
      },
      "height": {
        "name": "height",
        "in": "query",
        "description": "The block or ledger height",
        "schema": {
          "$ref": "#/components/schemas/IntegerString"
        }
      },
      "segwit": {
        "name": "segwit",
        "in": "query",
        "description": "DEPRECATED. Mutually exclusive with `chains`. Returns only `p2shP2wsh` unspents/addresses on true. Returns only `p2sh` unspents/addresses on false. Equivalent to passing 10 and 11 as the only value in `chains` on true, 0 and 1 on false.",
        "schema": {
          "type": "boolean"
        }
      },
      "minConfirms": {
        "name": "minConfirms",
        "in": "query",
        "description": "Minimum number of confirmations for the collected inputs. Only applies to external unspents. Use `enforceMinConfirmsForChange` to filter change as well.",
        "schema": {
          "type": "integer",
          "minimum": 0
        }
      },
      "prevId": {
        "in": "query",
        "name": "prevId",
        "schema": {
          "$ref": "#/components/schemas/Id"
        },
        "description": "Return the next batch of results, based on the `nextBatchPrevId` value from the previous batch."
      },
      "searchLabelWallets": {
        "name": "searchLabel",
        "in": "query",
        "example": "My very first wallet",
        "description": "Query for `Wallets` with a label containing this string",
        "schema": {
          "type": "string"
        }
      },
      "type": {
        "name": "type",
        "in": "query",
        "description": "Filter on sending or receiving `Transfers`",
        "schema": {
          "type": "string",
          "enum": [
            "send",
            "receive"
          ]
        }
      },
      "transactionIdx": {
        "name": "transactionIdx",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "walletId": {
        "name": "walletId",
        "description": "Filter by wallet",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "walletIds": {
        "name": "walletIds",
        "in": "query",
        "description": "Filter by wallets.",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "txRequestLatest": {
        "name": "latest",
        "in": "query",
        "description": "If provided, only the latest transaction request version will be returned.",
        "schema": {
          "type": "boolean"
        }
      },
      "txRequestStates": {
        "name": "states",
        "in": "query",
        "description": "If provided, only transaction requests of the specified state will be returned.",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TransactionRequestState"
          }
        }
      },
      "txRequestIds": {
        "name": "txRequestIds",
        "in": "query",
        "description": "If provided, only transaction requests specified will be returned.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "idempotencyKeys": {
        "name": "idempotencyKeys",
        "in": "query",
        "description": "If provided, only transaction requests with the matching idempotencyKeys will be returned.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "allTokens": {
        "name": "allTokens",
        "schema": {
          "type": "boolean"
        },
        "in": "query",
        "example": true,
        "description": "Include data for all subtokens (i.e. ERC20 Tokens, Stellar Tokens)"
      },
      "state": {
        "name": "state",
        "description": "The status of this Transfer",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/TransferState"
        }
      },
      "showAllWallets": {
        "name": "showAllWallets",
        "description": "Include wallets that have `deleted` or `creationFailed` set to **true**",
        "in": "query",
        "schema": {
          "type": "boolean"
        }
      },
      "valueGte": {
        "name": "valueGte",
        "in": "query",
        "description": "Return transfers with a `value` that is greater than or equal to the given number",
        "schema": {
          "type": "integer"
        }
      },
      "valueLt": {
        "name": "valueLt",
        "in": "query",
        "description": "Return transfers with a `value` that is less than the given number",
        "schema": {
          "type": "integer"
        }
      },
      "dateGte": {
        "name": "dateGte",
        "in": "query",
        "description": "Return transfers with a `date` that is greater than or equal to the given timestamp",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "dateLt": {
        "name": "dateLt",
        "in": "query",
        "description": "Return transfers with a `date` that is less than the given timestamp",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "schemas": {
      "PortfolioUser": {
        "required": [
          "email",
          "firstName",
          "id",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "example": {
          "id": "a253c86c-1f0f-42cc-bcd0-2dcc5040b204",
          "firstName": "Uncle",
          "lastName": "MoneyPenny",
          "email": "uncle.moneypenny@bitgo.com"
        }
      },
      "InstrumentPrices": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InstrumentPrice"
        }
      },
      "InstrumentPrice": {
        "required": [
          "time",
          "open",
          "high",
          "low",
          "close",
          "base_volume",
          "quote_volume"
        ],
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "open": {
            "type": "number",
            "format": "float"
          },
          "high": {
            "type": "number",
            "format": "float"
          },
          "low": {
            "type": "number",
            "format": "float"
          },
          "close": {
            "type": "number",
            "format": "float"
          },
          "base_volume": {
            "type": "number",
            "format": "float"
          },
          "quote_volume": {
            "type": "number",
            "format": "float"
          }
        },
        "example": {
          "time": "2014-11-07T22:19:28.578Z",
          "open": 576.0590066,
          "high": 576.0590066,
          "low": 575.8330204,
          "close": 575.978887,
          "base_volume": 296.23,
          "quote_volume": 170627.62385
        }
      },
      "Portfolios": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Portfolio"
        }
      },
      "Portfolio": {
        "required": [
          "id",
          "name",
          "organization_id",
          "organization_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "organization_name": {
            "type": "string"
          }
        },
        "example": {
          "id": "c702a0d4-0a09-4d86-bd6a-76540359a497",
          "name": "Main Portfolio",
          "organization_id": "15e108fd-4ea8-458a-b329-cc4750729e9b",
          "organization_name": "Lumina Technologies, Inc."
        }
      },
      "Connections": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Connection"
        }
      },
      "Connection": {
        "required": [
          "id",
          "name",
          "institution_id",
          "institution_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "institution_id": {
            "type": "string",
            "format": "uuid"
          },
          "institution_name": {
            "type": "string"
          },
          "last_sync": {
            "type": "string",
            "format": "date-time"
          },
          "sync_status": {
            "$ref": "#/components/schemas/SyncStatus"
          }
        },
        "example": {
          "id": "35de9881-731b-475b-ab48-c39e3edd9985",
          "name": "CoinbasePro",
          "institution_id": "0911b966-3f6a-4320-8d64-a1d310a9d80e",
          "institution_name": "Coinbase Pro",
          "last_sync": "2018-03-28T16:58:30Z",
          "sync_status": "idle"
        }
      },
      "SyncStatus": {
        "type": "string",
        "enum": [
          "idle",
          "scheduled",
          "processing",
          "error"
        ]
      },
      "PortfolioAccounts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PortfolioAccount"
        }
      },
      "PortfolioAccount": {
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PortfolioAccountType"
          }
        },
        "example": {
          "id": "ca0eda2d-0b76-4aba-94dd-88bc06ea5b92",
          "name": "Coinbase Pro Main Account",
          "type": "exchange"
        }
      },
      "PortfolioAccountType": {
        "type": "string",
        "enum": [
          "checking",
          "exchange",
          "savings",
          "blockchain_wallet",
          "custodial_wallet",
          "unaccounted_assets",
          "blockchain_hd_wallet",
          "custom",
          "broker",
          "blockchain_multisig_wallet",
          "trading_wallet"
        ]
      },
      "InstrumentBalances": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InstrumentBalance"
        }
      },
      "InstrumentBalance": {
        "required": [
          "instrument_id",
          "symbol",
          "quantity",
          "marketPrice",
          "marketValue"
        ],
        "type": "object",
        "properties": {
          "instrument_id": {
            "type": "string",
            "format": "uuid"
          },
          "instrument_symbol": {
            "type": "string",
            "description": "Currency symbol"
          },
          "quantity": {
            "type": "string",
            "format": "decimal"
          },
          "marketPrice": {
            "type": "string",
            "format": "decimal"
          },
          "marketValue": {
            "type": "string",
            "format": "decimal"
          }
        },
        "example": {
          "instrument_id": "6016e0a9-545a-45fb-8370-caab1680956a",
          "instrument_symbol": "BTC",
          "quantity": "0.02713510000000001",
          "marketPrice": "15659.03",
          "marketValue": "424.9093449530002"
        }
      },
      "Transactions": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "Transaction": {
        "required": [
          "id",
          "trade_date",
          "settlement_date",
          "instrument_id",
          "instrument_symbol",
          "type",
          "subtype",
          "fees",
          "unitPrice",
          "quantity",
          "totalAmount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "trade_date": {
            "type": "string",
            "format": "date-time"
          },
          "settlement_date": {
            "type": "string",
            "format": "date-time"
          },
          "product": {
            "type": "string",
            "description": "Product name e.g. BTC-USD"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "subtype": {
            "type": "string"
          },
          "transaction_hash": {
            "type": "string"
          },
          "fees": {
            "type": "string",
            "format": "decimal"
          },
          "unitPrice": {
            "type": "string",
            "format": "decimal"
          },
          "quantity": {
            "type": "string",
            "format": "decimal"
          },
          "totalAmount": {
            "type": "string",
            "format": "decimal"
          }
        },
        "example": {
          "id": "7e0c768e-2d16-4c1e-b39d-06fa20009397",
          "trade_date": "2014-11-07T22:19:28.578Z",
          "settlement_date": "2014-11-07T22:19:28.578Z",
          "product": "BTC-USD",
          "type": "buy",
          "subtype": "deposit",
          "transaction_hash": "",
          "fees": "0",
          "unitPrice": "10000.00",
          "quantity": "0.001",
          "totalAmount": "1"
        }
      },
      "TransactionType": {
        "type": "string",
        "enum": [
          "buy",
          "sell",
          "cash",
          "dividends_interest_fees",
          "pending",
          "transfer",
          "cancel",
          "blockchain_action"
        ]
      },
      "LineItems": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItem"
            }
          }
        }
      },
      "LineItem": {
        "required": [
          "id",
          "account_id",
          "connection_id",
          "transaction_date",
          "transaction_completed_date",
          "instrument_id",
          "instrument_symbol",
          "type",
          "source",
          "unitPrice",
          "quantity",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "exchange_order_id": {
            "type": "string"
          },
          "exchange_trade_id": {
            "type": "string"
          },
          "account_id": {
            "type": "string",
            "format": "uuid"
          },
          "connection_id": {
            "type": "string",
            "format": "uuid"
          },
          "transaction_date": {
            "type": "string",
            "format": "date-time"
          },
          "transaction_completed_date": {
            "type": "string",
            "format": "date-time"
          },
          "instrument_id": {
            "type": "string",
            "format": "uuid"
          },
          "instrument_symbol": {
            "type": "string",
            "description": "Currency symbol"
          },
          "type": {
            "$ref": "#/components/schemas/LineItemType"
          },
          "source": {
            "$ref": "#/components/schemas/LineItemSource"
          },
          "unitPrice": {
            "type": "string",
            "format": "decimal"
          },
          "quantity": {
            "type": "string",
            "format": "decimal"
          },
          "value": {
            "type": "string",
            "format": "decimal"
          },
          "transaction_hash": {
            "type": "string"
          },
          "block_height": {
            "type": "string",
            "format": "integer"
          },
          "sent_address": {
            "type": "string"
          },
          "received_address": {
            "type": "string"
          }
        },
        "example": {
          "id": "9c9989f1-d9e3-4015-93bf-596396d9543d",
          "exchange_order_id": "ca20c088-c10d-440a-8b0d-73763170077f",
          "exchange_trade_id": "cb5f1d08-14f6-42a7-a54b-421941702722",
          "account_id": "7071983a-3349-4a16-98b5-e4b511aee328",
          "connection_id": "c549df20-1517-4308-b8cd-71a70df4ff67",
          "transaction_date": "2014-11-07T22:19:28.578Z",
          "transaction_completed_date": "2014-11-07T22:19:28.578Z",
          "instrument_id": "519824c6-b534-49b4-a636-22dfd0ade5cf",
          "instrument_symbol": "USD",
          "type": "received",
          "source": "api",
          "unitPrice": "1",
          "quantity": "466.21",
          "value": "466.21",
          "transaction_hash": "3c0cb5ac1472571e4b196b1d4a774e41628ae165b1bee6685346ef8bf3a550ac",
          "block_height": "",
          "sent_address": "6bf7dfe3f7b3eaffb91165edb7a81e1523e6490e2497067e7d81600dbbe79ba11e592e5c7fd8",
          "received_address": ""
        }
      },
      "LineItemType": {
        "type": "string",
        "enum": [
          "sent",
          "received"
        ]
      },
      "LineItemSource": {
        "type": "string",
        "enum": [
          "api",
          "csv",
          "manual",
          "system",
          "manual_reconciliation",
          "smart_reconciliation"
        ]
      },
      "Error": {
        "required": [
          "error",
          "errorName",
          "reqId"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "errorName": {
            "type": "string"
          },
          "reqId": {
            "type": "string"
          }
        },
        "example": {
          "error": "invalid permission",
          "errorName": "backend:common:forbidden",
          "reqId": "d41d4d21e63d63b293caf55f2a739a79"
        }
      },
      "TradeUser": {
        "required": [
          "email",
          "firstName",
          "id",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "example": {
          "id": "a253c86c-1f0f-42cc-bcd0-2dcc5040b204",
          "firstName": "Uncle",
          "lastName": "MoneyPenny",
          "email": "uncle.moneypenny@bitgo.com"
        }
      },
      "Account": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        },
        "example": {
          "id": "f230fdebfa084ffebc7e00515f54603f",
          "name": "Uncle MoneyPenny's Trading Wallet"
        }
      },
      "Accounts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Account"
        }
      },
      "AccountBalance": {
        "required": [
          "currencyId",
          "currency",
          "balance",
          "heldBalance",
          "tradableBalance"
        ],
        "type": "object",
        "properties": {
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "type": "string",
            "description": "Currency symbol"
          },
          "balance": {
            "type": "string",
            "format": "decimal",
            "description": "The total balance in the account"
          },
          "heldBalance": {
            "type": "string",
            "format": "decimal",
            "description": "The total balance reserved for some purpose, e.g. a pending withdrawal"
          },
          "tradableBalance": {
            "type": "string",
            "format": "decimal",
            "description": "The total balance available for trading"
          }
        },
        "example": {
          "currencyId": "6016e0a9-545a-45fb-8370-caab1680956a",
          "currency": "BTC",
          "balance": "100.0",
          "heldBalance": "10.0",
          "tradableBalance": "90.0"
        }
      },
      "AccountBalances": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AccountBalance"
        }
      },
      "Order": {
        "required": [
          "id",
          "accountId",
          "time",
          "creationDate",
          "completionDate",
          "type",
          "fundingType",
          "status",
          "product",
          "side",
          "quantity",
          "quantityCurrency",
          "filledQuantity",
          "averagePrice"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string"
          },
          "clientOrderId": {
            "type": "string"
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "description": "DEPRECATED"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "scheduledDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastFillDate": {
            "type": "string",
            "format": "date-time"
          },
          "completionDate": {
            "type": "string",
            "format": "date-time"
          },
          "settleDate": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          },
          "fundingType": {
            "type": "string",
            "enum": [
              "margin",
              "funded"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "product": {
            "type": "string",
            "description": "Product name e.g. BTC-USD"
          },
          "side": {
            "$ref": "#/components/schemas/Side"
          },
          "quantity": {
            "type": "string",
            "format": "decimal",
            "description": "The specified quantity."
          },
          "quantityCurrency": {
            "type": "string",
            "description": "The specified quantity currency."
          },
          "filledQuantity": {
            "type": "string",
            "format": "decimal"
          },
          "averagePrice": {
            "type": "string",
            "format": "decimal"
          }
        },
        "example": {
          "id": "67fd640c-cb6c-4218-80ae-49e79ec15646",
          "accountId": "60e740e7898f7d00064d43769a73dc48",
          "clientOrderId": "myorderid1",
          "time": "2021-08-05T18:05:23.431Z",
          "creationDate": "2021-08-05T18:05:22.286Z",
          "scheduledDate": "2021-08-05T18:05:00.000Z",
          "lastFillDate": "2021-08-05T18:05:23.302Z",
          "completionDate": "2021-08-05T18:05:23.431Z",
          "settleDate": "2021-08-05T20:00:00.000Z",
          "fundingType": "funded",
          "type": "market",
          "status": "completed",
          "product": "BTC-USD",
          "side": "buy",
          "quantity": "1000",
          "quantityCurrency": "USD",
          "filledQuantity": "0.02457152",
          "averagePrice": "40697.32"
        }
      },
      "Orders": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Order"
        }
      },
      "NewOrderRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NewMarketOrderRequest"
          },
          {
            "$ref": "#/components/schemas/NewLimitOrderRequest"
          },
          {
            "$ref": "#/components/schemas/NewTWAPOrderRequest"
          }
        ]
      },
      "NewMarketOrderRequest": {
        "required": [
          "product",
          "quantity",
          "quantityCurrency",
          "side",
          "type"
        ],
        "type": "object",
        "properties": {
          "clientOrderId": {
            "type": "string"
          },
          "product": {
            "type": "string",
            "description": "Product name e.g. BTC-USD"
          },
          "type": {
            "type": "string",
            "description": "Must be set to \"market\""
          },
          "side": {
            "$ref": "#/components/schemas/Side"
          },
          "quantity": {
            "type": "string",
            "format": "decimal"
          },
          "quantityCurrency": {
            "type": "string",
            "description": "The quantity currency must be in quote currency for buy and base currency for sell. e.g. If product is BTC-USD, the base currency will be BTC."
          }
        },
        "example": {
          "clientOrderId": "myorder1",
          "type": "market",
          "product": "BTC-USD",
          "side": "buy",
          "quantity": "10000",
          "quantityCurrency": "USD"
        }
      },
      "NewLimitOrderRequest": {
        "required": [
          "product",
          "quantity",
          "quantityCurrency",
          "side",
          "type",
          "limitPrice"
        ],
        "type": "object",
        "properties": {
          "clientOrderId": {
            "type": "string"
          },
          "product": {
            "type": "string",
            "description": "Product name e.g. BTC-USD"
          },
          "type": {
            "type": "string",
            "description": "Must be set to \"limit\""
          },
          "side": {
            "$ref": "#/components/schemas/Side"
          },
          "quantity": {
            "type": "string",
            "format": "decimal"
          },
          "quantityCurrency": {
            "type": "string",
            "description": "The quantity currency must be in the base currency for both buy and sell. e.g. If product is BTC-USD, the base currency will be BTC."
          },
          "limitPrice": {
            "type": "string",
            "format": "decimal"
          },
          "duration": {
            "type": "integer",
            "description": "Duration of the limit order in minutes."
          }
        },
        "example": {
          "clientOrderId": "myorder1",
          "type": "limit",
          "product": "BTC-USD",
          "side": "buy",
          "quantity": "1",
          "quantityCurrency": "BTC",
          "limitPrice": "10005",
          "duration": 60
        }
      },
      "NewTWAPOrderRequest": {
        "required": [
          "product",
          "quantity",
          "quantityCurrency",
          "side",
          "type",
          "duration",
          "interval"
        ],
        "type": "object",
        "properties": {
          "clientOrderId": {
            "type": "string"
          },
          "product": {
            "type": "string",
            "description": "Product name e.g. BTC-USD"
          },
          "type": {
            "type": "string",
            "description": "Must be set to \"twap\""
          },
          "side": {
            "$ref": "#/components/schemas/Side"
          },
          "quantity": {
            "type": "string",
            "format": "decimal"
          },
          "quantityCurrency": {
            "type": "string",
            "description": "The quantity currency must be in quote currency for buy unless a limit price is specified, in which case buy orders can only be placed in the base currency. For sell, the quantity currency must be in base. e.g. If product is BTC-USD, the base currency will be BTC."
          },
          "limitPrice": {
            "type": "string",
            "format": "decimal"
          },
          "duration": {
            "type": "integer",
            "description": "Duration of the TWAP order in minutes."
          },
          "interval": {
            "type": "integer",
            "description": "Interval of the TWAP order in minutes."
          },
          "scheduledDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "clientOrderId": "myorder1",
          "type": "twap",
          "product": "BTC-USD",
          "side": "buy",
          "quantity": "100000",
          "quantityCurrency": "USD",
          "duration": 60,
          "interval": 5
        }
      },
      "Trade": {
        "required": [
          "id",
          "orderId",
          "time",
          "product",
          "side",
          "price",
          "quantity",
          "settled"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "format": "uuid"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "product": {
            "type": "string",
            "description": "Product name e.g. BTC-USD"
          },
          "side": {
            "$ref": "#/components/schemas/Side"
          },
          "price": {
            "type": "string",
            "format": "decimal"
          },
          "quantity": {
            "type": "string",
            "format": "decimal"
          },
          "settled": {
            "type": "boolean"
          }
        },
        "example": {
          "id": "7e0c768e-2d16-4c1e-b39d-06fa20009397",
          "orderId": "d50ec984-77a8-460a-b958-66f114b0de9b",
          "time": "2014-11-07T22:19:28.578Z",
          "side": "buy",
          "product": "BTC-USD",
          "price": "10000.00",
          "quantity": "0.01",
          "settled": true
        }
      },
      "Trades": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Trade"
        }
      },
      "Currency": {
        "required": [
          "id",
          "name",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "symbol": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "example": {
          "id": "6016e0a9-545a-45fb-8370-caab1680956a",
          "symbol": "BTC",
          "name": "Bitcoin"
        }
      },
      "Currencies": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Currency"
        }
      },
      "Product": {
        "required": [
          "baseCurrencyId",
          "baseCurrency",
          "baseMinSize",
          "id",
          "isTradeDisabled",
          "name",
          "quoteCurrencyId",
          "quoteCurrency",
          "quoteIncrement",
          "quoteMinSize"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Product name e.g. BTC"
          },
          "baseCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "baseCurrency": {
            "type": "string",
            "description": "Currency name e.g. BTC"
          },
          "quoteCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "quoteCurrency": {
            "type": "string",
            "description": "Currency name e.g. USD"
          },
          "baseMinSize": {
            "type": "string",
            "format": "decimal"
          },
          "baseMaxSize": {
            "type": "string",
            "format": "decimal"
          },
          "baseIncrement": {
            "type": "string",
            "format": "decimal"
          },
          "quoteMinSize": {
            "type": "string",
            "format": "decimal"
          },
          "quoteIncrement": {
            "type": "string",
            "format": "decimal"
          },
          "isTradeDisabled": {
            "type": "boolean"
          }
        },
        "example": {
          "id\"": "86d09911-e58e-4f27-ac1f-91d5f9c79952",
          "name": "BTC-USD",
          "baseCurrencyId": "6016e0a9-545a-45fb-8370-caab1680956a",
          "quoteCurrencyId": "7d5d1e8d-e6e1-4676-99af-190012515418",
          "baseCurrency": "BTC",
          "quoteCurrency": "USD",
          "baseMinSize": "0.001",
          "baseMaxSize": "10000.00",
          "quoteIncrement": "0.01"
        }
      },
      "Products": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Product"
        }
      },
      "Level1OrderBookSnapshot": {
        "required": [
          "askPrice",
          "askSize",
          "bidPrice",
          "bidSize",
          "product",
          "time"
        ],
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "product": {
            "type": "string",
            "description": "Product name e.g. BTC"
          },
          "bidPrice": {
            "type": "string",
            "format": "decimal"
          },
          "bidSize": {
            "type": "string",
            "format": "decimal"
          },
          "askPrice": {
            "type": "string",
            "format": "decimal"
          },
          "askSize": {
            "type": "string",
            "format": "decimal"
          }
        },
        "example": {
          "time": "2020-01-14T00:00:00.123Z",
          "product": "BTC-USD",
          "bidPrice": "7090.96",
          "bidSize": "1.253433",
          "askPrice": "7090.97",
          "askSize": "25.23881"
        }
      },
      "Level2OrderBookSnapshot": {
        "required": [
          "asks",
          "bids",
          "product",
          "time"
        ],
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "product": {
            "type": "string",
            "description": "Product name e.g. BTC"
          },
          "bids": {
            "type": "array",
            "description": "An array of levels of [price, size]",
            "items": {
              "type": "string",
              "format": "decimal"
            }
          },
          "asks": {
            "type": "array",
            "description": "An array of levels of [price, size]",
            "items": {
              "type": "string",
              "format": "decimal"
            }
          }
        },
        "example": {
          "time": "2020-01-14T00:00:00.123Z",
          "product": "BTC-USD",
          "bids": [
            [
              "7090.96",
              "1.253433"
            ]
          ],
          "asks": [
            [
              "7090.97",
              "25.23881"
            ]
          ]
        }
      },
      "OrderStatus": {
        "type": "string",
        "enum": [
          "pending_open",
          "open",
          "completed",
          "pending_cancel",
          "canceled",
          "error"
        ]
      },
      "Side": {
        "type": "string",
        "enum": [
          "buy",
          "sell"
        ]
      },
      "StakingRequestPOSTBody": {
        "type": "object",
        "properties": {
          "clientId": {
            "description": "Optional user generated identifier to detect duplicated requests.",
            "type": "string"
          },
          "amount": {
            "description": "Amount to stake in “base units” (i.e. Wei for ETH) For Ethereum the amounts need to be a multiple of 32 Eth (32000000000000000000 Wei).  For Testnet the 32 Eth multiple restriction does not apply.",
            "type": "integer",
            "example": 32000000000000000000
          },
          "type": {
            "description": "Staking Request type = 'STAKE'",
            "type": "string",
            "example": "STAKE"
          }
        },
        "required": [
          "amount",
          "type"
        ]
      },
      "EthStakingRequestPOSTBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingRequestPOSTBody"
          }
        ],
        "type": "object",
        "properties": {
          "gasPrice": {
            "type": "integer",
            "description": "User overridden gas price to apply for the generated transactions for this request.  GasPrice is in “base units”."
          }
        }
      },
      "NearStakingRequestPOSTBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingRequestPOSTBody"
          }
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Amount to stake in “base units”.",
            "type": "integer",
            "example": 12000000000000000000
          }
        }
      },
      "SolStakingRequestPOSTBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingRequestPOSTBody"
          }
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Amount to stake in “base units”.",
            "type": "integer",
            "example": 1000
          }
        }
      },
      "UnStakingRequestPOSTBody": {
        "type": "object",
        "properties": {
          "clientId": {
            "description": "Optional user generated identifier to detect duplicated requests.",
            "type": "string"
          },
          "type": {
            "description": "Staking Request type = 'UNSTAKE'",
            "type": "string",
            "example": "UNSTAKE"
          }
        },
        "required": [
          "type"
        ]
      },
      "NearUnStakingRequestPOSTBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnStakingRequestPOSTBody"
          }
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Amount to stake in “base units”.",
            "type": "integer",
            "example": 12000000000000000000
          }
        },
        "required": [
          "amount",
          "type"
        ]
      },
      "SolUnStakingRequestPOSTBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnStakingRequestPOSTBody"
          }
        ],
        "type": "object",
        "properties": {
          "delegationId": {
            "description": "The delegation Id representing the delegation to unstake.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "StakingRequest": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Staking Request Id.",
            "type": "string"
          },
          "clientId": {
            "description": "Optional clientId if passed into the request.",
            "type": "string"
          },
          "requestUserId": {
            "description": "The id of the user that created the staking request",
            "type": "string"
          },
          "enterpriseId": {
            "description": "The id of the enterprise where the the staking request was created from",
            "type": "string"
          },
          "walletId": {
            "description": "The id of the wallet where the staking request was created from",
            "type": "string"
          },
          "withdrawalAddress": {
            "description": "Withdrawal Address",
            "type": "string"
          },
          "walletType": {
            "description": "The type of wallet the staking request was created from (cold, custodial, hot)",
            "type": "string"
          },
          "type": {
            "description": "The type of staking request.  The types are STAKE and UNSTAKE",
            "type": "string"
          },
          "coin": {
            "description": "The coin to be staked (ETH, NEAR, SOL)",
            "type": "string"
          },
          "createdDate": {
            "description": "The date the staking request was created",
            "type": "string"
          },
          "status": {
            "description": "The status of the staking request (NEW, READY, INITIATED, PARTIAL CONFIRM, CONFIRM, REJECTED).  For Eth the status will change from NEW to READY when a validator has been assigned to a the wallet's address.",
            "type": "string"
          },
          "statusModifiedDate": {
            "description": "The last modified date the status changed",
            "type": "string"
          }
        }
      },
      "EthStakingRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingRequest"
          }
        ],
        "type": "object",
        "properties": {
          "gasPrice": {
            "type": "integer",
            "description": "User overridden gas price to apply for the generated transactions for this request.  GasPrice is in “base units”."
          },
          "delegations": {
            "type": "array",
            "minItems": 1,
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/EthStakingDelegation"
            }
          },
          "transactions": {
            "type": "array",
            "minItems": 1,
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/EthStakingTransaction"
            }
          },
          "amount": {
            "description": "Amount to stake in “base units” (i.e. Wei for ETH) For Ethereum the amounts need to be a multiple of 32 Eth (32000000000000000000 Wei).  For Testnet the 32 Eth multiple restriction does not apply.",
            "type": "integer"
          }
        }
      },
      "NearStakingRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingRequest"
          }
        ],
        "type": "object",
        "properties": {
          "delegations": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/NearStakingDelegation"
            }
          },
          "transactions": {
            "type": "array",
            "minItems": 1,
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/NearStakingTransaction"
            }
          },
          "amount": {
            "description": "Amount to stake in “base units”",
            "type": "integer"
          }
        }
      },
      "SolStakingRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingRequest"
          }
        ],
        "type": "object",
        "properties": {
          "delegations": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/SolStakingDelegation"
            }
          },
          "transactions": {
            "type": "array",
            "minItems": 1,
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/SolStakingTransaction"
            }
          },
          "amount": {
            "description": "Amount to stake in “base units”",
            "type": "integer"
          }
        }
      },
      "StakingDelegation": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Staking Request Id.",
            "type": "string"
          },
          "coin": {
            "description": "The coin to be staked (ETH, NEAR, SOL)",
            "type": "string"
          },
          "walletId": {
            "description": "The id of the wallet where the delegation is tied to",
            "type": "string"
          },
          "delegationAddress": {
            "description": "Delegation Address",
            "type": "string"
          },
          "withdrawalAddress": {
            "description": "Withdrawal Address",
            "type": "string"
          },
          "delegated": {
            "description": "Delegation amount",
            "type": "integer"
          },
          "status": {
            "description": "Delegation status",
            "type": "string"
          },
          "rewards": {
            "description": "Lifetime rewards received",
            "type": "integer"
          },
          "pendingUnstake": {
            "description": "Amount that is pending unstake",
            "type": "integer"
          },
          "apy": {
            "description": "The estimated reward APY (or APR if rewards are not compounding)",
            "type": "number"
          },
          "unstakingFee": {
            "description": "Total fees needed in the wallet to unstake an amount from the delegation",
            "type": "integer"
          },
          "unstakingMin": {
            "description": "Min amount needed to unstake from the delegation",
            "type": "integer"
          }
        }
      },
      "EthStakingDelegation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingDelegation"
          }
        ],
        "type": "object"
      },
      "NearStakingDelegation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingDelegation"
          }
        ],
        "type": "object"
      },
      "SolStakingDelegation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingDelegation"
          }
        ],
        "type": "object"
      },
      "DelegationResults": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "minItems": 1,
            "maxItems": 500,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EthStakingDelegation"
                },
                {
                  "$ref": "#/components/schemas/NearStakingDelegation"
                },
                {
                  "$ref": "#/components/schemas/SolStakingDelegation"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "description": "Page number for paging purposes"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages for paging purposes"
          },
          "totalElements": {
            "type": "integer",
            "description": "Number of elements per page used for paging purposes"
          }
        }
      },
      "EthStakingTransactionSendRequest": {
        "type": "object",
        "properties": {
          "halfSigned": {
            "description": "Half signed transaction object",
            "type": "object",
            "properties": {
              "contractSequenceId": {
                "description": "Contract SequenceId",
                "type": "integer"
              },
              "eip1559": {
                "description": "Eip1559 Params",
                "type": "object",
                "properties": {
                  "maxPriorityFeePerGas": {
                    "type": "integer"
                  },
                  "maxFeePerGas": {
                    "type": "integer"
                  }
                }
              },
              "operationHash": {
                "type": "string"
              },
              "expireTime": {
                "type": "integer"
              },
              "signature": {
                "type": "string"
              }
            }
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "StakingTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Staking Transaction Id",
            "type": "string"
          },
          "stakingRequestId": {
            "description": "Staking Request Id.",
            "type": "string"
          },
          "transactionType": {
            "description": "Transaction type (delegate)",
            "type": "string"
          },
          "createdDate": {
            "description": "The date the transaction was created",
            "type": "string"
          },
          "status": {
            "description": "The status of the transaction (NEW, READY, INITIATED, CONFIRMED, REJECTED).",
            "type": "string"
          },
          "statusModifiedDate": {
            "description": "The last modified date the status changed",
            "type": "string"
          },
          "amount": {
            "description": "Transaction Amount in “base units” (i.e. Wei for ETH)",
            "type": "integer"
          },
          "delegationId": {
            "description": "The staking delegation the transaction is acting on",
            "type": "string"
          },
          "pendingApprovalId": {
            "description": "Pending Approval Id",
            "type": "string"
          },
          "transferId": {
            "description": "Transfer Id",
            "type": "string"
          },
          "txRequestId": {
            "description": "Transaction Request Id for the new Transaction Request API",
            "type": "string"
          }
        },
        "required": [
          "stakingRequestId",
          "transactionType",
          "createdDate",
          "status",
          "statusModifiedDate",
          "delegationId",
          "amount"
        ]
      },
      "EthStakingTransaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingTransaction"
          }
        ],
        "type": "object",
        "properties": {
          "buildParams": {
            "$ref": "#/components/schemas/TransactionBuildParams"
          }
        }
      },
      "NearStakingTransaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingTransaction"
          }
        ],
        "type": "object"
      },
      "SolStakingTransaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakingTransaction"
          }
        ],
        "type": "object"
      },
      "WalletStakingStateAttributes": {
        "type": "object",
        "properties": {
          "spendableAttributes": {
            "$ref": "#/components/schemas/WalletStakingSpendableAttributes"
          },
          "permissionAttributes": {
            "$ref": "#/components/schemas/WalletStakingPermissionAttributes"
          },
          "disclaimerAttributes": {
            "$ref": "#/components/schemas/WalletStakingDisclaimerAttributes"
          }
        }
      },
      "WalletStakingSpendableAttributes": {
        "type": "object",
        "properties": {
          "stakingSpendableAttributes": {
            "$ref": "#/components/schemas/StakingSpendableAttributes"
          },
          "unstakingSpendableAttributes": {
            "$ref": "#/components/schemas/UnStakingSpendableAttributes"
          }
        }
      },
      "WalletStakingPermissionAttributes": {
        "type": "object",
        "properties": {
          "walletPermissionAttributes": {
            "$ref": "#/components/schemas/WalletPermissionAttributes"
          },
          "stakingPermissionAttributes": {
            "$ref": "#/components/schemas/StakingPermissionAttributes"
          },
          "unstakingPermissionAttributes": {
            "$ref": "#/components/schemas/UnstakingPermissionAttributes"
          }
        }
      },
      "WalletStakingDisclaimerAttributes": {
        "type": "object",
        "properties": {
          "stakingDisclaimerAttributes": {
            "$ref": "#/components/schemas/StakingDisclaimerAttributes"
          },
          "unstakingDisclaimerAttributes": {
            "$ref": "#/components/schemas/UnstakingDisclaimerAttributes"
          }
        }
      },
      "StakingSpendableAttributes": {
        "type": "object",
        "properties": {
          "max": {
            "description": "Maximum spendable amount",
            "type": "integer"
          },
          "min": {
            "description": "Minimum spendable amount",
            "type": "integer"
          },
          "fee": {
            "description": "Blockchain fee to submit the transactions needed to stake",
            "type": "integer"
          },
          "netMax": {
            "description": "Maximum spendable amount minus fees",
            "type": "integer"
          },
          "netMin": {
            "description": "Net Minimum spendable amount plus fees"
          }
        }
      },
      "UnStakingSpendableAttributes": {
        "type": "object",
        "properties": {
          "max": {
            "description": "Maximum spendable amount",
            "type": "integer"
          },
          "min": {
            "description": "Minimum spendable amount",
            "type": "integer"
          },
          "fee": {
            "description": "Blockchain fee to submit the transactions needed to unstake",
            "type": "integer"
          },
          "multipleDelegations": {
            "description": "If more than one active staking delegation exist for a wallet",
            "type": "boolean"
          }
        }
      },
      "WalletPermissionAttributes": {
        "type": "object",
        "properties": {
          "hasEnoughAdmins": {
            "description": "Does the wallet have enough admins to do a staking request",
            "type": "boolean"
          },
          "numberOfRequiredAdmin": {
            "description": "Number of required admins to do a hot staking request",
            "type": "integer"
          }
        }
      },
      "StakingPermissionAttributes": {
        "type": "object",
        "properties": {
          "enabled": {
            "description": "If the wallet can submit a staking request",
            "type": "string"
          },
          "disabledReason": {
            "description": "Reason for staking request submittal has been disabled",
            "type": "string"
          }
        }
      },
      "UnstakingPermissionAttributes": {
        "type": "object",
        "properties": {
          "enabled": {
            "description": "If the wallet can submit a unstaking request",
            "type": "string"
          },
          "disabledReason": {
            "description": "Reason for unstaking request submittal has been disabled",
            "type": "string"
          }
        }
      },
      "StakingDisclaimerAttributes": {
        "type": "object",
        "properties": {
          "info": {
            "description": "Disclaimer info",
            "type": "string"
          },
          "transactionsNeeded": {
            "description": "Number of transactions needed for a staking request",
            "type": "integer"
          }
        }
      },
      "UnstakingDisclaimerAttributes": {
        "type": "object",
        "properties": {
          "info": {
            "description": "Disclaimer info",
            "type": "string"
          },
          "transactionsNeeded": {
            "description": "Number of transactions needed for an unstaking request",
            "type": "integer"
          }
        }
      },
      "StakingWallet": {
        "type": "object",
        "properties": {
          "enterpriseId": {
            "description": "The id of the enterprise where the the staking request was created from",
            "type": "string"
          },
          "walletId": {
            "description": "The id of the wallet where the staking request was created from",
            "type": "string"
          },
          "walletType": {
            "description": "The type of wallet the staking request was created from (cold, custodial, hot)",
            "type": "string"
          },
          "coin": {
            "description": "The coin to be staked (ETH, NEAR, SOL)",
            "type": "string"
          },
          "delegated": {
            "description": "Delegated staked amount in “base units”",
            "type": "integer"
          },
          "pendingUnstake": {
            "description": "Amount that is actively being unstaked",
            "type": "integer"
          },
          "rewards": {
            "description": "Rewards received ammount in “base units”",
            "type": "integer"
          },
          "apy": {
            "description": "Reward accrual annual percentage rate.  Estimated yearly based on the last 7 days.  Same methodology as leading beacon chain validator aggregators (e.g. https://beaconcha.in/validators)",
            "type": "number"
          },
          "createdDate": {
            "description": "The date the staking request was created.",
            "type": "string"
          },
          "modifiedDate": {
            "description": "The last date staking wallet was modified",
            "type": "string"
          }
        }
      },
      "StakingEnterprise": {
        "type": "object",
        "properties": {
          "enterpriseId": {
            "description": "The id of the enterprise where the the staking request was created from",
            "type": "string"
          },
          "coin": {
            "description": "The coin to be staked (ETH, NEAR, SOL)",
            "type": "string"
          },
          "delegated": {
            "description": "Delegated staked amount in “base units”",
            "type": "integer"
          },
          "rewards": {
            "description": "Reward accrual ammount in “base units”",
            "type": "integer"
          },
          "apy": {
            "description": "Reward accrual annual percentage rate.  Estimated yearly based on the last 7 days.  Same methodology as leading beacon chain validator aggregators (e.g. https://beaconcha.in/validators)",
            "type": "number"
          }
        }
      },
      "StakingRewards": {
        "type": "object",
        "properties": {
          "rewards": {
            "description": "An array of rewards",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StakingReward"
            }
          },
          "page": {
            "type": "integer",
            "description": "Page number for paging purposes"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages for paging purposes"
          },
          "totalElements": {
            "type": "integer",
            "description": "Number of elements per page used for paging purposes"
          }
        }
      },
      "StakingReward": {
        "type": "object",
        "properties": {
          "reward": {
            "description": "The reward in \"base units\"",
            "type": "integer"
          },
          "walletId": {
            "description": "The wallet Id",
            "type": "string"
          },
          "enterpriseId": {
            "description": "The enterprise Id",
            "type": "string"
          },
          "date": {
            "description": "The date time of the reward",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "reward",
          "date"
        ]
      },
      "DelegationAccruals": {
        "type": "object",
        "properties": {
          "accruals": {
            "description": "An array of delegation accruals",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegationAccrual"
            }
          },
          "page": {
            "type": "integer",
            "description": "Page number for paging purposes"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages for paging purposes"
          },
          "totalElements": {
            "type": "integer",
            "description": "Number of elements per page used for paging purposes"
          }
        }
      },
      "DelegationAccrual": {
        "type": "object",
        "properties": {
          "rewardsReceived": {
            "description": "Total rewards received over lifetime of the wallet",
            "type": "integer"
          },
          "delegated": {
            "description": "Total delegated (staked)",
            "type": "integer"
          },
          "pendingDelegated": {
            "description": "Total pending to be delegated (staked)",
            "type": "integer"
          },
          "pendingUndelegated": {
            "description": "Total pending to be undelegated (unstaked)",
            "type": "integer"
          },
          "spendable": {
            "description": "Total spendable (withdrawalable) amount in the wallet",
            "type": "integer"
          },
          "locked": {
            "description": "Total amount locked but not delegated (staked).  Example is staking rewards that are not re-staked and compounding",
            "type": "integer"
          },
          "delegationId": {
            "description": "The delegation Id",
            "type": "string"
          },
          "delegationAddress": {
            "description": "The delegation Address",
            "type": "string"
          },
          "withdrawalAddress": {
            "description": "The withdrawal address",
            "type": "string"
          },
          "walletId": {
            "description": "The wallet Id",
            "type": "string"
          },
          "enterpriseId": {
            "description": "The enterprise Id",
            "type": "string"
          },
          "coin": {
            "description": "The coin to be staked (ETH, NEAR, SOL)",
            "type": "string"
          },
          "date": {
            "description": "The date time of the accrual record",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TransactionBuildParams": {
        "type": "object",
        "properties": {
          "recipients": {
            "description": "Recipient build params data",
            "type": "object",
            "properties": {
              "amount": {
                "description": "Amount to stake in \"base units\"",
                "type": "integer"
              },
              "address": {
                "description": "Address",
                "type": "string"
              },
              "data": {
                "description": "Staking data (ABI format)",
                "type": "string"
              }
            }
          },
          "stakingParams": {
            "description": "Staking params",
            "type": "object",
            "properties": {
              "requestId": {
                "type": "string"
              },
              "amount": {
                "description": "Amount to stake in \"base units\"",
                "type": "integer"
              },
              "validator": {
                "description": "Validator address",
                "type": "string"
              },
              "actionType": {
                "description": "Action type (e.g. delegate)",
                "type": "string"
              }
            }
          },
          "gasPrice": {
            "description": "Gas price in \"base units\"",
            "type": "integer"
          },
          "gasLimit": {
            "description": "Gas limit in \"base units\"",
            "type": "integer"
          }
        }
      },
      "StakingRequests": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "minItems": 1,
            "maxItems": 500,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EthStakingRequestWithTransactions"
                },
                {
                  "$ref": "#/components/schemas/NearStakingRequestWithTransactions"
                },
                {
                  "$ref": "#/components/schemas/SolStakingRequestWithTransactions"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "description": "Page number for paging purposes"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages for paging purposes"
          },
          "totalElements": {
            "type": "integer",
            "description": "Number of elements per page used for paging purposes"
          }
        }
      },
      "EthStakingRequestWithTransactions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EthStakingRequest"
          },
          {
            "type": "object",
            "properties": {
              "transactions": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EthStakingTransaction"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "NearStakingRequestWithTransactions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NearStakingRequest"
          },
          {
            "type": "object",
            "properties": {
              "transactions": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/NearStakingTransaction"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "SolStakingRequestWithTransactions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SolStakingRequest"
          },
          {
            "type": "object",
            "properties": {
              "transactions": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SolStakingTransaction"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "StakingError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "failedValidations": {
            "type": "object"
          }
        }
      },
      "Coin": {
        "title": "Coin",
        "description": "A cryptocurrency or token ticker symbol.",
        "type": "string",
        "example": "btc"
      },
      "Id": {
        "type": "string",
        "pattern": "^[0-9a-f]{32}$",
        "example": "59cd72485007a239fb00282ed480da1f"
      },
      "Chain": {
        "type": "integer",
        "example": 1,
        "enum": [
          0,
          1,
          10,
          11,
          20,
          21,
          30,
          31
        ]
      },
      "AddressString": {
        "type": "string",
        "example": "2MvrwRYBAuRtPTiZ5MyKg42Ke55W3fZJfZS",
        "maxLength": 250
      },
      "IntegerString": {
        "type": "string",
        "pattern": "^-?\\d+$",
        "example": "2000000"
      },
      "AddressCoinSpecificXlm": {
        "type": "object",
        "properties": {
          "memoId": {
            "description": "Latest memo id generated for the wallet",
            "$ref": "#/components/schemas/IntegerString",
            "example": "1"
          },
          "rootAddress": {
            "type": "string",
            "description": "Root address of the wallet",
            "example": "GCTTCPH4IIDK7P72FFAEJ3ZFN6WDHJH6GGMRPHPM56ZWGIQ7B3XTIJAM"
          }
        }
      },
      "AddressBalance": {
        "type": "object",
        "properties": {
          "updated": {
            "type": "string",
            "description": "The last time a transaction affected the balance of this address",
            "format": "date-time"
          },
          "balance": {
            "type": "integer",
            "description": "The cleared balance of the address",
            "example": 50000
          },
          "balanceString": {
            "type": "string",
            "description": "String representation of `balance`. Guaranteed to not lose precision.",
            "example": "50000"
          },
          "totalReceived": {
            "type": "integer",
            "description": "The total amount received on this address (in the chain's base unit)"
          },
          "totalSent": {
            "type": "integer",
            "description": "The total amount send from this address (in the chain's base unit)"
          },
          "confirmedBalanceString": {
            "type": "string",
            "description": "The total balance of confirmed transactions for the address (in the chain's base unit).\nGuaranteed to not lose precision.\n",
            "example": "40000"
          },
          "spendableBalanceString": {
            "type": "string",
            "description": "The total balance of the address (in the chain's base unit) which may\nbe used as inputs for creating new transactions in string representation.\nGuaranteed to not lose precision.\n",
            "example": "40000"
          }
        }
      },
      "AddressLabel": {
        "type": "string",
        "example": "Bob's Hot Wallet Address",
        "maxLength": 250,
        "description": "A human-readable label for the address."
      },
      "AddressType": {
        "type": "string",
        "example": "p2sh",
        "enum": [
          "p2sh",
          "p2sh-p2wsh",
          "p2wsh"
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "platform public id for an address"
          },
          "address": {
            "$ref": "#/components/schemas/AddressString"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "index": {
            "type": "integer"
          },
          "coin": {
            "type": "string"
          },
          "lastNonce": {
            "type": "integer",
            "default": -1
          },
          "wallet": {
            "description": "The wallet which contains this address",
            "$ref": "#/components/schemas/Id"
          },
          "coinSpecific": {
            "type": "object",
            "description": "Properties which are specific to certain coin types",
            "properties": {
              "xlm": {
                "$ref": "#/components/schemas/AddressCoinSpecificXlm"
              },
              "txlm": {
                "$ref": "#/components/schemas/AddressCoinSpecificXlm"
              }
            }
          },
          "balance": {
            "type": "object",
            "description": "Balance of the address. In case of Eth and Celo, if returnBalancesForToken is passed with includeBalances, then\nit will return token balance in the address object. This field will be present only when\n`includeBalances` query param is passed as true.\n",
            "$ref": "#/components/schemas/AddressBalance"
          },
          "label": {
            "$ref": "#/components/schemas/AddressLabel"
          },
          "addressType": {
            "$ref": "#/components/schemas/AddressType"
          }
        }
      },
      "NextBatchPrevId": {
        "type": "string",
        "format": "uuid",
        "example": "585951a5df8380e0e3063e9f",
        "description": "When a result set is truncated, this field returns the id of the last object in the previous batch.  To get the next batch of results, pass this value via the `prevId` query parameter."
      },
      "GetAddressesResponse": {
        "type": "object",
        "properties": {
          "coin": {
            "type": "string"
          },
          "totalAddressCount": {
            "type": "integer",
            "description": "Total number of addresses which match the provided query parameters.\n**Note:** for wallets with many addresses (100,000 or more), this property may be omitted for performance reasons.\nIf the total address count is needed for a large wallet, the `includeTotalAddressCount` query parameter can be used to\nforce an address count to be returned with the initial page of addresses.\n"
          },
          "pendingAddressCount": {
            "description": "Total number of addresses pending on-chain initialization on this wallet\n**Note:** for wallets with many addresses (100,000 or more), this property may be omitted for performance reasons.\nIf the pending address count is needed for a large wallet, the `includeTotalAddressCount` query parameter can be\nused to force an address count to be returned with the initial page of addresses.\n",
            "type": "integer"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "nextBatchPrevId": {
            "$ref": "#/components/schemas/NextBatchPrevId"
          },
          "count": {
            "description": "Total number of addresses returned in this response",
            "x-internal": true,
            "type": "integer"
          }
        }
      },
      "ApiErrorNoName": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "requestId": {
            "type": "string",
            "description": "Client request id"
          }
        },
        "required": [
          "error",
          "requestId"
        ]
      },
      "ApiError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiErrorNoName"
          },
          {
            "properties": {
              "context": {
                "type": "object",
                "description": "Properties that apply to a specific error name"
              },
              "name": {
                "type": "string",
                "description": "Error code"
              }
            },
            "required": [
              "name"
            ]
          }
        ]
      },
      "InvalidId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiErrorNoName"
          },
          {
            "properties": {
              "context": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Id"
                  }
                }
              }
            },
            "required": [
              "context"
            ]
          }
        ]
      },
      "InvalidWalletId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InvalidId"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "Error code",
                "enum": [
                  "InvalidWalletId"
                ]
              }
            },
            "required": [
              "name"
            ]
          }
        ]
      },
      "CreateAddressRequest": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain",
            "default": 1
          },
          "label": {
            "$ref": "#/components/schemas/AddressLabel"
          },
          "lowPriority": {
            "description": "Whether the deployment of the address forwarder contract should use a low priority fee key (ETH only)",
            "type": "boolean",
            "default": false
          },
          "gasPrice": {
            "description": "Explicit gas price to use when deploying the forwarder contract (ETH only). If not given, defaults to the current estimated network gas price.",
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "eip1559": {
            "type": "object",
            "description": "(ETH forwarderVersion: 0 wallets only) Specify eip1559 fee parameters in forwarder creation transactions.",
            "properties": {
              "maxPriorityFeePerGas": {
                "type": "string",
                "description": "Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens."
              },
              "maxFeePerGas": {
                "type": "string",
                "description": "Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens."
              }
            },
            "required": [
              "maxPriorityFeePerGas",
              "maxFeePerGas"
            ]
          },
          "forwarderVersion": {
            "type": "integer",
            "description": "(ETH only) Specify forwarder version to use in address creation. In an effort to improve the cost of creating ETH forwarders, we have developed a new set of forwarder contracts that take advantage of several improvements. Specifically, forwarders are deployed as a simple proxy to a single implementation (https://eips.ethereum.org/EIPS/eip-1167), and forwarders are deployed using the CREATE2 opcode, enabling them to only be deployed when needed (https://eips.ethereum.org/EIPS/eip-1014). These new forwarders operate identically to current ETH forwarders.\nThis flag is used to specify the forwarder contract version desired when deploying a forwarder contract. Use 0 for the old forwarder (https://github.com/BitGo/eth-multisig-v2), 1 for the new fee-improved forwarder (https://github.com/BitGo/eth-multisig-v4), and 2 for NFT supported forwarders.",
            "minimum": 0,
            "maximum": 2
          },
          "onToken": {
            "description": "Create an address for the given token",
            "type": "string",
            "example": "ofcbtc",
            "x-internal": true
          },
          "format": {
            "description": "Format to use for the new address, if the coin which supports multiple formats for an address.\nCurrently, Bitcoin Cash is the only coin which has support for multiple address formats. For Bitcoin Cash, BitGo supports both the base58 (legacy) address format, as well as the newer CashAddr format. The default address format is base58. To request a CashAddr formatted address instead, use the value `cashaddr` as the format.",
            "type": "string",
            "example": "cashaddr"
          }
        }
      },
      "DeployForwarderRequest": {
        "type": "object",
        "properties": {
          "forceDeploy": {
            "type": "boolean",
            "description": "Default: false Use forceDeploy: true to deploy the forwarder even if pendingDeployment flag is set as false"
          },
          "gasPrice": {
            "description": "Explicit gas price to use when deploying the forwarder contract (ETH only). If not given, defaults to the current estimated network gas price.",
            "type": "number"
          },
          "eip1559": {
            "type": "object",
            "description": "Specify eip1559 fee parameters in forwarder creation transactions.",
            "properties": {
              "maxPriorityFeePerGas": {
                "type": "number",
                "description": "Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens."
              },
              "maxFeePerGas": {
                "type": "number",
                "description": "Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens."
              }
            },
            "required": [
              "maxPriorityFeePerGas",
              "maxFeePerGas"
            ]
          }
        }
      },
      "DeployForwarderAndForwardTokenResponse": {
        "type": "object",
        "properties": {
          "txId": {
            "type": "string"
          }
        }
      },
      "ForwardTokenRequest": {
        "type": "object",
        "properties": {
          "tokenName": {
            "type": "string",
            "description": "Name of token that needs to be forwarded from the address\n"
          },
          "forceFlush": {
            "type": "boolean",
            "description": "Default: false Use forceFlush: true to flush the tokens from forwarder irrespective of the balance of the forwarders"
          },
          "gasPrice": {
            "description": "Explicit gas price to use when forwarding token from the forwarder contract (ETH and Celo only). If not given, defaults to the current estimated network gas price.",
            "type": "number"
          },
          "eip1559": {
            "type": "object",
            "description": "Specify eip1559 fee parameters in token forwarding transaction.",
            "properties": {
              "maxPriorityFeePerGas": {
                "type": "number",
                "description": "Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens."
              },
              "maxFeePerGas": {
                "type": "number",
                "description": "Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens."
              }
            },
            "required": [
              "maxPriorityFeePerGas",
              "maxFeePerGas"
            ]
          }
        }
      },
      "GetSingleAddressResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Address"
          },
          {
            "type": "object",
            "description": "Extended address properties (not available for XRP addresses)",
            "properties": {
              "balance": {
                "type": "object",
                "properties": {
                  "updated": {
                    "description": "The last time a transaction affected the balance of this address",
                    "type": "string",
                    "format": "date-time"
                  },
                  "balance": {
                    "description": "The cleared balance",
                    "type": "integer"
                  },
                  "totalReceived": {
                    "description": "The total amount received on this address (in the chain's base unit)",
                    "type": "integer"
                  },
                  "totalSent": {
                    "description": "The total amount send from this address (in the chain's base unit)",
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "UpdateAddressRequest": {
        "type": "object",
        "properties": {
          "label": {
            "description": "New label which should apply to this address. The caller needs admin permissions for the associated wallet if the label already has a value. Otherwise view or spend permissions are fine because the label has not been set yet. This is due to the fact that customers use address labels to associate addresses with their customers.",
            "$ref": "#/components/schemas/AddressLabel"
          }
        }
      },
      "GetAddressProofResponse": {
        "type": "object",
        "description": "Proof of address ownership",
        "properties": {
          "address": {
            "description": "The address",
            "type": "string"
          },
          "chain": {
            "description": "The coin name ('BITCOIN' or 'ETHEREUM')",
            "type": "string"
          },
          "iou": {
            "description": "True if this is an IOU",
            "type": "boolean"
          },
          "signature": {
            "description": "The proof signature",
            "type": "string"
          },
          "prefix": {
            "description": "A 64-character random string used to generate the proof",
            "type": "string"
          },
          "proofType": {
            "description": "The type of proof",
            "type": "string"
          },
          "auxProofData": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "description": "The type of data",
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "script": {
                      "description": "The REDEEM_SCRIPT or WITNESS_SCRIPT associated with the address",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GetPotentialStuckTxsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "nonce": {
              "type": "integer",
              "description": "The nonce value of the potentially stuck transaction."
            },
            "cause": {
              "type": "string",
              "description": "The reason this transaction is potentially stuck."
            },
            "message": {
              "type": "string",
              "description": "Possible steps to remediate the stuck transaction."
            }
          }
        }
      },
      "CoinOperationNotSupported": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiErrorNoName"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "Error code",
                "enum": [
                  "CoinOperationNotSupported"
                ]
              }
            },
            "required": [
              "name"
            ]
          }
        ]
      },
      "GeographicAddress": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Legal name of the enterprise, not neccessarily the enterprise name"
          },
          "street": {
            "type": "string",
            "description": "Address line"
          },
          "street2": {
            "type": "string",
            "description": "Optional 2nd address line"
          },
          "suite": {
            "type": "string",
            "description": "Optional suite number"
          },
          "city": {
            "type": "string",
            "description": "City name"
          },
          "state": {
            "type": "string",
            "description": "State or region"
          },
          "postalCode": {
            "type": "string",
            "description": "Postcal code"
          },
          "country": {
            "type": "string",
            "description": "ISO 3166-1 Alpha-3 country code"
          }
        },
        "required": [
          "name",
          "street",
          "city",
          "state",
          "postalCode",
          "country"
        ],
        "example": {
          "name": "Jane Doe",
          "street": "1",
          "street2": "Wall Street",
          "suite": "3",
          "city": "New York",
          "state": "NY",
          "postalCode": "10005",
          "country": "USA"
        }
      },
      "AdditionalEnterpriseInfo": {
        "type": "object",
        "properties": {
          "regulator": {
            "type": "string",
            "x-internal": true
          },
          "regulatorId": {
            "type": "string",
            "x-internal": true
          },
          "contact": {
            "$ref": "#/components/schemas/GeographicAddress"
          }
        },
        "required": [
          "contact"
        ]
      },
      "MutabilityConstraint": {
        "type": "string",
        "description": "Specifies whether a BitGo admin can change `lockDate`\n* `managed` - Not locked, but requires approval from a BitGo admin to change\n* `permanent` - `lockDate` cannot be changed\n* `sticky` - Not included in bulk unlock, but `lockDate` can be individually changed\n",
        "enum": [
          "managed",
          "permanent",
          "sticky"
        ]
      },
      "PolicyRuleTriggers": {
        "type": "string",
        "enum": [
          "advancedWhitelist",
          "allTx",
          "coinAddressWhitelist",
          "coinAddressBlacklist",
          "velocityLimit",
          "webhook"
        ],
        "description": "What causes this rule to trigger"
      },
      "ListRuleEntryType": {
        "type": "string",
        "enum": [
          "address",
          "walletId",
          "enterpriseId"
        ],
        "description": "the kind of resource a list rule entry refers to"
      },
      "AdvancedListRuleEntry": {
        "type": "object",
        "properties": {
          "item": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AddressString"
                  },
                  {
                    "$ref": "#/components/schemas/Id"
                  }
                ]
              },
              {
                "description": "Either a valid address or a wallet or enterprise id. Must be unique in this whitelist."
              }
            ]
          },
          "metaData": {
            "type": "object",
            "description": "Any data about this entry that is not used to determine when to enforce the policy",
            "properties": {
              "label": {
                "type": "string",
                "description": "A client-specified label for this entry. Label must be unique or not set."
              },
              "owner": {
                "type": "string",
                "description": "The legal owner of the address/ wallet/ enterprise",
                "example": "Legal Owner LLC"
              }
            },
            "additionalProperties": true
          },
          "type": {
            "$ref": "#/components/schemas/ListRuleEntryType"
          }
        },
        "required": [
          "item",
          "type"
        ]
      },
      "PolicyRuleConditions": {
        "description": "Parameters for the type",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "amountString": {
                "$ref": "#/components/schemas/IntegerString",
                "description": "The amount for the limit"
              },
              "timeWindow": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2678400,
                "description": "Time window in seconds for a velocity limit, between 1 and a month"
              },
              "groupTags": {
                "x-internal": true,
                "description": "Internal, avoid using",
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Id"
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              "excludeTags": {
                "x-internal": true,
                "description": "Internal, avoid using",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Id"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "amountString": {
                "$ref": "#/components/schemas/IntegerString",
                "description": "The amount for the limit, specified in USD"
              },
              "timeWindow": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2678400,
                "description": "Time window in seconds for a velocity limit, between 1 and 30 days"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "addresses": {
                "description": "Addresses allowed/restricted for a whitelist/blacklist",
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/components/schemas/Id"
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "entries": {
                "description": "Entries specifying which addresses/ wallets/ enterprises are on the whitelist",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdvancedListRuleEntry"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "the url to query for the webhook"
              }
            }
          }
        ]
      },
      "ApprovalsRequired": {
        "type": "integer",
        "minimum": 1,
        "example": 1
      },
      "PolicyRuleActions": {
        "description": "What happens when this rule is triggered",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "deny",
              "getApproval",
              "getFinalApproval",
              "getCustodianApproval",
              "getIdVerification",
              "noop"
            ]
          },
          "approvalsRequired": {
            "$ref": "#/components/schemas/ApprovalsRequired"
          },
          "userIds": {
            "description": "For a final approver action, who can approve",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          }
        },
        "required": [
          "type"
        ]
      },
      "PolicyRule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "lockDate": {
            "type": "string",
            "description": "The time at which this rule becomes immutable",
            "format": "date-time"
          },
          "mutabilityConstraint": {
            "$ref": "#/components/schemas/MutabilityConstraint"
          },
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "type": {
            "$ref": "#/components/schemas/PolicyRuleTriggers"
          },
          "condition": {
            "$ref": "#/components/schemas/PolicyRuleConditions"
          },
          "action": {
            "$ref": "#/components/schemas/PolicyRuleActions"
          }
        },
        "required": [
          "id",
          "lockDate",
          "type",
          "action"
        ]
      },
      "Policy": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "type": "string"
          },
          "latest": {
            "type": "boolean"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRule"
            }
          },
          "version": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "latest",
          "rules",
          "version"
        ]
      },
      "BitGoOrg": {
        "type": "string",
        "description": "BitGo Organization related to this entity",
        "enum": [
          "BitGo Inc",
          "BitGo Trust",
          "BitGo New York",
          "BitGo Germany",
          "BitGo Switzerland"
        ]
      },
      "EmergencyPhone": {
        "type": "string",
        "description": "Phone number for emergencies",
        "example": "+11234567890"
      },
      "Freeze": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time",
            "description": "When the freeze started"
          },
          "expires": {
            "type": "string",
            "format": "date-time",
            "description": "When the freeze will end"
          }
        }
      },
      "EnterpriseKycState": {
        "type": "string",
        "enum": [
          "unverified",
          "approved",
          "rejected"
        ]
      },
      "EnterpriseLicenses": {
        "type": "string",
        "enum": [
          "bitgoNetwork",
          "marginTrading",
          "mtGox",
          "portfolioAPI",
          "portfolioBasic",
          "portfolioProfessional",
          "portfolioInstitutional",
          "tax",
          "tradeAPI",
          "staking",
          "metaMaskInstitutional",
          "cryptoCompare",
          "elliptic",
          "instantFeeHotWallet"
        ]
      },
      "EnterprisePricingType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "starter",
              "developer"
            ]
          }
        }
      },
      "ViewAllWallets": {
        "example": true,
        "description": "All users on the enterprise can view all enterprise wallets, even if they are not viewers on the wallet itself",
        "type": "boolean"
      },
      "VideoIdWaived": {
        "example": true,
        "description": "Whether the customer has waived the need for Video ID on low risk withdrawals.",
        "type": "boolean"
      },
      "Enterprise": {
        "type": "object",
        "properties": {
          "additionalEnterpriseInfo": {
            "$ref": "#/components/schemas/AdditionalEnterpriseInfo"
          },
          "admin": {
            "type": "object",
            "properties": {
              "policy": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "approvedVideoIdUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Id"
            },
            "description": "IDs of users on the enterprise that are approved for custodial video ID"
          },
          "approvalsRequired": {
            "type": "integer",
            "description": "How many Enterprise Admins are required for action to fire",
            "example": 1
          },
          "bitgoEthKey": {
            "type": "string",
            "description": "The public portion of the ethererum key generated for the enterprise fee address"
          },
          "bitgoOrg": {
            "$ref": "#/components/schemas/BitGoOrg"
          },
          "canAccessBorrowing": {
            "type": "boolean",
            "description": "whether the enterprise has the licence for BitGo Prime Borrowing"
          },
          "canAccessLending": {
            "type": "boolean",
            "description": "whether the enterprise has the licence for BitGo Prime Lending"
          },
          "canAccessSettlement": {
            "type": "boolean",
            "description": "whether the enterprise has the licence to utilize settlement functionality"
          },
          "canAccessTrading": {
            "type": "boolean",
            "description": "whether the enterprise has the licence to access BitGo Trading"
          },
          "canCreateColdWallet": {
            "type": "boolean",
            "description": "whether the enterprise has the license to create cold wallets"
          },
          "canCreateCustodialWallets": {
            "type": "boolean",
            "description": "whether the enterprise has the license to create custodial wallets"
          },
          "canCreateHotWallet": {
            "type": "boolean",
            "description": "whether the enterprise has the license to create hot wallets"
          },
          "canCreateOffchainWallet": {
            "type": "boolean",
            "description": "whether the enterprise has the license to create trading accounts",
            "x-internal": true
          },
          "emergencyPhone": {
            "$ref": "#/components/schemas/EmergencyPhone"
          },
          "ethFeeAddress": {
            "type": "string",
            "description": "The eth fee address used to pay for network transaction fees of this enterprise"
          },
          "freeze": {
            "$ref": "#/components/schemas/Freeze"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "kycState": {
            "$ref": "#/components/schemas/EnterpriseKycState",
            "x-internal": true
          },
          "latestSAVersionSigned": {
            "type": "integer",
            "example": 0,
            "x-internal": true
          },
          "licenses": {
            "$ref": "#/components/schemas/EnterpriseLicenses",
            "x-internal": true
          },
          "mutablePolicyWindow": {
            "type": "integer",
            "description": "Time in seconds after which policies on this Enterprise cannot be updated",
            "example": 172800
          },
          "name": {
            "type": "string",
            "example": "Small Company"
          },
          "pricingPlan": {
            "type": "string",
            "description": "The pricing plan of the enterprise",
            "x-internal": true
          },
          "pricingType": {
            "$ref": "#/components/schemas/EnterprisePricingType",
            "x-internal": true
          },
          "primaryContact": {
            "$ref": "#/components/schemas/Id",
            "description": "The Id of the User who is the primary contact"
          },
          "usersViewAllWallets": {
            "$ref": "#/components/schemas/ViewAllWallets"
          },
          "videoIdWaived": {
            "$ref": "#/components/schemas/VideoIdWaived"
          }
        },
        "required": [
          "id"
        ]
      },
      "EnterpriseTag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "EnterpriseResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Enterprise"
          },
          {
            "type": "object",
            "properties": {
              "tags": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnterpriseTag"
                }
              }
            }
          }
        ]
      },
      "InvalidEnterpriseId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InvalidId"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "Error code",
                "enum": [
                  "InvalidEnterpriseId"
                ]
              }
            },
            "required": [
              "name"
            ]
          }
        ]
      },
      "LegalIdentifiers": {
        "type": "object",
        "properties": {
          "legalPersonName": {
            "type": "string",
            "description": "Legal name of the Enterprise",
            "x-internal": true
          }
        },
        "required": [
          "legalPersonName"
        ],
        "example": {
          "legalPersonName": "Pineapple Capital Inc"
        }
      },
      "UpdateEnterprise": {
        "type": "object",
        "properties": {
          "legalIdentifiers": {
            "$ref": "#/components/schemas/LegalIdentifiers"
          },
          "additionalEnterpriseInfo": {
            "$ref": "#/components/schemas/AdditionalEnterpriseInfo"
          },
          "approvalsRequired": {
            "type": "integer",
            "minimum": 1,
            "description": "How many Enterprise Admins are required for action to fire"
          },
          "usersViewAllWallets": {
            "type": "boolean",
            "description": "Allow users to view all wallets"
          }
        }
      },
      "EnterprisePermission": {
        "type": "string",
        "enum": [
          "admin"
        ]
      },
      "Email": {
        "type": "string",
        "format": "email",
        "example": "user@example.com"
      },
      "V1PendingApproval": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "bitcoinAddress": {
            "type": "string",
            "example": "1G47mSr3oANXMafVrR8UC4pzV7FEAzo3r9",
            "x-internal": true
          },
          "enterprise": {
            "$ref": "#/components/schemas/Id",
            "description": "The Id of the associated enterprise"
          },
          "walletId": {
            "type": "string",
            "example": "1G47mSr3oANXMafVrR8UC4pzV7FEAzo3r9",
            "description": "The base address of the associated wallet"
          },
          "creator": {
            "$ref": "#/components/schemas/Id",
            "description": "The Id of the User that created the Pending Approval"
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "info": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "bitcoinAddressWhitelistRequest",
                  "userChangeRequest",
                  "policyRuleRequest",
                  "dailyLimitPolicyRequest",
                  "transactionRequest",
                  "tagUpdateRequest",
                  "updateEnterpriseRequest"
                ]
              },
              "updateEnterpriseRequest": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "add",
                      "remove"
                    ]
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EnterprisePermission"
                    }
                  },
                  "userId": {
                    "$ref": "#/components/schemas/Id",
                    "description": "The Id of the User to be added to or removed from the Enterprise"
                  },
                  "email": {
                    "$ref": "#/components/schemas/Email",
                    "description": "E-Mail address of newly added users"
                  }
                }
              },
              "updateApprovalsRequiredRequest": {
                "type": "object",
                "properties": {
                  "requestedApprovalsRequired": {
                    "type": "number",
                    "minimum": 1,
                    "description": "the number of approvalsRequired that should be changed to"
                  }
                }
              }
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "pending",
              "approved",
              "rejected"
            ]
          },
          "walletUserIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Id"
            },
            "description": "an array of all the Users on the Wallet who need to see this Pending Approval"
          },
          "approvalsRequired": {
            "type": "number",
            "minimum": 1
          }
        }
      },
      "EnterprisesResponse": {
        "type": "object",
        "properties": {
          "enterprises": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Enterprise"
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "user",
                          "wallet",
                          "pending",
                          "walletV2",
                          "pendingV2"
                        ]
                      },
                      "description": "In what way(s) the user is associated with the enterprise"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "EnterpriseUser": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "username": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "EnterpriseUserWithVerified": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EnterpriseUser"
          },
          {
            "type": "object",
            "properties": {
              "verified": {
                "type": "boolean",
                "description": "Whether the user has verified their email",
                "x-internal": true
              }
            }
          }
        ]
      },
      "EnterpriseUsersResponse": {
        "type": "object",
        "properties": {
          "adminUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnterpriseUserWithVerified"
            }
          },
          "nonAdminUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnterpriseUserWithVerified"
            }
          },
          "walletUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnterpriseUser"
            }
          },
          "kycState": {
            "$ref": "#/components/schemas/EnterpriseKycState",
            "x-internal": true
          },
          "incomplete": {
            "type": "boolean",
            "description": "Set to true if the Enterprise has at least 500 v1 or v2 wallets . If there are more than 500 wallets (either v1 or v2) it could mean that some Wallets were not considered for finding all Users in the walletUsers field."
          }
        }
      },
      "AddEnterpriseUser": {
        "type": "object",
        "properties": {
          "permission": {
            "type": "string",
            "enum": [
              "admin"
            ]
          },
          "username": {
            "type": "string",
            "format": "email",
            "description": "The Username of the User that should be added to the Enterprise"
          },
          "usernames": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email",
              "description": "The Username of a User that should be added to the Enterprise"
            }
          }
        }
      },
      "V1PendingApprovals": {
        "type": "object",
        "properties": {
          "pendingApprovals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/V1PendingApproval"
            }
          }
        }
      },
      "DeleteEnterpriseUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "username"
        ]
      },
      "IntegerOrString": {
        "oneOf": [
          {
            "type": "string",
            "example": "2000000"
          },
          {
            "type": "integer"
          }
        ]
      },
      "IntegerOrIntegerString": {
        "oneOf": [
          {
            "type": "string",
            "pattern": "^-?\\d+$",
            "example": "2000000"
          },
          {
            "type": "integer"
          }
        ]
      },
      "PendingApprovalTransactionRequest": {
        "type": "object",
        "properties": {
          "transactionRequest": {
            "type": "object",
            "properties": {
              "buildParams": {
                "type": "object"
              },
              "coinSpecific": {
                "type": "object"
              },
              "comment": {
                "type": "string"
              },
              "fee": {
                "$ref": "#/components/schemas/IntegerOrString"
              },
              "isUnsigned": {
                "type": "boolean"
              },
              "recipients": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "$ref": "#/components/schemas/AddressString"
                    },
                    "amount": {
                      "$ref": "#/components/schemas/IntegerOrIntegerString"
                    },
                    "data": {
                      "type": "string"
                    }
                  }
                }
              },
              "requestedAmount": {
                "$ref": "#/components/schemas/IntegerOrIntegerString"
              },
              "sourceWallet": {
                "$ref": "#/components/schemas/Id"
              },
              "triggeredPolicy": {
                "$ref": "#/components/schemas/Id"
              },
              "validTransaction": {
                "type": "string"
              },
              "validTransactionHash": {
                "type": "string"
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "transactionRequest"
            ]
          }
        }
      },
      "IdArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Id"
        },
        "example": [
          "585951a5df8380e0e3063e9f",
          "585951a5df8380e0e304a553"
        ]
      },
      "WalletTypePublic": {
        "type": "string",
        "description": "The type describes who owns the keys to the wallet and how they are stored. `cold` wallets are wallets where the private key of the user key is stored exclusively outside of BitGo's system. `custodial` means that this wallet is a cold wallet where BitGo owns the keys. Only customers of the BitGo Trust can create this kind of wallet. `custodialPaired` means that this is a hot wallet that is owned by the customer but it will be linked to a cold (custodial) wallet where BitGo owns the keys. This option is only available to customers of BitGo Inc. BitGo stores an encrypted private key for the user key of `hot` wallets. `trading` wallets are trading accounts where the coin is `ofc`.",
        "enum": [
          "cold",
          "custodial",
          "custodialPaired",
          "hot",
          "trading"
        ]
      },
      "TransactionRequestState": {
        "type": "string",
        "enum": [
          "initialized",
          "pendingApproval",
          "pendingUserSignature",
          "pendingDelivery",
          "signed",
          "delivered",
          "canceled",
          "rejected"
        ]
      },
      "DateTime": {
        "type": "string",
        "format": "date-time",
        "example": "2018-05-05T19:46:22.019Z"
      },
      "AccountBaseBuildOptions": {
        "type": "object",
        "properties": {
          "nonce": {
            "type": "string"
          }
        }
      },
      "SOLBuildOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountBaseBuildOptions"
          },
          {
            "type": "object",
            "properties": {
              "memo": {
                "type": "string"
              }
            }
          }
        ]
      },
      "BaseIntent": {
        "type": "object",
        "properties": {
          "intentType": {
            "type": "string"
          },
          "sequenceId": {
            "type": "string",
            "description": "A `sequenceId` is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a `sequenceId` you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because BitGo only confirms one send request per `sequenceId` (and fails all subsequent attempts), you can retry sending without the risk of double spending. The `sequenceId` is only visible to users on the wallet and is not shared publicly. It is the responsibility of the caller to keep track of this ID.\n",
            "example": "abc123"
          },
          "comment": {
            "type": "string",
            "description": "The `comment` is only visible to users on the wallet and is not shared publicly."
          }
        },
        "required": [
          "intentType"
        ]
      },
      "BaseStakeIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseIntent"
          },
          {
            "type": "object",
            "properties": {
              "stakingRequestId": {
                "type": "string"
              }
            },
            "required": [
              "stakingRequestId"
            ]
          }
        ]
      },
      "WithdrawIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseStakeIntent"
          },
          {
            "type": "object",
            "properties": {
              "intentType": {
                "type": "string",
                "enum": [
                  "claim"
                ]
              }
            },
            "required": [
              "intentType"
            ]
          }
        ]
      },
      "Amount": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value should be a valid number.",
            "example": "100"
          },
          "symbol": {
            "type": "string",
            "description": "The coin or token the value is referring to.",
            "example": "usdc"
          }
        },
        "required": [
          "value",
          "symbol"
        ]
      },
      "SOLClaimIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SOLBuildOptions"
          },
          {
            "$ref": "#/components/schemas/WithdrawIntent"
          },
          {
            "type": "object",
            "properties": {
              "stakingAddress": {
                "type": "string",
                "description": "The staking account.\n"
              },
              "amount": {
                "$ref": "#/components/schemas/Amount",
                "description": "The amount, in lamports, to claim.\n"
              }
            }
          }
        ],
        "required": [
          "stakingAddress",
          "amount"
        ]
      },
      "TokenEnablement": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "EnableTokenIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseIntent"
          },
          {
            "type": "object",
            "properties": {
              "intentType": {
                "type": "string",
                "enum": [
                  "enableToken"
                ]
              },
              "enableTokens": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TokenEnablement"
                }
              }
            },
            "required": [
              "intentType",
              "enableTokens"
            ]
          }
        ]
      },
      "SOLCreateAssociatedTokenAccountIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SOLBuildOptions"
          },
          {
            "$ref": "#/components/schemas/EnableTokenIntent"
          }
        ]
      },
      "TxAddress": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "options": {
            "type": "object"
          }
        },
        "required": [
          "address"
        ]
      },
      "RecipientEntry": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/TxAddress"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "data": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "amount"
        ]
      },
      "PaymentIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseIntent"
          },
          {
            "type": "object",
            "properties": {
              "intentType": {
                "type": "string",
                "enum": [
                  "payment"
                ]
              },
              "recipients": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RecipientEntry"
                }
              }
            }
          }
        ]
      },
      "SOLPaymentIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SOLBuildOptions"
          },
          {
            "$ref": "#/components/schemas/PaymentIntent"
          }
        ]
      },
      "StakeIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseStakeIntent"
          },
          {
            "type": "object",
            "properties": {
              "intentType": {
                "type": "string",
                "enum": [
                  "stake"
                ]
              }
            },
            "required": [
              "intentType"
            ]
          }
        ]
      },
      "SOLStakeIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SOLBuildOptions"
          },
          {
            "$ref": "#/components/schemas/StakeIntent"
          },
          {
            "type": "object",
            "properties": {
              "validatorAddress": {
                "type": "string",
                "description": "The validator to which the coins will be delegated to.\n"
              },
              "amount": {
                "$ref": "#/components/schemas/Amount",
                "description": "The amount, in lamports, to delegate.\n"
              }
            }
          }
        ],
        "required": [
          "validatorAddress",
          "amount"
        ]
      },
      "UnstakeIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseStakeIntent"
          },
          {
            "type": "object",
            "properties": {
              "intentType": {
                "type": "string",
                "enum": [
                  "unstake"
                ]
              }
            },
            "required": [
              "intentType"
            ]
          }
        ]
      },
      "SOLUnstakeIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SOLBuildOptions"
          },
          {
            "$ref": "#/components/schemas/UnstakeIntent"
          },
          {
            "type": "object",
            "properties": {
              "stakingAddress": {
                "type": "string",
                "description": "The staking account.\n"
              }
            }
          }
        ],
        "required": [
          "stakingAddress"
        ]
      },
      "DOTFeeOptions": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "unit": {
            "type": "string",
            "enum": [
              "baseUnit",
              "cpu",
              "ram"
            ]
          },
          "formula": {
            "type": "string",
            "enum": [
              "fixed",
              "feeRate",
              "perKB",
              "custom"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "base",
              "max",
              "tip"
            ]
          }
        },
        "required": [
          "amount"
        ]
      },
      "DOTBuildOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountBaseBuildOptions"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/DOTFeeOptions"
              }
            }
          }
        ]
      },
      "DOTPaymentIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DOTBuildOptions"
          },
          {
            "$ref": "#/components/schemas/PaymentIntent"
          },
          {
            "type": "object",
            "properties": {
              "proxy": {
                "type": "string"
              }
            }
          }
        ]
      },
      "NearStakeIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StakeIntent"
          },
          {
            "type": "object",
            "properties": {
              "recipients": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RecipientEntry"
                }
              }
            },
            "required": [
              "recipients"
            ]
          }
        ]
      },
      "NearUnstakeIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnstakeIntent"
          },
          {
            "type": "object",
            "properties": {
              "recipients": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RecipientEntry"
                }
              }
            },
            "required": [
              "recipients"
            ]
          }
        ]
      },
      "NearWithdrawIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WithdrawIntent"
          },
          {
            "type": "object",
            "properties": {
              "recipients": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RecipientEntry"
                }
              }
            },
            "required": [
              "recipients"
            ]
          }
        ]
      },
      "FeeOption": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "enum": [
              "baseUnit",
              "cpu",
              "ram"
            ]
          },
          "formula": {
            "type": "string",
            "enum": [
              "fixed",
              "feeRate",
              "perKB",
              "custom",
              "perVKB"
            ]
          },
          "feeType": {
            "type": "string",
            "enum": [
              "base",
              "max",
              "tip"
            ]
          },
          "gasLimit": {
            "type": "number"
          },
          "gasPrice": {
            "type": "number"
          }
        }
      },
      "EIP1559FeeOptions": {
        "type": "object",
        "properties": {
          "gasLimit": {
            "type": "number"
          },
          "maxFeePerGas": {
            "type": "number"
          },
          "maxPriorityFeePerGas": {
            "type": "number"
          }
        }
      },
      "HopParams": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string"
          },
          "userReqSig": {
            "type": "string"
          },
          "gasPriceMax": {
            "type": "number"
          }
        }
      },
      "ETHBuildOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountBaseBuildOptions"
          },
          {
            "type": "object",
            "properties": {
              "feeOptions": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/FeeOption"
                  },
                  {
                    "$ref": "#/components/schemas/EIP1559FeeOptions"
                  }
                ]
              },
              "hopParams": {
                "$ref": "#/components/schemas/HopParams"
              },
              "isTss": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ETHPaymentIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentIntent"
          },
          {
            "$ref": "#/components/schemas/ETHBuildOptions"
          },
          {
            "type": "object",
            "properties": {
              "selfSend": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AccelerationIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseIntent"
          },
          {
            "type": "object",
            "properties": {
              "intentType": {
                "type": "string",
                "enum": [
                  "acceleration"
                ]
              },
              "txid": {
                "type": "string"
              }
            },
            "required": [
              "txid"
            ]
          }
        ]
      },
      "ETHAccelerationIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccelerationIntent"
          },
          {
            "$ref": "#/components/schemas/ETHBuildOptions"
          },
          {
            "type": "object",
            "properties": {
              "feeOptions": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/FeeOption"
                  },
                  {
                    "$ref": "#/components/schemas/EIP1559FeeOptions"
                  }
                ]
              }
            },
            "required": [
              "feeOptions"
            ]
          }
        ]
      },
      "TransactionRequestIntent": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/SOLClaimIntent"
          },
          {
            "$ref": "#/components/schemas/SOLCreateAssociatedTokenAccountIntent"
          },
          {
            "$ref": "#/components/schemas/SOLPaymentIntent"
          },
          {
            "$ref": "#/components/schemas/SOLStakeIntent"
          },
          {
            "$ref": "#/components/schemas/SOLUnstakeIntent"
          },
          {
            "$ref": "#/components/schemas/DOTPaymentIntent"
          },
          {
            "$ref": "#/components/schemas/NearStakeIntent"
          },
          {
            "$ref": "#/components/schemas/NearUnstakeIntent"
          },
          {
            "$ref": "#/components/schemas/NearWithdrawIntent"
          },
          {
            "$ref": "#/components/schemas/ETHPaymentIntent"
          },
          {
            "$ref": "#/components/schemas/ETHAccelerationIntent"
          }
        ]
      },
      "TransactionRequestBase": {
        "type": "object",
        "properties": {
          "txRequestId": {
            "type": "string",
            "description": "A unique ID for the TxRequest document across all wallets. The combination of the txRequestId and version will always be unique."
          },
          "version": {
            "type": "number",
            "description": "The version of the document. Data changes are done only with inserts and incrementing the version."
          },
          "latest": {
            "type": "boolean",
            "description": "A boolean flag that indicates whether the document is the latest version of the TxRequest."
          },
          "walletId": {
            "type": "string",
            "description": "The id of the Wallet the TxRequest is for."
          },
          "walletType": {
            "$ref": "#/components/schemas/WalletTypePublic",
            "description": "The type describes who owns the keys to the wallet associated to the TxRequest."
          },
          "enterpriseId": {
            "type": "string",
            "description": "If the wallet that owns the TxRequest is owned by an enterprise then this is the Id of said enterprise."
          },
          "state": {
            "$ref": "#/components/schemas/TransactionRequestState"
          },
          "date": {
            "$ref": "#/components/schemas/DateTime",
            "description": "The date and time this version of the TxRequest document was created."
          },
          "userId": {
            "type": "string",
            "description": "The Id of the User that produced this version of the TxRequest document. Could have created a new document or updated an existing document."
          },
          "intent": {
            "$ref": "#/components/schemas/TransactionRequestIntent"
          },
          "intents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionRequestIntent"
            }
          },
          "pendingApprovalId": {
            "type": "string",
            "description": "The id of the Pending Approval that was created for the TxRequest if one was required."
          }
        },
        "required": [
          "txRequestId",
          "version",
          "latest",
          "walletId",
          "state",
          "date",
          "userId",
          "intent"
        ]
      },
      "TransactionRequestUnsignedTransaction": {
        "type": "object",
        "properties": {
          "serializedTxHex": {
            "type": "string",
            "description": "The unsigned transaction as a hex string."
          },
          "signableHex": {
            "type": "string",
            "description": "The portion of a transaction used to generate a signature (may or may not be the same as serializedTxHex) as a hex string."
          },
          "derivationPath": {
            "type": "string",
            "description": "A bip32 path."
          },
          "feeInfo": {
            "type": "object",
            "properties": {
              "feeString": {
                "type": "string"
              },
              "fee": {
                "type": "number"
              }
            },
            "required": [
              "fee",
              "feeInfo"
            ]
          }
        },
        "required": [
          "serializedTxHex",
          "signableHex"
        ]
      },
      "KeyShareSource": {
        "type": "string",
        "enum": [
          "user",
          "backup",
          "bitgo"
        ],
        "example": "user"
      },
      "SignatureShare": {
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/KeyShareSource",
            "description": "The source of the signature share."
          },
          "to": {
            "$ref": "#/components/schemas/KeyShareSource",
            "description": "The recipient of the signature share."
          },
          "share": {
            "type": "string",
            "description": "The signature share."
          }
        },
        "required": [
          "from",
          "to",
          "share"
        ]
      },
      "TransactionRequestLite": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "unsignedTxs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequestUnsignedTransaction",
                  "description": "Holds all unsigned transactions that will be used to fulfill the TxRequest for TSS wallets."
                }
              },
              "signatureShares": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SignatureShare",
                  "description": "Only used for TSS coins. This is used to collect signature shares from and exchange them with the user."
                }
              },
              "txHashes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The hashes of all transactions from the TxRequest that have been signed and are pending broadcast."
                }
              }
            }
          }
        ],
        "required": [
          "txRequestId",
          "version",
          "latest",
          "walletId",
          "state",
          "date",
          "userId",
          "intent"
        ]
      },
      "TransactionState": {
        "type": "string",
        "enum": [
          "initialized",
          "pendingSignature",
          "signed",
          "held",
          "delivered",
          "invalidSignature",
          "rejected"
        ]
      },
      "Transaction-2": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/TransactionState"
          },
          "unsignedTx": {
            "$ref": "#/components/schemas/TransactionRequestUnsignedTransaction",
            "description": "Holds the unsigned transaction for this transaction in a tx-request."
          },
          "signatureShares": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignatureShare",
              "description": "Only used for TSS coins. This is used to collect signature shares from and exchange them with the user. Holds the signature shares for this transaction in a tx-request."
            }
          },
          "txHash": {
            "type": "string",
            "description": "The hash of the transaction from the TxRequest that has been signed and is pending broadcast."
          }
        },
        "required": [
          "state",
          "unsignedTx"
        ]
      },
      "TransactionRequestFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "transactions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Transaction-2",
                  "description": "This is where we store all transaction information."
                }
              }
            }
          }
        ],
        "required": [
          "txRequestId",
          "version",
          "latest",
          "walletId",
          "state",
          "date",
          "userId",
          "intent",
          "transactions"
        ]
      },
      "TransactionRequest": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/TransactionRequestLite"
          },
          {
            "$ref": "#/components/schemas/TransactionRequestFull"
          }
        ],
        "required": [
          "txRequestId",
          "version",
          "latest",
          "walletId",
          "state",
          "date",
          "userId",
          "intent"
        ]
      },
      "PendingApprovalTransactionRequestFull": {
        "type": "object",
        "properties": {
          "transactionRequestFull": {
            "type": "object",
            "properties": {
              "txRequestId": {
                "type": "string"
              },
              "policyUniqueId": {
                "$ref": "#/components/schemas/Id"
              },
              "verificationItems": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "verificationRuleId": {
                "type": "string"
              },
              "videoApprovers": {
                "$ref": "#/components/schemas/IdArray"
              },
              "walletRebalanceEventId": {
                "$ref": "#/components/schemas/Id"
              },
              "txRequest": {
                "$ref": "#/components/schemas/TransactionRequest"
              }
            },
            "required": [
              "txRequestId"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "transactionRequestFull"
            ]
          }
        }
      },
      "PendingApprovalUserChangeRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "userChangeRequest"
            ]
          },
          "userChangeRequest": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "permissions": {
                "type": "string"
              },
              "userChanged": {
                "$ref": "#/components/schemas/Id"
              }
            }
          }
        }
      },
      "PendingApprovalPolicyRuleRequest": {
        "type": "object",
        "properties": {
          "policyRuleRequest": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "update": {
                "type": "object",
                "properties": {
                  "action": {
                    "$ref": "#/components/schemas/PolicyRuleActions"
                  },
                  "coin": {
                    "$ref": "#/components/schemas/Coin"
                  },
                  "condition": {
                    "type": "object",
                    "properties": {
                      "excludeTags": {
                        "$ref": "#/components/schemas/IdArray"
                      },
                      "groupTags": {
                        "$ref": "#/components/schemas/IdArray"
                      }
                    },
                    "additionalProperties": true
                  },
                  "id": {
                    "type": "string",
                    "description": "the id of the rule that is being updated"
                  },
                  "type": {
                    "$ref": "#/components/schemas/PolicyRuleTriggers"
                  }
                }
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "policyRuleRequest"
            ]
          }
        }
      },
      "PendingApprovalUpdateApprovalsRequiredRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "updateApprovalsRequiredRequest"
            ]
          },
          "updateApprovalsRequiredRequest": {
            "type": "object",
            "properties": {
              "requestedApprovalsRequired": {
                "type": "number"
              }
            }
          }
        }
      },
      "PendingApprovalEnterpriseModificationResponse": {
        "type": "object",
        "properties": {
          "policyRuleRequest": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "updateEnterpriseRequest": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "updateEnterpriseRequest"
                    ]
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "add",
                      "remove"
                    ]
                  },
                  "permission": {
                    "type": "string",
                    "enum": [
                      "admin"
                    ]
                  },
                  "userId": {
                    "type": "string"
                  },
                  "email": {
                    "$ref": "#/components/schemas/Email",
                    "description": "E-Mail address of newly added users"
                  }
                }
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "policyRuleRequest"
            ]
          }
        }
      },
      "PendingApprovalStatePending": {
        "type": "string",
        "enum": [
          "pending",
          "awaitingSignature",
          "pendingFinalApproval",
          "pendingCustodianApproval",
          "pendingVideoApproval",
          "pendingIdVerification"
        ]
      },
      "PendingApprovalStateResolved": {
        "type": "string",
        "enum": [
          "approved",
          "processing",
          "rejected"
        ]
      },
      "PendingApprovalState": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/PendingApprovalStatePending"
          },
          {
            "$ref": "#/components/schemas/PendingApprovalStateResolved"
          }
        ]
      },
      "PendingApproval": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "wallet": {
            "description": "",
            "$ref": "#/components/schemas/Id"
          },
          "enterprise": {
            "$ref": "#/components/schemas/Id"
          },
          "creator": {
            "$ref": "#/components/schemas/Id"
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PendingApprovalTransactionRequest"
              },
              {
                "$ref": "#/components/schemas/PendingApprovalTransactionRequestFull"
              },
              {
                "$ref": "#/components/schemas/PendingApprovalUserChangeRequest"
              },
              {
                "$ref": "#/components/schemas/PendingApprovalPolicyRuleRequest"
              },
              {
                "$ref": "#/components/schemas/PendingApprovalUpdateApprovalsRequiredRequest"
              },
              {
                "$ref": "#/components/schemas/PendingApprovalEnterpriseModificationResponse"
              }
            ]
          },
          "state": {
            "$ref": "#/components/schemas/PendingApprovalState"
          },
          "scope": {
            "description": "What kind of entity the Pending Approval is tied to",
            "type": "string",
            "enum": [
              "enterprise",
              "wallet"
            ]
          },
          "userIds": {
            "description": "All the Users who should see this Pending Approval",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "approvalsRequired": {
            "$ref": "#/components/schemas/ApprovalsRequired"
          },
          "walletLabel": {
            "type": "string"
          }
        }
      },
      "PendingApprovals": {
        "type": "object",
        "properties": {
          "pendingApprovals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PendingApproval"
            }
          }
        }
      },
      "FreezeEnterprise": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "seconds to freeze the enterprise for",
            "default": 3600
          }
        }
      },
      "WalletLimit": {
        "type": "object",
        "properties": {
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "limit": {
            "type": "integer"
          },
          "count": {
            "type": "integer",
            "minimum": 0
          },
          "isCustodial": {
            "type": "boolean",
            "enum": [
              true
            ]
          }
        },
        "required": [
          "coin",
          "count"
        ]
      },
      "WalletLimitsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WalletLimit"
        }
      },
      "TransferState": {
        "type": "string",
        "example": "confirmed",
        "description": "The status of this Transfer",
        "enum": [
          "signed",
          "unconfirmed",
          "confirmed",
          "pendingApproval",
          "removed",
          "failed",
          "rejected"
        ]
      },
      "TxId": {
        "type": "string",
        "description": "The on-chain transaction id",
        "example": "b8a828b98dbf32d9fd1875cbace9640ceb8c82626716b4a64203fdc79bb46d26"
      },
      "Transfer": {
        "type": "object",
        "properties": {
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "wallet": {
            "$ref": "#/components/schemas/Id"
          },
          "enterprise": {
            "$ref": "#/components/schemas/Id"
          },
          "txid": {
            "$ref": "#/components/schemas/TxId"
          },
          "height": {
            "type": "integer",
            "description": "The height of the block this Transfer was confirmed in (999999999 if unconfirmed)"
          },
          "heightId": {
            "type": "string",
            "description": "The unique height id of the block"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date this Transfer was last updated"
          },
          "type": {
            "type": "string",
            "description": "Defines whether or not this Transfer was sent or received by the user",
            "enum": [
              "send",
              "receive"
            ]
          },
          "value": {
            "type": "integer",
            "description": "The total value (in base units) sent by this Transfer (may be approximate for ETH and other coins where amounts in base units can exceed 2^53 - 1)"
          },
          "valueString": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerString"
              },
              {
                "description": "The total value (in base units) sent by this Transfer represented as a String"
              }
            ]
          },
          "baseValue": {
            "type": "integer",
            "description": "The value (in base units) sent by this Transfer without network fees, represented"
          },
          "baseValueString": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerString"
              },
              {
                "description": "The value (in base units) sent by this Transfer without network fees, represented as a String"
              }
            ]
          },
          "feeString": {
            "type": "string",
            "description": "The Transfer's fee (in base units) represented as a String"
          },
          "payGoFee": {
            "type": "integer",
            "description": "The Transfer's BitGo fee (in base units)"
          },
          "payGoFeeString": {
            "type": "string",
            "description": "The Transfer's BitGo fee (in base units) represented as a String"
          },
          "usd": {
            "type": "number",
            "description": "The amount of USD of this Transfer (will be negative if it's a send)"
          },
          "usdRate": {
            "type": "number",
            "description": "The USD price at the time this Transfer was created"
          },
          "state": {
            "$ref": "#/components/schemas/TransferState"
          },
          "tags": {
            "type": "array",
            "description": "The tags to be used on this Transfer (used in Policies)",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "history": {
            "type": "array",
            "description": "An audit log of events that have happened to the Transfer during its lifecycle",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date of this history object"
                },
                "user": {
                  "$ref": "#/components/schemas/Id"
                },
                "action": {
                  "type": "string",
                  "enum": [
                    "created",
                    "signed",
                    "unconfirmed",
                    "confirmed",
                    "approved",
                    "commented",
                    "removed",
                    "failed",
                    "rejected"
                  ]
                },
                "comment": {
                  "type": "string",
                  "description": "If this history object is of action `commented`, this is the comment from the user"
                }
              }
            }
          },
          "comment": {
            "type": "string",
            "description": "A comment from the user"
          },
          "vSize": {
            "type": "integer",
            "description": "The size of the transaction"
          },
          "nSegwitInputs": {
            "type": "integer",
            "x-internal": true,
            "description": "DEPRECATED. Number of segwit inputs on the transfer."
          },
          "coinSpecific": {
            "type": "object",
            "description": "Transfer fields specific to each coin type"
          },
          "sequenceId": {
            "type": "string",
            "description": "A `sequenceId` is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a `sequenceId` you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because the system only confirms one send request per `sequenceId` (and fails all subsequent attempts), you can retry sending without the risk of double spending. The `sequenceId` is only visible to users on the wallet and is not shared publicly.\n"
          },
          "entries": {
            "type": "array",
            "description": "An array of objects describing the change in address balances made as a result of this Transfer",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "An address affected by this Transfer",
                  "example": "2NAUwNgXaoFj2VVnSEvNLGuez8CfdU2UCMZ"
                },
                "wallet": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Id"
                    },
                    {
                      "description": "Only visible when the user has access to the wallet"
                    }
                  ]
                },
                "value": {
                  "type": "integer",
                  "description": "The change (in base units) in the address's balance"
                },
                "valueString": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IntegerString"
                    },
                    {
                      "description": "The change (in base units) in the address's balance represented as a String"
                    }
                  ]
                },
                "isChange": {
                  "type": "boolean",
                  "description": "True if this address is a change address (only exists for UTXO coins) and if this is a `sent` Transfer"
                },
                "isPayGo": {
                  "type": "boolean",
                  "description": "True if this address is the BitGo PayGo wallet"
                },
                "token": {
                  "type": "string",
                  "description": "If this is a token entry, the token's symbol",
                  "example": "omg"
                }
              }
            },
            "required": [
              "address",
              "valueString"
            ]
          },
          "usersNotified": {
            "type": "boolean",
            "description": "Whether BitGo already sent notifications to the users of the transfer wallet"
          }
        },
        "required": [
          "id",
          "coin",
          "wallet",
          "txid",
          "height",
          "date",
          "confirmations",
          "type",
          "valueString",
          "usd",
          "usdRate",
          "state",
          "tags",
          "history",
          "comment",
          "coinSpecific"
        ]
      },
      "AnnotatedTransfer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Transfer"
          },
          {
            "type": "object",
            "properties": {
              "confirmations": {
                "type": "integer",
                "description": "The number of blocks that have been confirmed since this Transfer's block was confirmed"
              },
              "entries": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "If this address was labeled by the user, this is the label"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "UnspentId": {
        "type": "string",
        "description": "The id of the unspent in the form \\<txid\\>:\\<tx_index\\>",
        "example": "003f688cc349f1fca8ac5ffa21671ca911b6ef351085c60733ed8c2ebf162cb8:2"
      },
      "Unspent": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UnspentId"
          },
          "address": {
            "type": "string",
            "description": "The address of this unspent",
            "example": "2MsKxhhkDo5WaLaYRGA9Cr3iSQPyXsu6Fi2"
          },
          "value": {
            "type": "integer"
          },
          "valueString": {
            "$ref": "#/components/schemas/IntegerString"
          },
          "blockHeight": {
            "type": "integer",
            "description": "The block this Unspent was created in"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date this unspent was created",
            "example": "2017-03-25T23:01:40.248Z"
          },
          "coinbase": {
            "type": "boolean",
            "description": "True if this unspent came from the coinbase transaction"
          },
          "wallet": {
            "$ref": "#/components/schemas/Id"
          },
          "fromWallet": {
            "$ref": "#/components/schemas/Id"
          },
          "chain": {
            "type": "integer",
            "description": "The type of this unspent's address (P2SH, P2WSH, etc...)",
            "example": 0
          },
          "index": {
            "type": "integer",
            "description": "A monotonic counter used when creating new addresses"
          },
          "redeemScript": {
            "type": "string",
            "description": "The Script program used to cryptographically verify spending this unspent",
            "example": "522102f1e990044d2a8be43d5b500bbdcb36277b97a4b07e01c5101ae8ec1568bfd6532103dab7dc82f2fc8c28200c1bdeca9c4cf181e0ca257395829cbd599395048afb57210205422e711827d8356f2fb75334d863941dd7eb45bd5788fa231dc5fa755135b653ae"
          },
          "witnessScript": {
            "type": "string",
            "description": "The segwit Script program used to cryptographically verify spending this unspent",
            "example": "52210351311cd81144e6cbdba561d24dfc22644cb02d053339d4beace03231b3be4f372103a8d0c1a375b9ee1a2411f9f8e18373be7f228b18260f63bbfca48809170ed08b2103c3bd8bd074657bbe9ee6714b31a4a54b6fd5b5cda0e1030122f9bf46b5034f6b53ae"
          },
          "isSegwit": {
            "type": "boolean"
          }
        }
      },
      "AnnotatedTransferWithInputsOutputs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnnotatedTransfer"
          },
          {
            "type": "object",
            "properties": {
              "inputs": {
                "type": "array",
                "description": "If this is a Transfer on a UTXO coin, the array of inputs",
                "items": {
                  "$ref": "#/components/schemas/Unspent"
                }
              },
              "outputs": {
                "type": "array",
                "description": "If this is a Transfer on a UTXO coin, the array of outputs",
                "items": {
                  "$ref": "#/components/schemas/Unspent"
                }
              }
            }
          }
        ]
      },
      "TransfersResponse": {
        "type": "object",
        "properties": {
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnnotatedTransferWithInputsOutputs"
            }
          },
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "nextBatchPrevId": {
            "$ref": "#/components/schemas/NextBatchPrevId"
          }
        },
        "required": [
          "transfers",
          "coin"
        ]
      },
      "EstimateTransactionFees": {
        "type": "object",
        "properties": {
          "feePerKb": {
            "type": "integer",
            "description": "Fee per kilobyte for a transaction to be confirmed across two or more blocks. Defaults to 2 if `numBlocks` is not provided in the request query.",
            "example": 15902
          },
          "cpfpFeePerKb": {
            "type": "integer",
            "description": "Child pays for parent (CPFP) fee per kilobyte where the fee includes the fees for all unconfirmed transactions dependent on this transaction."
          },
          "numBlocks": {
            "type": "integer",
            "description": "The target block confirmation.",
            "example": 2
          },
          "confidence": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "description": "(BTC only) Confidence, as a percentage, in the accuracy of the fee estimate.",
            "example": 80
          },
          "multiplier": {
            "type": "number",
            "description": "(BTC only) Three decimal value used to estimate fees when the mempool is congested; otherwise defaults to 1.",
            "x-internal": true
          },
          "feeByBlockTarget": {
            "type": "object",
            "description": "(BTC only) Fee estimates are stored as a key-value pair where the key is the block target (between 1 and 1000) and the value is the corresponding fee estimate (in baseunits per kilobyte).",
            "example": {
              "1": 50536,
              "2": 15902,
              "3": 1579
            }
          }
        },
        "required": [
          "feePerKb",
          "numBlocks"
        ]
      },
      "EstimateTransactionFeesEthEip1559": {
        "type": "object",
        "properties": {
          "baseFee": {
            "allOf": [
              {
                "description": "Block base fees, in base units (i.e. Wei), per gas. Zeroes are returned for pre-EIP-1559 blocks"
              },
              {
                "$ref": "#/components/schemas/IntegerString"
              }
            ]
          },
          "gasUsedRatio": {
            "description": "Block gas used ratio. Calculated as the ratio of gasUsed and gasLimit",
            "type": "string"
          },
          "safeLowMinerTip": {
            "allOf": [
              {
                "description": "25th percentile of the tips spent in the last block"
              },
              {
                "$ref": "#/components/schemas/IntegerString"
              }
            ]
          },
          "normalMinerTip": {
            "allOf": [
              {
                "description": "35th percentile of the tips spent in the last block"
              },
              {
                "$ref": "#/components/schemas/IntegerString"
              }
            ]
          },
          "standardMinerTip": {
            "allOf": [
              {
                "description": "50th percentile of the tips spent in the last block"
              },
              {
                "$ref": "#/components/schemas/IntegerString"
              }
            ]
          },
          "fastestMinerTip": {
            "allOf": [
              {
                "description": "75th percentile of the tips spent in the last block"
              },
              {
                "$ref": "#/components/schemas/IntegerString"
              }
            ]
          },
          "ludicrousMinerTip": {
            "allOf": [
              {
                "description": "97th percentile of the tips spent in the last block"
              },
              {
                "$ref": "#/components/schemas/IntegerString"
              }
            ]
          }
        },
        "required": [
          "baseFee",
          "gasUsedRatio"
        ]
      },
      "EstimateTransactionFeesEth": {
        "type": "object",
        "properties": {
          "feeEstimate": {
            "description": "fee estimate for a transaction for the given account-based coin, denominated in base units (i.e. Wei)",
            "$ref": "#/components/schemas/IntegerString"
          },
          "gasLimitEstimate": {
            "description": "The amount of gas that the transaction will use, if recipient is provided in the request",
            "$ref": "#/components/schemas/IntegerString"
          },
          "minGasPrice": {
            "description": "minimum gas price that can be provided in base units",
            "$ref": "#/components/schemas/IntegerString"
          },
          "minGasLimit": {
            "description": "minimum gas limit that can be provided in base units",
            "$ref": "#/components/schemas/IntegerString"
          },
          "maxGasLimit": {
            "description": "maximum gas limit that can be provided in base units",
            "$ref": "#/components/schemas/IntegerString"
          },
          "minGasIncreaseBy": {
            "description": "gas price must not be increased by less than this after being introduced to the network",
            "$ref": "#/components/schemas/IntegerString"
          },
          "eip1559": {
            "description": "EIP 1559 fee estimates",
            "$ref": "#/components/schemas/EstimateTransactionFeesEthEip1559"
          }
        },
        "required": [
          "feeEstimate",
          "minGasPrice",
          "minGasLimit",
          "maxGasLimit",
          "minGasIncreaseBy"
        ]
      },
      "EstimateTransactionFeesAccountCoin": {
        "type": "object",
        "properties": {
          "feeEstimate": {
            "description": "fee estimate for a transaction for the given account-based coin, denominated in the base units of that coin (i.e. Drops for XRP, Stroops for XLM, etc)",
            "$ref": "#/components/schemas/IntegerString"
          }
        },
        "required": [
          "feeEstimate"
        ]
      },
      "AverageFee": {
        "type": "object",
        "properties": {
          "averageFee": {
            "type": "number",
            "description": "Calculated by summing the fees of the blocks over the number of blocks.",
            "example": 16000000
          }
        },
        "required": [
          "averageFee"
        ]
      },
      "Name": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "example": "Jane"
          },
          "full": {
            "type": "string",
            "example": "Jane Doe"
          },
          "last": {
            "type": "string",
            "example": "Doe"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "isActive": {
            "type": "boolean"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "username": {
            "$ref": "#/components/schemas/Email"
          },
          "email": {
            "type": "object",
            "properties": {
              "email": {
                "$ref": "#/components/schemas/Email"
              },
              "verified": {
                "type": "boolean",
                "example": true
              }
            }
          },
          "phone": {
            "type": "object",
            "properties": {
              "phone": {
                "type": "string",
                "example": "408-718-6885"
              },
              "verified": {
                "type": "boolean",
                "example": true
              }
            }
          },
          "country": {
            "type": "string",
            "example": "USA"
          },
          "state": {
            "type": "string",
            "example": "New York"
          }
        }
      },
      "InvalidUserId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InvalidId"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "Error code",
                "enum": [
                  "InvalidUserId"
                ]
              }
            },
            "required": [
              "name"
            ]
          }
        ]
      },
      "UserSharingKey": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      },
      "KeySource": {
        "type": "string",
        "enum": [
          "backup",
          "bitgo",
          "cold",
          "user"
        ],
        "example": "user"
      },
      "KeyType": {
        "type": "string",
        "enum": [
          "tss",
          "independent",
          "blsdkg"
        ],
        "default": "independent",
        "description": "A value from a string enum denoting what kind of key this is. Defaults to “independent” indicating an on-chain key is requested. If set to “tss” this tells us that a “tss” key is requested.",
        "example": "tss"
      },
      "KeyCommon": {
        "type": "object",
        "properties": {
          "encryptedPrv": {
            "type": "string",
            "description": "The encrypted private key"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "isBitGo": {
            "type": "boolean",
            "description": "`true` if this key is owned by BitGo",
            "example": false
          },
          "source": {
            "$ref": "#/components/schemas/KeySource"
          },
          "type": {
            "$ref": "#/components/schemas/KeyType"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "Pub": {
        "type": "string",
        "description": "public part of a key pair",
        "example": "xpub661MyMwAqRbcGMVhmc7wqQRYMtcX9LAvSj1pjB213y5TsrkV2uuzJjWnjBrT1FUeNWGPjaVm5p7o6jdNcQJrV1cy3a1R8NQ9m7LuYKA8RpH"
      },
      "Key": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KeyCommon"
          },
          {
            "type": "object",
            "properties": {
              "ethAddress": {
                "type": "string",
                "description": "Ethereum address associated with this key",
                "x-internal": true
              },
              "pub": {
                "$ref": "#/components/schemas/Pub"
              }
            }
          }
        ],
        "required": [
          "id",
          "type"
        ]
      },
      "KeyTSS": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KeyCommon"
          },
          {
            "type": "object",
            "properties": {
              "commonKeychain": {
                "type": "string",
                "description": "The commonKeychain for the key if this is a TSS key. This value is required to be set when the type is set to “tss” and when the source is either “user” or “backup”. Setting this indicates to BitGo that the owner of the key has received all key shares they needed for generating their key. This value is the concatenation of the common public key (32-byte) with the common chaincode (32-byte) as a hex string."
              },
              "commonPub": {
                "type": "string",
                "description": "The common public key. This value is required to be set for BLS keys when the source is either \"user\" or \"backup\". Setting this indicates to BitGo that the owner of the key has received all key shares they needed for generating their key."
              }
            }
          }
        ],
        "required": [
          "id",
          "type",
          "source"
        ]
      },
      "KeysResponse": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Key"
                },
                {
                  "$ref": "#/components/schemas/KeyTSS"
                }
              ]
            }
          }
        },
        "required": [
          "keys"
        ]
      },
      "KeyShare": {
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/KeyShareSource",
            "description": "The source of the key share."
          },
          "to": {
            "$ref": "#/components/schemas/KeyShareSource",
            "description": "The recipient of the key share."
          },
          "publicShare": {
            "type": "string",
            "description": "Public part of the share concatenated with chain code (64+64 characters hex string)."
          },
          "privateShare": {
            "type": "string",
            "description": "Private part of the share concatenated with chain code (64+64 characters hex string). Depending on who the source and the recipient are, the share might be encrypted against the recipient's public key."
          }
        },
        "required": [
          "from",
          "to",
          "publicShare",
          "privateShare"
        ]
      },
      "BackupKeyType": {
        "type": "string",
        "description": "Coin name used to choose correct KRS public key for the given provider. Possible valid values are \"btc\", \"eth\", \"bitcoin\"",
        "example": "eth"
      },
      "CreateKey": {
        "type": "object",
        "properties": {
          "encryptedPrv": {
            "type": "string",
            "description": "Private part of this key pair, encrypted with a passphrase that only the client knows. Required for all sources except `bitgo`."
          },
          "provider": {
            "type": "string",
            "x-internal": true,
            "description": "name of the KRS provider. Only needed for backup keys."
          },
          "source": {
            "$ref": "#/components/schemas/KeySource"
          },
          "derivedFromParentWithSeed": {
            "type": "string",
            "maxLength": 250,
            "x-internal": true
          },
          "disableKRSEmail": {
            "type": "boolean",
            "x-internal": true
          },
          "krsSpecific": {
            "type": "object",
            "x-internal": true,
            "description": "Optional extra information to pass through to the specific KRS provider"
          },
          "enterprise": {
            "$ref": "#/components/schemas/Id",
            "description": "The Enterprise that will own this key"
          },
          "identifier": {
            "type": "string",
            "x-internal": true
          },
          "newFeeAddress": {
            "type": "boolean",
            "description": "Create a new keychain instead of fetching enterprise key (only for Ethereum)"
          },
          "originalPasscodeEncryptionCode": {
            "type": "string",
            "description": "Passphrase that is used to decrypt box D on the wallet keycard",
            "x-internal": true
          },
          "pub": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Pub"
              },
              {
                "description": "Public part of this key pair. If the key type is \"independent\" (default) it is required for user key and is optional for backup key. If key type is \"tss\" this field is not required."
              }
            ]
          },
          "commonPub": {
            "type": "string",
            "description": "The commonPub for the key. This value is necessary for BLS keys when the source is either “user” or “backup”. Setting this indicates to BitGo that the owner of the key has received all key shares they needed for generating their key."
          },
          "commonKeychain": {
            "type": "string",
            "description": "The commonKeychain for the key if this is a TSS key. This value is required to be set when the type is set to “tss” and when the source is either “user” or “backup”. Setting this indicates to BitGo that the owner of the key has received all key shares they needed for generating their key. This value is the common pub concatenated with the common chaincode."
          },
          "keyShares": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyShare"
            },
            "description": "Only required for BitGo TSS keys. Those will be the shares from the user and the backup provider that BitGo will end up generating the BitGo key (share) from."
          },
          "type": {
            "$ref": "#/components/schemas/BackupKeyType"
          },
          "keyType": {
            "$ref": "#/components/schemas/KeyType",
            "default": "tss"
          },
          "userGPGPublicKey": {
            "type": "string",
            "description": "User's public key in ASCII armored format. Only required for BitGo TSS keys."
          },
          "backupGPGPublicKey": {
            "type": "string",
            "description": "Backup public key in ASCII armored format (may be managed by user or KRS). Only required for BitGo TSS keys."
          }
        }
      },
      "KeyShareResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KeyShare"
          },
          {
            "type": "object",
            "properties": {
              "hsmSig": {
                "type": "string",
                "description": "openPGP ASCII armored public key format string. Can be used to ensure that the \"u\" value came from the HSM. This contains the HSM signature/certification (signed by bitgo GPG key pair) of the public form of the \"u\" value and notation packets that indicate the commonPublicKey and the key ids of the two GPG keys used to share wrapping (userGPGPublicKey and backupGPGPublicKey)."
              }
            }
          }
        ],
        "required": [
          "hsmSig"
        ]
      },
      "KeyTSSCreated": {
        "description": "This schema contains KeyTSS attributes and several ephemeral fileds which are only available during the key creation since they are not stored.",
        "allOf": [
          {
            "$ref": "#/components/schemas/KeyTSS"
          },
          {
            "type": "object",
            "properties": {
              "commonKeychainSig": {
                "type": "string",
                "description": "openPGP ASCII armored pubkey format string. This contains the HSM signature/certification (signed by BitGo TSS GPG key pair) of the commonKeychain. This is necessary for verification purposes to ensure that the commonKeychain value came from BitGo's HSM. Used for full custody/OVC operations."
              },
              "commonPublicKeySig": {
                "type": "string",
                "description": "OpenPGP ASCII pubkey armoured string containing HSM signature certification. Allows to ensure that commonPublicKey came from the HSM"
              },
              "keyShares": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/KeyShareResponse"
                }
              },
              "walletHSMGPGPublicKeySigs": {
                "type": "string",
                "description": "GPG ASCII armored public key format that consists of HSM signature/certification and GPG notation data appended to the key signature subpackets"
              }
            }
          }
        ],
        "required": [
          "id",
          "type",
          "source"
        ]
      },
      "PolicyRuleUpdateConditions": {
        "description": "Parameters for the type",
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "amountString": {
                "$ref": "#/components/schemas/IntegerString",
                "description": "The amount for the limit"
              },
              "timeWindow": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2678400,
                "description": "Time window in seconds for a velocity limit, between 1 and a month"
              },
              "groupTags": {
                "description": "Internal, avoid using",
                "x-internal": true,
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Id"
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              "excludeTags": {
                "description": "Internal, avoid using",
                "x-internal": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Id"
                }
              },
              "startDateReset": {
                "x-internal": true,
                "description": "Reset the start date",
                "type": "boolean"
              }
            },
            "required": [
              "amountString"
            ]
          },
          {
            "type": "object",
            "properties": {
              "add": {
                "$ref": "#/components/schemas/AdvancedListRuleEntry"
              }
            },
            "required": [
              "add"
            ]
          },
          {
            "type": "object",
            "properties": {
              "add": {
                "description": "Address to add to the list",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/Id"
                  }
                ]
              },
              "metaData": {
                "type": "object",
                "description": "An object with arbitrary metadata about the added address.",
                "properties": {
                  "addedBy": {
                    "type": "string",
                    "description": "Text indicating who added this address to the whitelist"
                  }
                },
                "additionalProperties": true
              }
            },
            "required": [
              "add"
            ]
          },
          {
            "type": "object",
            "properties": {
              "remove": {
                "description": "Address to remove from the list",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/Id"
                  },
                  {
                    "$ref": "#/components/schemas/AdvancedListRuleEntry"
                  }
                ]
              }
            },
            "required": [
              "remove"
            ]
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "the url to query for the webhook"
              }
            },
            "required": [
              "url"
            ]
          },
          {
            "type": "object"
          }
        ]
      },
      "UpdateRemovePolicyRule": {
        "type": "object",
        "properties": {
          "coin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Coin"
              },
              {
                "description": "Policy rules of types `allTx`, `coinAddressWhitelist`, `coinAddressBlacklist` and `webhook` are recommended to\nbe used without setting a coin so that they will apply to all coins and tokens that could be in a wallet. If\nyour policy rule is of one of these types and has a coin set on it, you also need to set the coin in the body.\nThis is necessary because the id alone may not be sufficient for finding the correct rule to update or delete.\n"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "The id of the rule. The combination of id and coin must be unique among rules in the policy."
          },
          "type": {
            "$ref": "#/components/schemas/PolicyRuleTriggers"
          },
          "condition": {
            "$ref": "#/components/schemas/PolicyRuleUpdateConditions"
          },
          "action": {
            "$ref": "#/components/schemas/PolicyRuleActions"
          }
        },
        "required": [
          "id",
          "type",
          "action"
        ]
      },
      "WalletBuildDefaults": {
        "type": "object",
        "properties": {
          "minFeeRate": {
            "type": "integer",
            "minimum": 1000,
            "example": 12000,
            "description": "(BTC only) Wallet-level minimum fee rate that must be greater than or equal to the default of 1000 satoshis/kvByte. Per transaction, you can override  `minFeeRate` with the `feeRate` parameter.\n"
          }
        }
      },
      "WalletCoinSpecificXlm": {
        "type": "object",
        "properties": {
          "rootAddress": {
            "type": "string",
            "description": "Root address of the wallet",
            "example": "GCTTCPH4IIDK7P72FFAEJ3ZFN6WDHJH6GGMRPHPM56ZWGIQ7B3XTIJAM"
          },
          "stellarUsername": {
            "type": "string",
            "description": "Username for the user's Stellar address",
            "example": "foo_bar@baz.com"
          },
          "homeDomain": {
            "type": "string",
            "description": "Home domain of a Stellar account",
            "example": "bitgo.com"
          },
          "stellarAddress": {
            "type": "string",
            "description": "Email-like address associated to a Stellar account",
            "example": "foo_bar@baz.com*bitgo.com"
          }
        }
      },
      "WalletCoinSpecific": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "creationFailure": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TxId"
                },
                "description": "Includes list of fail initialization txids"
              },
              "pendingChainInitialization": {
                "type": "boolean",
                "description": "Whether the wallet needs to be initialized on the chain"
              }
            }
          },
          {
            "$ref": "#/components/schemas/WalletCoinSpecificXlm"
          }
        ]
      },
      "Keys": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Id"
        },
        "example": [
          "585951a5df8380e0e304a553",
          "585951a5df8380e0e30d645c",
          "585951a5df8380e0e30b6147"
        ]
      },
      "WalletLabel": {
        "type": "string",
        "example": "My Wallet"
      },
      "NumSignatures": {
        "description": "Number of signatures required.  This value must be 2 for\nhot wallets, 1 for **ofc** wallets, and not specified for custodial\nwallets.\n",
        "type": "integer",
        "example": 2
      },
      "NumKeychains": {
        "description": "Number of keys provided.  This value must be 3 for hot wallets,\n1 for **ofc** wallets, and not specified for custodial wallets.\n",
        "type": "integer",
        "example": 3
      },
      "WalletPermission": {
        "type": "string",
        "enum": [
          "admin",
          "view",
          "spend"
        ]
      },
      "WalletUser": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Id"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletPermission"
            }
          }
        },
        "example": {
          "user": "55e8a1a5df8380e0e30e20c6",
          "permissions": [
            "admin",
            "view",
            "spend"
          ]
        }
      },
      "CustomChangeKeySignatures": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string"
          },
          "backup": {
            "type": "string"
          },
          "bitgo": {
            "type": "string"
          }
        },
        "description": "Signatures for the keys which will be used to derive custom change addresses.\n\n**Note:** These signatures may only be set once for each wallet and are not modifiable after being set.\n"
      },
      "WalletMultisigType": {
        "type": "string",
        "enum": [
          "onchain",
          "tss",
          "blsdkg"
        ]
      },
      "Wallet": {
        "type": "object",
        "properties": {
          "admin": {
            "type": "object",
            "properties": {
              "policy": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "allowBackupKeySigning": {
            "type": "boolean"
          },
          "approvalsRequired": {
            "$ref": "#/components/schemas/ApprovalsRequired"
          },
          "balanceString": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerString"
              },
              {
                "description": "Total balance in base units (e.g. Satoshis)"
              }
            ]
          },
          "buildDefaults": {
            "$ref": "#/components/schemas/WalletBuildDefaults"
          },
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "coinSpecific": {
            "$ref": "#/components/schemas/WalletCoinSpecific"
          },
          "custodialWallet": {
            "type": "object",
            "description": "The associated custodial wallet object"
          },
          "custodialWalletId": {
            "$ref": "#/components/schemas/Id"
          },
          "deleted": {
            "type": "boolean"
          },
          "disableTransactionNotifications": {
            "type": "boolean"
          },
          "enterprise": {
            "$ref": "#/components/schemas/Id"
          },
          "freeze": {
            "type": "object",
            "properties": {
              "time": {
                "type": "string",
                "format": "dateTime"
              },
              "expires": {
                "type": "string",
                "format": "dateTime"
              }
            }
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "isCold": {
            "type": "boolean"
          },
          "keys": {
            "$ref": "#/components/schemas/Keys"
          },
          "label": {
            "$ref": "#/components/schemas/WalletLabel"
          },
          "m": {
            "$ref": "#/components/schemas/NumSignatures"
          },
          "n": {
            "$ref": "#/components/schemas/NumKeychains"
          },
          "nodeId": {
            "$ref": "#/components/schemas/Id"
          },
          "receiveAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "recoverable": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "spendableBalanceString": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerString"
              },
              {
                "description": "Spendable balance in base units (e.g. Satoshis)"
              }
            ]
          },
          "startDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              },
              {
                "description": "Wallet creation time"
              }
            ]
          },
          "type": {
            "$ref": "#/components/schemas/WalletTypePublic"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletUser"
            }
          },
          "customChangeKeySignatures": {
            "$ref": "#/components/schemas/CustomChangeKeySignatures"
          },
          "multisigType": {
            "$ref": "#/components/schemas/WalletMultisigType"
          }
        },
        "required": [
          "approvalsRequired",
          "coin",
          "deleted",
          "disableTransactionNotifications",
          "id",
          "label"
        ]
      },
      "CreatePolicyRuleTriggers": {
        "type": "string",
        "enum": [
          "advancedWhitelist",
          "allTx",
          "allTxNoFiat",
          "coinAddressWhitelist",
          "coinAddressBlacklist",
          "velocityLimit",
          "webhook"
        ],
        "description": "What causes this rule to trigger"
      },
      "CreatePolicyRule": {
        "type": "object",
        "properties": {
          "coin": {
            "type": "string",
            "example": "zrx",
            "description": "If set, the rule will only apply to the given coin or ERC20 token in an\nEthereum wallet. It is generally recommended to not set a coin for policy rules of the following types:\n`advancedWhitelist`, `allTx`, `coinAddressWhitelist`, `coinAddressBlacklist`, `webhook`.\n"
          },
          "id": {
            "type": "string",
            "description": "The id of the rule, must be unique among rules in the policy"
          },
          "type": {
            "$ref": "#/components/schemas/CreatePolicyRuleTriggers"
          },
          "condition": {
            "$ref": "#/components/schemas/PolicyRuleUpdateConditions"
          },
          "action": {
            "$ref": "#/components/schemas/PolicyRuleActions"
          }
        },
        "required": [
          "id",
          "type",
          "action"
        ]
      },
      "Otp": {
        "type": "string",
        "example": "123456",
        "description": "Second factor authentication token"
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "extensible": {
            "x-internal": true,
            "type": "boolean",
            "description": "`true` if the session is extensible beyond a one-hour duration",
            "example": false
          },
          "otp": {
            "$ref": "#/components/schemas/Otp"
          },
          "password": {
            "type": "string",
            "example": "secret"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "Scope": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "user_manage",
          "openid",
          "profile",
          "wallet_create",
          "wallet_manage_all",
          "wallet_approve_all",
          "wallet_spend_all",
          "wallet_edit_all",
          "wallet_view_all"
        ]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "example": "9b72c68ef394f5146f0f3efc1feafb7a971752cb00e79fafcfd8c1d2db83639c"
          },
          "expires_at": {
            "type": "integer",
            "example": 1534201288,
            "description": "Unix timestamp"
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "access_token",
          "expires_at",
          "scope",
          "user"
        ]
      },
      "InvalidTransferId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InvalidId"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "Error code",
                "enum": [
                  "InvalidTransferId"
                ]
              }
            },
            "required": [
              "name"
            ]
          }
        ]
      },
      "Ip": {
        "type": "string",
        "format": "ipv4",
        "example": "127.0.0.1"
      },
      "Unlock": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "txCount": {
            "type": "integer"
          },
          "txValue": {
            "type": "integer"
          }
        }
      },
      "Session": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "ip": {
            "$ref": "#/components/schemas/Ip",
            "description": "IP address of the client that requested this access token"
          },
          "ipRestrict": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv4"
            },
            "description": "IP addresses of clients that are allowed to use this token"
          },
          "origin": {
            "type": "string",
            "example": "test.bitgo.com",
            "description": "BitGo environment that issued this token"
          },
          "scope": {
            "$ref": "#/components/schemas/Scope",
            "description": "Session permissions"
          },
          "unlock": {
            "$ref": "#/components/schemas/Unlock",
            "description": "The Unlock object, returned if this session is currently unlocked."
          },
          "user": {
            "$ref": "#/components/schemas/Id"
          }
        },
        "required": [
          "created",
          "expires",
          "id",
          "origin",
          "scope",
          "user"
        ]
      },
      "LockedSession": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "ip": {
            "$ref": "#/components/schemas/Ip",
            "description": "IP address of the client that requested this access token"
          },
          "ipRestrict": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv4"
            },
            "description": "IP addresses of clients that are allowed to use this token"
          },
          "origin": {
            "type": "string",
            "example": "test.bitgo.com",
            "description": "BitGo environment that issued this token.  The token is only valid in this environment."
          },
          "scope": {
            "$ref": "#/components/schemas/Scope",
            "description": "Session permissions"
          },
          "user": {
            "$ref": "#/components/schemas/Id"
          }
        },
        "required": [
          "created",
          "expires",
          "id",
          "origin",
          "scope",
          "user"
        ]
      },
      "UnlockRequest": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "minimum": 1,
            "maximum": 3600,
            "default": 600,
            "description": "Number of seconds that the session will stay unlocked"
          },
          "otp": {
            "$ref": "#/components/schemas/Otp"
          }
        }
      },
      "WalletsResponse": {
        "type": "object",
        "properties": {
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Wallet"
            }
          },
          "nextBatchPrevId": {
            "$ref": "#/components/schemas/NextBatchPrevId"
          }
        },
        "required": [
          "wallets"
        ]
      },
      "WalletsWithCoinResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WalletsResponse"
          },
          {
            "type": "object",
            "properties": {
              "coin": {
                "$ref": "#/components/schemas/Coin"
              }
            },
            "required": [
              "coin"
            ]
          }
        ]
      },
      "WalletCreateCoinSpecificXlm": {
        "type": "object",
        "properties": {
          "stellarUsername": {
            "type": "string",
            "description": "Username for the user's Stellar address. It's case insensitive, and it can't be changed after it's set.",
            "pattern": "^[a-zA-Z0-9-_.+@]+$",
            "example": "foo_bar@baz.com"
          }
        }
      },
      "WalletCreateCoinSpecific": {
        "type": "object",
        "properties": {
          "xlm": {
            "$ref": "#/components/schemas/WalletCreateCoinSpecificXlm"
          },
          "txlm": {
            "$ref": "#/components/schemas/WalletCreateCoinSpecificXlm"
          }
        }
      },
      "WalletCustomAddress": {
        "type": "string",
        "example": "ivxzn3bdn4uo",
        "description": "A custom address can be provided for EOS wallets. It must be exactly 12 alphanumeric characters."
      },
      "CreateWallet": {
        "type": "object",
        "properties": {
          "coinSpecific": {
            "$ref": "#/components/schemas/WalletCreateCoinSpecific"
          },
          "enterprise": {
            "$ref": "#/components/schemas/Id",
            "description": "This is required for Ethereum wallets since they can only be created as part of an enterprise."
          },
          "isCold": {
            "type": "boolean",
            "x-internal": true,
            "description": "Field is deprecated. Use type field instead and pass type = 'cold'"
          },
          "isCustodial": {
            "type": "boolean",
            "x-internal": true,
            "description": "Field is deprecated. Use type field instead and pass type = 'custodialPaired'"
          },
          "keys": {
            "$ref": "#/components/schemas/Keys",
            "description": "This is required for all wallets where the client supplies the keys to be used. The only case where this is not required is when the type is set to `custodial`."
          },
          "keySignatures": {
            "type": "object",
            "properties": {
              "backup": {
                "type": "string",
                "description": "a signature of the backup pub key using the user key (useful for change address verification)"
              },
              "bitgo": {
                "type": "string",
                "description": "a signature of the bitgo pub key using the user key (useful for change address verification)"
              }
            }
          },
          "label": {
            "$ref": "#/components/schemas/WalletLabel"
          },
          "multisigType": {
            "$ref": "#/components/schemas/WalletMultisigType"
          },
          "address": {
            "$ref": "#/components/schemas/WalletCustomAddress"
          },
          "m": {
            "$ref": "#/components/schemas/NumSignatures",
            "description": "This is required for all wallets where the client supplies the keys to be used. The only case where this is not required is when the type is set to `custodial`."
          },
          "n": {
            "$ref": "#/components/schemas/NumKeychains",
            "description": "This is required for all wallets where the client supplies the keys to be used. The only case where this is not required is when the type is set to `custodial`."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "type": {
            "$ref": "#/components/schemas/WalletTypePublic"
          },
          "walletVersion": {
            "type": "integer",
            "default": 1,
            "description": "(ETH only) Specify the wallet creation contract version used when creating a wallet contract. Use 0 for the old wallet creation, 1 for the new wallet creation, where it is only deployed upon receiving funds. 2 for wallets with the same functionality as v1 but with NFT support. 3 for TSS wallets.",
            "minimum": 0,
            "maximum": 3
          },
          "eip1559": {
            "type": "object",
            "description": "(ETH walletVersion: 0 wallets only) Specify eip1559 fee parameters in wallet creation transactions.",
            "properties": {
              "maxPriorityFeePerGas": {
                "type": "string",
                "description": "Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens."
              },
              "maxFeePerGas": {
                "type": "string",
                "description": "Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens."
              }
            },
            "required": [
              "maxPriorityFeePerGas",
              "maxFeePerGas"
            ]
          }
        },
        "required": [
          "label"
        ]
      },
      "BalanceNotAvailable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiErrorNoName"
          },
          {
            "properties": {
              "context": {
                "type": "object",
                "properties": {
                  "coin": {
                    "$ref": "#/components/schemas/Coin"
                  }
                }
              },
              "name": {
                "type": "string",
                "description": "Error code",
                "enum": [
                  "BalanceNotAvailable"
                ]
              }
            },
            "required": [
              "context",
              "name"
            ]
          }
        ]
      },
      "Balance": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "integer",
            "description": "The total balance of all wallets containing the given coin type.  May lose\nprecision for large values.\n",
            "example": 50000
          },
          "balanceString": {
            "type": "string",
            "description": "String representation of `balance`.  Guaranteed to not lose\nprecision.\n",
            "example": "50000"
          },
          "confirmedBalance": {
            "type": "integer",
            "description": "The total balance of confirmed transactions for all wallets containing the given\ncoin type.  May lose precision for large values.\n",
            "nullable": true,
            "example": 40000
          },
          "confirmedBalanceString": {
            "type": "string",
            "description": "String representation of `confirmedBalance`.  Guaranteed to not lose\nprecision.\n",
            "example": "40000"
          },
          "spendableBalance": {
            "type": "integer",
            "description": "The total balance of all wallets containing the given coin which may\nbe used as inputs for creating new transactions.  May lose precision\nfor large values.\n",
            "nullable": true,
            "example": 40000
          },
          "spendableBalanceString": {
            "type": "string",
            "description": "String representation of `spendableBalance`.  Guaranteed to not lose\nprecision.\n",
            "example": "40000"
          },
          "stakedBalance": {
            "type": "integer",
            "description": "The total balance of all wallets containing the given coin which has been staked.\nMay lose precision for large values.\n",
            "nullable": true,
            "example": 40000
          },
          "stakedBalanceString": {
            "type": "string",
            "description": "String representation of `stakedBalance`.  Guaranteed to not lose\nprecision.\n",
            "example": "40000"
          }
        }
      },
      "WalletBalance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Balance"
          },
          {
            "type": "object",
            "properties": {
              "tokens": {
                "type": "object",
                "description": "Object of key value pairs where the keys are the token symbols (e.g. omg) and the values are the balance data for that token symbol.",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "balanceString": {
                      "type": "string",
                      "example": "30000"
                    },
                    "confirmedBalanceString": {
                      "type": "string",
                      "example": "20000"
                    },
                    "heldBalanceString": {
                      "type": "string",
                      "description": "The difference between the balanceString and the spendableBalanceString.",
                      "example": "10000"
                    },
                    "spendableBalanceString": {
                      "type": "string",
                      "example": "20000"
                    },
                    "stakedBalanceString": {
                      "type": "string",
                      "example": "20000"
                    },
                    "transferCount": {
                      "type": "number",
                      "example": 100
                    }
                  }
                }
              },
              "unsupportedTokens": {
                "type": "object",
                "description": "Object of key value pairs where the keys are the unsupported token contracts (e.g. 0x9928e4046d7c6513326ccea028cd3e7a91c7590a) and the values are the balance data for that token contract. UnsupportedTokens will only be returned for wallets that supports Metamask Institutional and has enableMMI flag turned on",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "balanceString": {
                      "type": "string",
                      "example": "30000"
                    },
                    "confirmedBalanceString": {
                      "type": "string",
                      "example": "20000"
                    },
                    "heldBalanceString": {
                      "type": "string",
                      "description": "The difference between the balanceString and the spendableBalanceString.",
                      "example": "10000"
                    },
                    "spendableBalanceString": {
                      "type": "string",
                      "example": "20000"
                    },
                    "stakedBalanceString": {
                      "type": "string",
                      "example": "20000"
                    },
                    "transferCount": {
                      "type": "number",
                      "example": 100
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "WalletUpdateCoinSpecificEth": {
        "type": "object",
        "properties": {
          "deployForwardersManually": {
            "type": "boolean"
          },
          "flushForwardersManually": {
            "type": "boolean"
          }
        }
      },
      "WalletUpdateCoinSpecific": {
        "type": "object",
        "properties": {
          "eth": {
            "$ref": "#/components/schemas/WalletUpdateCoinSpecificEth"
          },
          "teth": {
            "$ref": "#/components/schemas/WalletUpdateCoinSpecificEth"
          }
        }
      },
      "UpdateWallet": {
        "type": "object",
        "properties": {
          "approvalsRequired": {
            "$ref": "#/components/schemas/ApprovalsRequired"
          },
          "buildDefaults": {
            "$ref": "#/components/schemas/WalletBuildDefaults"
          },
          "disableTransactionNotifications": {
            "type": "boolean"
          },
          "label": {
            "$ref": "#/components/schemas/WalletLabel"
          },
          "customChangeKeySignatures": {
            "$ref": "#/components/schemas/CustomChangeKeySignatures"
          },
          "coinSpecific": {
            "$ref": "#/components/schemas/WalletUpdateCoinSpecific"
          }
        }
      },
      "CannotRemoveAdmin": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiErrorNoName"
          },
          {
            "properties": {
              "context": {
                "type": "object",
                "properties": {
                  "adminCount": {
                    "type": "integer",
                    "description": "Current number of admins on the wallet.  This number must be\ngreater than `approvalsRequired`, since an admin cannot approve\nhis/her own operation.\n"
                  },
                  "approvalsRequired": {
                    "description": "Number of admins that must approve a wallet operation",
                    "type": "integer"
                  }
                },
                "required": [
                  "adminCount",
                  "approvalsRequired"
                ]
              },
              "name": {
                "type": "string",
                "description": "Error code",
                "enum": [
                  "CannotRemoveAdmin"
                ]
              }
            },
            "required": [
              "context",
              "name"
            ]
          }
        ]
      },
      "WalletUnspents": {
        "type": "object",
        "properties": {
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "unspents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Unspent"
            }
          }
        }
      },
      "WalletMaximumSpendable": {
        "type": "object",
        "properties": {
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "maximumSpendable": {
            "type": "string",
            "example": "19948310"
          }
        }
      },
      "WalletSpending": {
        "type": "object",
        "properties": {
          "velocityLimitSpending": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "coin": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Coin"
                    },
                    {
                      "example": "btc"
                    }
                  ]
                },
                "timeWindow": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IntegerString"
                    },
                    {
                      "description": "String representation of the time window in seconds (ex: 0 = per transaction, 3600 = hourly,\n86400 = daily).\n"
                    },
                    {
                      "example": "3600"
                    }
                  ]
                },
                "limitAmountString": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IntegerString"
                    },
                    {
                      "description": "String representation of the spending limit in base units.\n"
                    },
                    {
                      "example": "1000000"
                    }
                  ]
                },
                "amountSpentString": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IntegerString"
                    },
                    {
                      "description": "String representation of the current amount spent in base units. Guaranteed to not lose\nprecision.\n"
                    },
                    {
                      "example": "148310"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "ReservedUnspent": {
        "type": "object",
        "description": "a ReservedUnspent object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the unspent in the form \\<txid\\>:\\<tx_index\\>",
            "example": "003f688cc349f1fca8ac5ffa21671ca911b6ef351085c60733ed8c2ebf162cb8:2"
          },
          "walletId": {
            "$ref": "#/components/schemas/Id"
          },
          "expireTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "$ref": "#/components/schemas/Id"
          }
        },
        "required": [
          "id",
          "walletId",
          "expireTime",
          "userId"
        ]
      },
      "TotalBalances": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "balanceString": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IntegerString"
                    },
                    {
                      "description": "String representation of the balance in base units. Guaranteed to not lose\nprecision.\n"
                    }
                  ]
                },
                "coin": {
                  "$ref": "#/components/schemas/Coin"
                }
              }
            }
          }
        }
      },
      "WalletShareKeychain": {
        "type": "object",
        "description": "Key passed to the receiving user, included if the wallet was shared with spend permission",
        "properties": {
          "pub": {
            "description": "One of wallet pub (onchain), commonPub (BLS) or commonKeychain (TSS)",
            "type": "string"
          },
          "encryptedPrv": {
            "description": "Private key of the user sharing the wallet encrypted under their wallet passphrase",
            "type": "string"
          },
          "fromPubKey": {
            "description": "Derived public key of the user sharing the wallet",
            "type": "string"
          },
          "toPubKey": {
            "description": "Derived public key of the user receiving the share",
            "type": "string"
          },
          "path": {
            "description": "BIP32 HD path of the derived public keys (fromPubKey and toPubKey)",
            "example": "m/1234/1/1",
            "type": "string"
          }
        }
      },
      "ShareWalletRequest": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "string",
            "description": "Comma-separated list of permissions (view, spend, admin) which are granted by this share. Required if `reshare` is false.",
            "example": "spend,view"
          },
          "message": {
            "type": "string",
            "description": "User readable message to display to the share recipient"
          },
          "reshare": {
            "type": "boolean",
            "description": "Flag for reinviting a user to the wallet <br/> This is required if the invitee has already been invited to the wallet, but has changed their password and needs a new invite"
          },
          "skipKeychain": {
            "type": "boolean",
            "description": "Skips using a shared key (for when the wallet is shared without spend permission)"
          },
          "disableEmail": {
            "type": "boolean",
            "description": "Flag for disabling invite notification email"
          },
          "user": {
            "$ref": "#/components/schemas/Id"
          },
          "keychain": {
            "$ref": "#/components/schemas/WalletShareKeychain"
          }
        },
        "required": [
          "user"
        ]
      },
      "WalletShareState": {
        "type": "string",
        "example": "active",
        "enum": [
          "pendingapproval",
          "active",
          "accepted",
          "canceled",
          "rejected"
        ]
      },
      "ShareWalletResponse": {
        "type": "object",
        "description": "Wallet share object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              },
              {
                "description": "Wallet share id"
              }
            ]
          },
          "coin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Coin"
              },
              {
                "description": "Coin of the wallet"
              }
            ]
          },
          "wallet": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              },
              {
                "description": "Wallet id"
              }
            ]
          },
          "walletLabel": {
            "$ref": "#/components/schemas/WalletLabel"
          },
          "fromUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              },
              {
                "description": "Id of the user sharing the wallet"
              }
            ]
          },
          "toUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              },
              {
                "description": "Id of the user receiving the share"
              }
            ]
          },
          "permissions": {
            "type": "string",
            "allOf": [
              {
                "description": "Comma-separated list of permissions which are granted by this share"
              },
              {
                "$ref": "#/components/schemas/WalletPermission"
              }
            ],
            "example": "spend,view"
          },
          "message": {
            "type": "string",
            "description": "Message for the user receiving the share"
          },
          "state": {
            "type": "string",
            "allOf": [
              {
                "description": "State of the share"
              },
              {
                "$ref": "#/components/schemas/WalletShareState"
              }
            ]
          },
          "enterprise": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              },
              {
                "description": "If the wallet belongs to an enterprise, the id of that enterprise"
              }
            ]
          },
          "pendingApprovalId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              },
              {
                "description": "If the share generated a pending approval, the id of that pending approval"
              }
            ]
          },
          "keychain": {
            "$ref": "#/components/schemas/WalletShareKeychain"
          }
        }
      },
      "RejectReshare": {
        "type": "object",
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/Id"
          }
        },
        "required": [
          "userId"
        ]
      },
      "WalletShare": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "wallet": {
            "$ref": "#/components/schemas/Id"
          },
          "walletLabel": {
            "$ref": "#/components/schemas/WalletLabel"
          },
          "fromUser": {
            "$ref": "#/components/schemas/Id"
          },
          "toUser": {
            "$ref": "#/components/schemas/Coin"
          },
          "permissions": {
            "type": "string",
            "description": "Comma-separated list of permissions which are granted by this share.",
            "example": "spend,view"
          },
          "message": {
            "type": "string",
            "description": "User readable message to display to the share recipient"
          },
          "state": {
            "$ref": "#/components/schemas/WalletShareState"
          },
          "enterprise": {
            "$ref": "#/components/schemas/Id"
          },
          "pendingApprovalId": {
            "description": "Only set if this wallet share is currently pending approval",
            "$ref": "#/components/schemas/Id"
          },
          "keychain": {
            "description": "Only set if this wallet share has an associated keychain",
            "type": "object",
            "properties": {
              "pub": {
                "description": "Sharing user's root public key",
                "type": "string"
              },
              "encryptedPrv": {
                "description": "Sharing user's private key encrypted under their wallet passphrase",
                "type": "string"
              },
              "fromPubKey": {
                "description": "Sharing user's derived public key which will be used to calculate the wallet sharing secret.",
                "type": "string"
              },
              "toPubKey": {
                "description": "Shared-to user's derived public key which will be used to calculate the wallet sharing secret.",
                "type": "string"
              },
              "path": {
                "description": "BIP32 HD path of the derived public keys (fromPubKey and toPubKey)",
                "example": "m/1234/1/1",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "coin",
          "wallet",
          "walletLabel",
          "fromUser",
          "toUser",
          "permissions",
          "message",
          "state",
          "enterprise"
        ]
      },
      "ListWalletSharesResponse": {
        "type": "object",
        "properties": {
          "incoming": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletShare"
            }
          },
          "outgoing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletShare"
            }
          }
        }
      },
      "UpdateWalletShareResponse": {
        "type": "object",
        "properties": {
          "state": {
            "description": "New state of the wallet share after update",
            "$ref": "#/components/schemas/WalletShareState"
          },
          "changed": {
            "type": "boolean"
          }
        }
      },
      "ResendShareEmailResponse": {
        "type": "object",
        "properties": {
          "resent": {
            "type": "boolean"
          }
        }
      },
      "WebhookTypeWallet": {
        "type": "string",
        "enum": [
          "transfer",
          "transaction",
          "pendingapproval",
          "address_confirmation",
          "lowFee"
        ],
        "example": "transfer",
        "description": "Type of event to listen to (can be transfer or pendingapproval)."
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "label": {
            "type": "string",
            "example": "Test Webhook"
          },
          "created": {
            "$ref": "#/components/schemas/DateTime"
          },
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "type": {
            "$ref": "#/components/schemas/WebhookTypeWallet"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://your.server.com/webhook"
          },
          "version": {
            "type": "integer",
            "example": 2,
            "description": "2 for coins running on API v2."
          },
          "numConfirmations": {
            "type": "integer",
            "example": 6
          },
          "state": {
            "type": "string",
            "enum": [
              "active",
              "suspended"
            ],
            "example": "active"
          },
          "lastAttempt": {
            "$ref": "#/components/schemas/DateTime"
          },
          "failingSince": {
            "$ref": "#/components/schemas/DateTime"
          },
          "successiveFailedAttempts": {
            "type": "integer",
            "example": 0
          }
        },
        "required": [
          "url"
        ]
      },
      "CreateWalletWebhook": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/WebhookTypeWallet"
          },
          "allToken": {
            "type": "boolean",
            "description": "Triggers on coin transfers and token transfers for ETH and Stellar.",
            "default": false
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "http://your.server.com/webhook",
            "description": "URL to fire the webhook to."
          },
          "label": {
            "type": "string",
            "description": "Label of the new webhook."
          },
          "numConfirmations": {
            "type": "integer",
            "minimum": 0,
            "example": 6,
            "description": "Number of confirmations before triggering the webhook. If 0 or unspecified, requests will be sent to the callback endpoint when the transfer is first seen and when it is confirmed."
          },
          "listenToFailureStates": {
            "type": "boolean",
            "description": "Whether or not to listen to failed transactions on chain."
          }
        },
        "required": [
          "type",
          "url"
        ]
      },
      "WebhookNotification": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "webhook": {
            "$ref": "#/components/schemas/Id"
          },
          "updateAt": {
            "$ref": "#/components/schemas/DateTime"
          },
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "type": {
            "$ref": "#/components/schemas/WebhookTypeWallet"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://your.server.com/webhook"
          },
          "version": {
            "type": "integer",
            "example": 2
          },
          "state": {
            "type": "string",
            "enum": [
              "unconfirmed",
              "new",
              "pending",
              "processed",
              "failed"
            ],
            "example": "new"
          }
        },
        "required": [
          "url"
        ]
      },
      "WebhookTypeBlock": {
        "type": "string",
        "enum": [
          "block",
          "wallet_confirmation"
        ],
        "example": "block"
      },
      "CreateBlockWebhook": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/WebhookTypeBlock"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "http://your.server.com/webhook",
            "description": "URL to fire the webhook to."
          },
          "label": {
            "type": "string",
            "description": "Label of the new webhook."
          },
          "numConfirmations": {
            "type": "integer",
            "minimum": 0,
            "example": 6,
            "description": "Number of confirmations before triggering the webhook. If 0 or unspecified, requests will be sent to the callback endpoint when the transfer is first seen and when it is confirmed."
          }
        },
        "required": [
          "type",
          "url"
        ]
      },
      "BlockHash": {
        "type": "string",
        "example": "0000000000000296ed56abee6cb78e40b00c47a03d92e71dd92c4862ca636b95"
      },
      "FederationError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "description": "HTTP status code"
          },
          "detail": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "error": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "name": {
            "type": "string",
            "description": "Error code"
          },
          "requestId": {
            "type": "string",
            "description": "Client request id"
          }
        },
        "required": [
          "status",
          "detail",
          "error",
          "name",
          "requestId"
        ]
      },
      "SendLabel": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "address": {
            "$ref": "#/components/schemas/AddressString"
          },
          "enterpriseId": {
            "$ref": "#/components/schemas/Id"
          },
          "label": {
            "type": "string",
            "maxLength": 250
          }
        },
        "required": [
          "id",
          "coin",
          "address",
          "enterpriseId",
          "label"
        ]
      },
      "CreateSendLabel": {
        "type": "object",
        "properties": {
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "address": {
            "$ref": "#/components/schemas/AddressString"
          },
          "enterpriseId": {
            "$ref": "#/components/schemas/Id"
          },
          "label": {
            "type": "string",
            "maxLength": 250
          }
        },
        "required": [
          "coin",
          "address",
          "enterpriseId",
          "label"
        ]
      },
      "UpdateSendLabel": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "maxLength": 250,
            "description": "A human-readable mapping to an address"
          }
        },
        "required": [
          "label"
        ]
      },
      "GetTransactionRequestsResponse": {
        "type": "object",
        "properties": {
          "txRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionRequest"
            }
          },
          "nextBatchPrevId": {
            "type": "string"
          }
        },
        "required": [
          "txRequests"
        ]
      },
      "CreateTransactionRequest": {
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "type": "string",
            "description": "The combination of the idempotencyKey, version and walletId has to be unique. If no idempotencyKey is specified then it remains undefined for the txRequest. Note, version is an internal field that is auto incremented on every update to a txRequest."
          },
          "intent": {
            "$ref": "#/components/schemas/TransactionRequestIntent"
          },
          "videoApprovers": {
            "$ref": "#/components/schemas/IdArray",
            "description": "(Custodial) Specify who should perform the Video ID with Trust if one should be required."
          },
          "apiVersion": {
            "type": "string",
            "description": "Full or Light to differentiate between the different transaction request flows.",
            "enum": [
              "lite",
              "full"
            ],
            "default": "full"
          },
          "preview": {
            "type": "boolean",
            "description": "When set to true, the transaction request is returned without being stored in the DB.\n",
            "default": false
          }
        },
        "required": [
          "intent"
        ]
      },
      "UpdateTransactionRequest": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "canceled"
            ],
            "description": "* `canceled` - The state can only be updated to `canceled` if the current state is `pendingUserSignature`\n"
          }
        },
        "required": [
          "state"
        ]
      },
      "CreateSignatureShareRequest": {
        "type": "object",
        "properties": {
          "signatureShare": {
            "$ref": "#/components/schemas/SignatureShare",
            "description": "A user-provided share to be used in the ECDSA or EDDSA TSS signing flow. Please use signatureShares instead"
          },
          "signatureShares": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignatureShare"
            },
            "description": "User-provided shares to be used in the ECDSA or EDDSA TSS signing flow."
          },
          "signerShare": {
            "type": "string",
            "description": "An openPGP ascii armored message (encrypted to the known HSM public key) containing the\nprevious signer’s offset secret share as a 128 character hex string (64 bytes) consisting of\nthe new offset “u” private component from the user [or backup] new offset Y-share as a 64 character\nhex string (32 bytes) concatenated with the new offset “chaincode” component of the new offset Y-share\nas a 64 character hex string (32 bytes). Must be provided when uploading an R share.\n"
          }
        }
      },
      "NumberOrString": {
        "oneOf": [
          {
            "type": "string",
            "pattern": "^-?[\\d\\.]+$",
            "example": "1.5"
          },
          {
            "type": "number"
          }
        ]
      },
      "Trustline": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "One of the supported coin types for Stellar tokens listed in [Coin-specific-implementation](#tag/Coin-specific-implementation)",
            "example": "txlm:BST-GBQTIOS3XGHB7LVYGBKQVJGCZ3R4JL5E4CBSWJ5ALIJUHBKS6263644L"
          },
          "action": {
            "enum": [
              "add",
              "remove"
            ]
          },
          "limit": {
            "$ref": "#/components/schemas/IntegerString",
            "description": "String representation of the amount to limit in base units (stroops)"
          }
        }
      },
      "CSPRStakingOptions": {
        "type": "object",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrIntegerString"
              },
              {
                "description": "Required for CSPR. String representation of the amount to stake or unstake in base units (motes)."
              }
            ]
          },
          "validator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressString"
              },
              {
                "description": "Required for CSPR. The validator address used to delegate or undelegate."
              }
            ]
          }
        }
      },
      "STXStakingOptions": {
        "type": "object",
        "properties": {
          "contractName": {
            "type": "string",
            "description": "The STX staking contract name. Use pox.",
            "default": "pox"
          },
          "functionName": {
            "type": "string",
            "description": "STX staking contract function.",
            "oneOf": [
              {
                "type": "string",
                "description": "Function name used to delegate funds.",
                "default": "delegate-stx"
              },
              {
                "type": "string",
                "description": "Function name used to revoke delegated funds.",
                "default": "revoke-delegate-stx"
              }
            ]
          },
          "functionArgs": {
            "type": "array",
            "description": "The 4 Objects are required and in the order expressed. See staking examples in [Stacks](#section/Stacks) under Coin-specific implementation.",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "default": "uint128",
                      "description": "Type of argument. Use the default."
                    },
                    "val": {
                      "type": "string",
                      "description": "Amount in micro-stx"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "default": "principal",
                      "description": "Type of argument. Use the default."
                    },
                    "val": {
                      "type": "string",
                      "description": "Address of the validator"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "default": "optional",
                      "description": "Type of argument. Use the default."
                    },
                    "val": {
                      "type": "string",
                      "description": "The number of cycles that the delegation will last. This is a mandatory field that must be greater than 1."
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "default": "optional",
                      "description": "Type of argument. Use the default."
                    },
                    "val": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "default": "tuple",
                          "description": "Type of argument. Use the default."
                        },
                        "val": {
                          "type": "array",
                          "description": "The 2 objects are required and in the order expressed.",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "default": "hashbytes",
                                    "description": "Type of argument. Use the default."
                                  },
                                  "type": {
                                    "type": "string",
                                    "default": "buffer",
                                    "description": "Type of argument. Use the default."
                                  },
                                  "val": {
                                    "type": "string",
                                    "description": "The BTC Address hash. See staking examples in [Stacks](#section/Stacks) under Coin-specific implementation."
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "default": "version",
                                    "description": "Type of argument. Use the default."
                                  },
                                  "type": {
                                    "type": "string",
                                    "default": "buffer",
                                    "description": "Type of argument. Use the default."
                                  },
                                  "val": {
                                    "type": "string",
                                    "description": "The BTC Address version. See staking examples in [Stacks](#section/Stacks) under Coin-specific implementation."
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "BuildParams": {
        "type": "object",
        "properties": {
          "numBlocks": {
            "type": "integer",
            "description": "(BTC only) Used to estimate the fee rate by targeting confirmation within the given number of blocks. If neither `feeRate` nor `numBlocks` is specified, a block target of 2 is used by default. Can be limited with `maxFeeRate`.\n",
            "minimum": 2,
            "maximum": 1000
          },
          "feeRate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrString"
              },
              {
                "description": "Custom minimum fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. For xrp, it refers to the open ledger fee in drops (1 XRP = 1000000 drops) and the actual fee used is usually 4.5 times the open ledger fee. If the applied `feeRate` does not meet a coin's required minimum transaction fee amount, the minimum is still applied (for example, 1000 sat/kvByte , a flat 1000 microAlgos or a flat 10 drops of xrp).\n"
              },
              {
                "example": 10000
              }
            ]
          },
          "maxFeeRate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrIntegerString"
              },
              {
                "description": "Custom upper limit for fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. `maxFeeRate` can be used to limit a fee rate estimate generated with `numBlocks`.\n"
              },
              {
                "example": 20000
              }
            ]
          },
          "feeMultiplier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NumberOrString"
              },
              {
                "description": "Custom multiplier for fee rate. Suggested to be used in conjunction with `maxFeeRate` for higher priority transactions, or transactions which may not be broadcast for some time after being built. Must be greater than 0.\n"
              },
              {
                "example": 1.5
              }
            ]
          },
          "minConfirms": {
            "type": "integer",
            "description": "The unspent selection for the transaction will only consider unspents with at least this many confirmations to be used as inputs. Does not apply to change outputs unless used in combination with `enforceMinConfirmsForChange`.\n"
          },
          "enforceMinConfirmsForChange": {
            "type": "boolean",
            "description": "When set to true, will enforce minConfirms for change outputs. Defaults to false.",
            "default": false
          },
          "gasPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrIntegerString"
              },
              {
                "description": "Custom gas price to be used for sending the transaction. Only for ETH and ERC20 tokens."
              }
            ]
          },
          "eip1559": {
            "properties": {
              "maxPriorityFeePerGas": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IntegerOrIntegerString"
                  },
                  {
                    "maximum": 100000000000
                  },
                  {
                    "description": "Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens."
                  }
                ]
              },
              "maxFeePerGas": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IntegerOrIntegerString"
                  },
                  {
                    "description": "Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens."
                  }
                ]
              }
            }
          },
          "gasLimit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrIntegerString"
              },
              {
                "description": "Custom gas limit to be used for sending the transaction. Only for ETH and ERC20 tokens."
              }
            ]
          },
          "targetWalletUnspents": {
            "type": "integer",
            "description": "Specifies the minimum count of good-sized unspents to maintain in the wallet. Change splitting ceases when the\nwallet has `targetWalletUnspents` good-sized unspents.\n\n**Note**: Wallets that continuously send a high count of transactions will automatically split large change amounts\ninto multiple good-sized change outputs while they have fewer than `targetWalletUnspents` good-sized unspents in\ntheir unspent pool. Breaking up large unspents helps to reduce the amount of unconfirmed funds in flight in future\ntransactions, and helps to avoid long chains of unconfirmed transactions. This is especially useful for newly\nfunded wallets or recently refilled send-only wallets.\n\nSee [this support page](https://bitgo.freshdesk.com/support/solutions/articles/27000051851) for more info\n",
            "default": 1000
          },
          "minValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrIntegerString"
              },
              {
                "description": "Ignore unspents smaller than this amount of base units (e.g. satoshis)"
              }
            ]
          },
          "maxValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrIntegerString"
              },
              {
                "description": "Ignore unspents larger than this amount of base units (e.g. satoshis)"
              }
            ]
          },
          "sequenceId": {
            "type": "string",
            "description": "A `sequenceId` is a unique and arbitrary wallet identifier applied to transfers and transactions at creation. It is optional but highly recommended. With a `sequenceId` you can easily reference transfers and transactions&mdash;for example, to safely retry sending. Because the system only confirms one send request per `sequenceId` (and fails all subsequent attempts), you can retry sending without the risk of double spending. The `sequenceId` is only visible to users on the wallet and is not shared publicly.\n"
          },
          "nonce": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerString"
              },
              {
                "description": "(DOT only) A nonce ID is a number used to protect private communications by preventing replay attacks.\nThis is an advanced option where users can manually input a new nonce value\nin order to correct or fill in a missing nonce ID value.\n"
              }
            ]
          },
          "noSplitChange": {
            "type": "boolean",
            "description": "Set `true` to disable automatic change splitting.\n\nAlso see: `targetWalletUnspents`\n",
            "default": false
          },
          "unspents": {
            "type": "array",
            "items": {
              "example": "12b147dd8b4f73c01f72bdbf5b589eea614f3de609ffdbdac84852d6505cf8a3:1",
              "type": "string"
            },
            "description": "Used to explicitly specify the unspents to be used in the input set in the transaction. Each unspent should be in the form `prevTxId:nOutput`.\n"
          },
          "changeAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressString"
              },
              {
                "description": "Specifies a custom destination address for the transaction's change output(s)"
              }
            ]
          },
          "instant": {
            "type": "boolean",
            "description": "(DASH only) Specifies whether or not to use Dash's \"InstantSend\" feature when sending a transaction."
          },
          "memo": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "description": "Memo for Stellar or EOS. Type is only required for memos in Stellar transactions. The memo contains optional extra information that can also be used to identify payments in Stellar or EOS.\n"
          },
          "comment": {
            "type": "string",
            "description": "Optional metadata (only persisted in BitGo) to be applied to the transaction. Use this to add transaction-specific information such as the transaction's purpose or another identifier that you want to reference later. The value is shown in the UI in the transfer listing page.\n",
            "maxLength": 256
          },
          "addressType": {
            "type": "string",
            "description": "The type of address to create for change. One of `p2sh`, `p2shP2wsh`, and `p2wsh`."
          },
          "startTime": {
            "type": "string",
            "description": "The start of the validity window for the transaction. Only supported by HBAR"
          },
          "consolidateId": {
            "$ref": "#/components/schemas/Id",
            "description": "(ALGO/TEZOS only) Consolidation ID of this consolidation transaction."
          },
          "lastLedgerSequence": {
            "type": "integer",
            "description": "(XRP only) Absolute max ledger the transaction should be accepted in, whereafter it will be rejected"
          },
          "ledgerSequenceDelta": {
            "type": "integer",
            "description": "(XRP only) Relative ledger height (in relation to the current ledger) that the transaction should be accepted in, whereafter it will be rejected"
          },
          "cpfpTxIds": {
            "type": "array",
            "x-internal": true,
            "items": {
              "type": "string"
            },
            "description": "The list of transactions to bump with a child-pays-for-parent transaction (currently only bumping one tx is supported)."
          },
          "cpfpFeeRate": {
            "type": "integer",
            "x-internal": true,
            "description": "The desired effective fee rate of the accelerated transaction in base units per kilobyte (e.g. satoshi/kB), the unconfirmed transactions it depends on, and the newly created child-pays-for-parent transaction. Must be higher than the current effective fee rate of the target transaction.\n"
          },
          "maxFee": {
            "type": "integer",
            "x-internal": true,
            "description": "Limits the amount of satoshis that can be used for fees in a child-pays-for-parent (CPFP) transaction. CPFP transactions accelerate the targeted transaction and all of the unconfirmed transactions the targeted transaction depends on. `maxFee` is required for all CPFP transactions as it allows users to set a safety net that will halt CPFP attempts that exceed the expected cost.\n",
            "minimum": 0
          },
          "strategy": {
            "type": "string",
            "x-internal": true,
            "maxLength": 20,
            "description": "Optional unspent selection strategy to use. One of `RANDOM`, `FIFO` or `BNB`."
          },
          "validFromBlock": {
            "type": "integer",
            "description": "Optional block this transaction is valid from"
          },
          "validToBlock": {
            "type": "integer",
            "description": "Optional block this transaction is valid until"
          },
          "type": {
            "type": "string",
            "description": "transaction type (e.g., `trustline` for Stellar trustline transactions, `accountSet` for XRP account set transactions, `stakingLock` and `stakingUnlock` for Stacks delegation)."
          },
          "trustlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trustline"
            },
            "description": "List of trustlines to manage on the account. Available for Stellar."
          },
          "stakingOptions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CSPRStakingOptions"
              },
              {
                "$ref": "#/components/schemas/STXStakingOptions"
              }
            ],
            "description": "Required object for staking. Only for CSPR and STX."
          },
          "unstakingOptions": {
            "type": "object",
            "x-internal": true,
            "description": "Options needed to unstake EOS assets",
            "properties": {
              "from": {
                "type": "string",
                "description": "The name or address of the account that originally staked assets"
              },
              "receiver": {
                "type": "string",
                "description": "The name or address of the account that had assets staked to"
              },
              "unstakeCpuQuantity": {
                "type": "string",
                "description": "The string amount of assets to unstake from CPU and asset symbol separated by a space (e.g. '100 EOS')"
              },
              "unstakeNetQuantity": {
                "type": "string",
                "description": "The string amount of assets to unstake from Net and asset symbol separated by a space (e.g. '100 EOS')"
              }
            }
          },
          "refundOptions": {
            "type": "object",
            "x-internal": true,
            "description": "Options needed to refund unstaked EOS assets if automatic refund fails",
            "properties": {
              "address": {
                "type": "string",
                "description": "The name or address of the account that originally unstaked assets"
              }
            }
          },
          "messageKey": {
            "type": "string",
            "description": "Optional parameter that takes a hexadecimal value to set `messagekey` for an XRP `accountSet` transaction. Recipients field should be empty when `messageKey` is set."
          },
          "reservation": {
            "type": "object",
            "properties": {
              "expireTime": {
                "type": "string",
                "format": "date-time",
                "description": "Required. The time that the unspent reservations should expire."
              }
            },
            "description": "Optional parameter for UTXO coins to automatically reserve the unspents that are used in the build. Useful for Cold wallets. If using, must set expireTime."
          }
        }
      },
      "MemoString": {
        "type": "string",
        "maxLength": 100,
        "description": "A memo for this specific transaction. This format is only available for Stacks."
      },
      "MemoObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "Memo for Stellar or EOS. Type is only required for memos in Stellar transactions. The memo contains optional extra information that can also be used to identify payments in Stellar or EOS.\n"
      },
      "TransactionBuildRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildParams"
          },
          {
            "type": "object",
            "properties": {
              "recipients": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/IntegerOrIntegerString"
                        },
                        {
                          "description": "String representation of the amount to send in base units (satoshis/litoshis/zatoshis/duffs)"
                        }
                      ]
                    },
                    "address": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AddressString"
                        },
                        {
                          "description": "The address to send to"
                        }
                      ]
                    },
                    "memo": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/MemoString"
                        },
                        {
                          "$ref": "#/components/schemas/MemoObject"
                        }
                      ]
                    }
                  }
                },
                "description": "A list of recipient addresses and amounts. Must be present but empty for child-pays-for-parent transactions."
              }
            },
            "required": [
              "recipients"
            ]
          }
        ]
      },
      "NonParticipationTransactionBuildRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildParams"
          },
          {
            "type": "object",
            "properties": {
              "nonParticipation": {
                "type": "boolean"
              }
            },
            "required": [
              "nonParticipation"
            ]
          }
        ]
      },
      "TransactionBuildResult": {
        "type": "object",
        "properties": {
          "keyDerivationPath": {
            "type": "string"
          }
        }
      },
      "InvalidAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiErrorNoName"
          },
          {
            "properties": {
              "context": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "coin": {
                    "$ref": "#/components/schemas/Coin"
                  }
                },
                "required": [
                  "address",
                  "coin"
                ]
              },
              "name": {
                "type": "string",
                "description": "Error code",
                "enum": [
                  "InvalidAddress"
                ]
              }
            },
            "required": [
              "coin",
              "context",
              "address",
              "name"
            ]
          }
        ]
      },
      "TransactionInitiateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildParams"
          },
          {
            "type": "object",
            "properties": {
              "recipients": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/IntegerOrIntegerString"
                        },
                        {
                          "description": "String representation of the amount to send in base units (satoshis/litoshis/zatoshis/duffs)"
                        }
                      ]
                    },
                    "address": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AddressString"
                        },
                        {
                          "description": "The address to send to"
                        }
                      ]
                    },
                    "memo": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/MemoString"
                        },
                        {
                          "$ref": "#/components/schemas/MemoObject"
                        }
                      ]
                    }
                  }
                },
                "description": "A list of recipient addresses and amounts. Must be present but empty for child-pays-for-parent transactions."
              }
            }
          }
        ]
      },
      "VideoApprovers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Id"
        },
        "description": "A list of public ids of users that should do the video id verification for the transaction that is being sent or initiated.\n",
        "minItems": 1
      },
      "SendTransaction": {
        "title": "Sent Transaction",
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildParams"
          },
          {
            "type": "object",
            "description": "Include buildParams from the build request to be stored in case of rebuilding."
          }
        ],
        "type": "object",
        "description": "This endpoint broadcasts half-signed transactions.",
        "properties": {
          "comment": {
            "type": "string",
            "description": "An optional memo for the transaction.",
            "maxLength": 256
          },
          "halfSigned": {
            "type": "object",
            "properties": {
              "txHex": {
                "type": "string"
              }
            },
            "description": "The half-signed transaction. The request must include this or a txHex."
          },
          "txHex": {
            "type": "string",
            "description": "The half-signed, serialized transaction hex. Alternative to sending halfSigned."
          },
          "txRequestId": {
            "type": "string",
            "x-internal": true,
            "description": "The transaction request id."
          },
          "sequenceId": {
            "type": "string",
            "description": "Your own unique ID"
          },
          "suppressBroadcast": {
            "type": "boolean",
            "x-internal": true,
            "description": "Do Not Use"
          },
          "videoApprovers": {
            "$ref": "#/components/schemas/VideoApprovers"
          }
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "transfer": {
            "$ref": "#/components/schemas/Transfer"
          },
          "txid": {
            "type": "string",
            "description": "The transaction's unique identifier"
          },
          "tx": {
            "type": "string",
            "description": "The encoded transaction, either base64 for XLM or hex for other coins"
          },
          "status": {
            "$ref": "#/components/schemas/TransferState"
          }
        }
      },
      "InvalidOFAC": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiErrorNoName"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "Error code",
                "enum": [
                  "AddressError"
                ]
              },
              "error": {
                "type": "string",
                "description": "Human-readable error message",
                "example": "Address cannot be used"
              }
            },
            "required": [
              "name"
            ]
          }
        ]
      },
      "InitiateTrustlineParams": {
        "type": "object",
        "properties": {
          "memo": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "description": "The memo contains optional extra information that can also be used to identify payments in Stellar.\n"
          },
          "comment": {
            "type": "string",
            "description": "Optional metadata (only persisted in BitGo) to be applied to the transaction. Use this to add transaction-specific information such as the transaction's purpose or another identifier that you want to reference later. The value is shown in the UI in the transfer listing page.\n",
            "maxLength": 256
          },
          "trustlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trustline"
            },
            "description": "List of trustlines to manage on the account."
          }
        },
        "required": [
          "trustlines"
        ]
      },
      "BalanceReserve": {
        "type": "object",
        "properties": {
          "baseFee": {
            "type": "string",
            "description": "base fee used in transaction fees",
            "example": "100"
          },
          "baseReserve": {
            "type": "string",
            "description": "base reserve used in minimum account balances",
            "example": "5000000"
          },
          "reserve": {
            "type": "string",
            "description": "minimum account balance, calculated using base reserve",
            "example": "25000000"
          },
          "minimumFunding": {
            "type": "string",
            "description": "minimum funding balance, calculated using reserve and base fee",
            "example": "25000500"
          },
          "height": {
            "type": "integer",
            "description": "the height of the block that provides the base values",
            "example": 11228504
          }
        }
      },
      "BankAccountVerificationState": {
        "type": "string",
        "enum": [
          "pending",
          "approved",
          "rejected"
        ]
      },
      "BankAccountIdHash": {
        "type": "string",
        "example": "5c645791cf8eb19304292a8e3365fee3",
        "description": "Unique identifier for this account, derived from `accountNumber`,\n`routingNumber`, and `swiftCode`\n"
      },
      "ShortCountryCode": {
        "type": "string",
        "description": "Two-letter country code, as specified by ISO 3166-1 alpha-2",
        "minLength": 2,
        "maxLength": 2,
        "example": "US",
        "enum": [
          "AD",
          "AE",
          "AF",
          "AG",
          "AI",
          "AL",
          "AM",
          "AO",
          "AQ",
          "AR",
          "AS",
          "AT",
          "AU",
          "AW",
          "AX",
          "AZ",
          "BA",
          "BB",
          "BD",
          "BE",
          "BF",
          "BG",
          "BH",
          "BI",
          "BJ",
          "BL",
          "BM",
          "BN",
          "BO",
          "BQ",
          "BR",
          "BS",
          "BT",
          "BV",
          "BW",
          "BY",
          "BZ",
          "CA",
          "CC",
          "CD",
          "CF",
          "CG",
          "CH",
          "CI",
          "CK",
          "CL",
          "CM",
          "CN",
          "CO",
          "CR",
          "CU",
          "CV",
          "CW",
          "CX",
          "CY",
          "CZ",
          "DE",
          "DJ",
          "DK",
          "DM",
          "DO",
          "DZ",
          "EC",
          "EE",
          "EG",
          "EH",
          "ER",
          "ES",
          "ET",
          "FI",
          "FJ",
          "FK",
          "FM",
          "FO",
          "FR",
          "GA",
          "GB",
          "GD",
          "GE",
          "GF",
          "GG",
          "GH",
          "GI",
          "GL",
          "GM",
          "GN",
          "GP",
          "GQ",
          "GR",
          "GS",
          "GT",
          "GU",
          "GW",
          "GY",
          "HK",
          "HM",
          "HN",
          "HR",
          "HT",
          "HU",
          "ID",
          "IE",
          "IL",
          "IM",
          "IN",
          "IO",
          "IQ",
          "IR",
          "IS",
          "IT",
          "JE",
          "JM",
          "JO",
          "JP",
          "KE",
          "KG",
          "KH",
          "KI",
          "KM",
          "KN",
          "KP",
          "KR",
          "KW",
          "KY",
          "KZ",
          "LA",
          "LB",
          "LC",
          "LI",
          "LK",
          "LR",
          "LS",
          "LT",
          "LU",
          "LV",
          "LY",
          "MA",
          "MC",
          "MD",
          "ME",
          "MF",
          "MG",
          "MH",
          "MK",
          "ML",
          "MM",
          "MN",
          "MO",
          "MP",
          "MQ",
          "MR",
          "MS",
          "MT",
          "MU",
          "MV",
          "MW",
          "MX",
          "MY",
          "MZ",
          "NA",
          "NC",
          "NE",
          "NF",
          "NG",
          "NI",
          "NL",
          "NO",
          "NP",
          "NR",
          "NU",
          "NZ",
          "OM",
          "PA",
          "PE",
          "PF",
          "PG",
          "PH",
          "PK",
          "PL",
          "PM",
          "PN",
          "PR",
          "PS",
          "PT",
          "PW",
          "PY",
          "QA",
          "RE",
          "RO",
          "RS",
          "RU",
          "RW",
          "SA",
          "SB",
          "SC",
          "SD",
          "SE",
          "SG",
          "SH",
          "SI",
          "SJ",
          "SK",
          "SL",
          "SM",
          "SN",
          "SO",
          "SR",
          "SS",
          "ST",
          "SV",
          "SX",
          "SY",
          "SZ",
          "TC",
          "TD",
          "TF",
          "TG",
          "TH",
          "TJ",
          "TK",
          "TL",
          "TM",
          "TN",
          "TO",
          "TR",
          "TT",
          "TV",
          "TW",
          "TZ",
          "UA",
          "UG",
          "UM",
          "US",
          "UY",
          "UZ",
          "VA",
          "VC",
          "VE",
          "VG",
          "VI",
          "VN",
          "VU",
          "WF",
          "WS",
          "YE",
          "YT",
          "ZA",
          "ZM",
          "ZW"
        ]
      },
      "BankAccountType": {
        "title": "BankAccountType",
        "description": "The type of bank account. Generally optional because value is null for normal accounts.\nNote: sen is special silvergate accounts that support instant and fee-free sending.\n",
        "type": "string",
        "enum": [
          "sen",
          "signet",
          "null"
        ],
        "example": "sen"
      },
      "BankAccount": {
        "type": "object",
        "description": "An external bank account.  `routingNumber` must be set for US bank accounts.\n`swiftCode` must be set for banks outside the US.\n",
        "properties": {
          "accountNumber": {
            "description": "Bank account number or IBAN",
            "type": "string",
            "minLength": 1,
            "maxLength": 34,
            "example": "0114584906"
          },
          "address1": {
            "type": "string",
            "example": "2390 El Camino Real"
          },
          "address2": {
            "type": "string",
            "example": "Palo Alto, CA 94306"
          },
          "address3": {
            "type": "string",
            "example": ""
          },
          "enterpriseId": {
            "$ref": "#/components/schemas/Id"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "idHash": {
            "$ref": "#/components/schemas/BankAccountIdHash",
            "x-internal": true
          },
          "name": {
            "type": "string",
            "example": "America California Bank"
          },
          "owner": {
            "type": "object",
            "description": "Bank account owner",
            "properties": {
              "name": {
                "type": "string",
                "example": "Donald E. Knuth"
              },
              "address1": {
                "type": "string",
                "example": "Computer Science Department"
              },
              "address2": {
                "type": "string",
                "example": "Stanford University"
              },
              "address3": {
                "type": "string",
                "example": "Stanford, CA 94305-9045"
              }
            },
            "required": [
              "name",
              "address1"
            ]
          },
          "routingNumber": {
            "description": "US bank routing number",
            "type": "string",
            "example": "129131673",
            "minLength": 9,
            "maxLength": 9,
            "pattern": "^[0-9]+$"
          },
          "shortCountryCode": {
            "$ref": "#/components/schemas/ShortCountryCode"
          },
          "swiftCode": {
            "description": "Bank identifier code, as specified by ISO 9362.  Used by banks outside the US.",
            "type": "string",
            "example": "DEUTDEFF500",
            "minLength": 8,
            "maxLength": 11,
            "pattern": "^[A-Z]{6}[0-9A-Z]{2}([0-9A-Z]{3})?$"
          },
          "type": {
            "$ref": "#/components/schemas/BankAccountType"
          },
          "verificationState": {
            "$ref": "#/components/schemas/BankAccountVerificationState",
            "default": "pending"
          }
        },
        "required": [
          "accountNumber",
          "address1",
          "shortCountryCode",
          "name",
          "owner"
        ]
      },
      "ListBankAccountsResponse": {
        "type": "object",
        "properties": {
          "bankAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccount"
            }
          }
        }
      },
      "InvalidBankAccountId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiErrorNoName"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "Error code",
                "enum": [
                  "InvalidBankAccountId"
                ]
              }
            },
            "required": [
              "name"
            ]
          }
        ]
      },
      "UpdateBankAccount": {
        "type": "object",
        "description": "Updates some fields on a bank account. The server only allows updating of bank accounts that have their verificationState set to `rejected`. Does not allow updating of critical fields like accountNumber, enterpriseId, id, routingNumber, swiftCode.",
        "properties": {
          "address1": {
            "type": "string",
            "example": "2390 El Camino Real"
          },
          "address2": {
            "type": "string",
            "example": "Palo Alto, CA 94306"
          },
          "address3": {
            "type": "string",
            "example": ""
          },
          "name": {
            "type": "string",
            "example": "America California Bank"
          },
          "owner": {
            "type": "object",
            "description": "Bank account owner",
            "properties": {
              "name": {
                "type": "string",
                "example": "Donald E. Knuth"
              },
              "address1": {
                "type": "string",
                "example": "Computer Science Department"
              },
              "address2": {
                "type": "string",
                "example": "Stanford University"
              },
              "address3": {
                "type": "string",
                "example": "Stanford, CA 94305-9045"
              }
            }
          },
          "shortCountryCode": {
            "$ref": "#/components/schemas/ShortCountryCode"
          },
          "verificationState": {
            "type": "string",
            "enum": [
              "pending"
            ],
            "description": "Has to be set to `pending` for a the server to process the changes. Any changes will require a new review from an operator."
          }
        },
        "required": [
          "verificationState"
        ]
      },
      "ExpressPingResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "ExpressSendCoinsRequest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddressString"
                  },
                  {
                    "description": "Destination address"
                  }
                ]
              },
              "amount": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IntegerOrIntegerString"
                  },
                  {
                    "description": "Amount in base units (e.g. satoshi, wei, drops, stroops)"
                  }
                ]
              },
              "walletPassphrase": {
                "type": "string",
                "description": "Passphrase to decrypt the user key on the wallet"
              },
              "prv": {
                "type": "string",
                "description": "Optional, private key in string form, if `walletPassphrase` is not available or encrypted private key is not stored by BitGo."
              }
            }
          },
          {
            "$ref": "#/components/schemas/BuildParams"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "description": "(ETH only) Optional data to pass to the transaction"
              },
              "hop": {
                "type": "boolean",
                "description": "(ETH and AVAXC only) Set to true if funds to destination need to come from single sig address"
              }
            }
          }
        ]
      },
      "ExpressSendCoinsResponse": {
        "type": "object",
        "properties": {
          "transfer": {
            "allOf": [
              {
                "description": "New transfer"
              },
              {
                "$ref": "#/components/schemas/Transfer"
              }
            ]
          },
          "txid": {
            "type": "string",
            "description": "Unique transaction identifier"
          },
          "tx": {
            "type": "string",
            "description": "Encoded transaction hex (or base64 for XLM)"
          },
          "status": {
            "type": "string",
            "description": "Transfer status",
            "enum": [
              "signed",
              "signed (suppressed)",
              "pendingApproval"
            ]
          }
        }
      },
      "ExpressSendManyRequest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "recipients": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "List of recipient addresses and amounts to send",
                  "properties": {
                    "address": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AddressString"
                        },
                        {
                          "description": "Destination address"
                        }
                      ]
                    },
                    "amount": {
                      "$ref": "#/components/schemas/IntegerOrIntegerString",
                      "description": "The amount in base units (e.g. satoshis) to send."
                    }
                  }
                },
                "description": "A list of recipient addresses and amounts. Must be present but empty for CPFP transactions."
              },
              "otp": {
                "type": "string",
                "description": "Two factor auth code to enable sending the transaction. Not necessary if using a long lived access token within the spending limit."
              },
              "walletPassphrase": {
                "type": "string",
                "description": "Passphrase to decrypt the user key on the wallet"
              },
              "prv": {
                "type": "string",
                "description": "Optional, private key in string form, if `walletPassphrase` is not available or encrypted private key is not stored by BitGo."
              }
            }
          },
          {
            "$ref": "#/components/schemas/BuildParams"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "description": "(ETH only) Optional data to pass to the transaction"
              }
            }
          }
        ]
      },
      "ExpressEncryptRequest": {
        "type": "object",
        "properties": {
          "input": {
            "type": "string",
            "description": "Plaintext message which should be encrypted"
          },
          "password": {
            "type": "string",
            "description": "Password which should be used to encrypt message"
          }
        }
      },
      "ExpressEncryptResponse": {
        "type": "object",
        "properties": {
          "encrypted": {
            "type": "string"
          }
        }
      },
      "ExpressDecryptRequest": {
        "type": "object",
        "properties": {
          "input": {
            "type": "string",
            "description": "Ciphertext to decrypt"
          },
          "password": {
            "type": "string",
            "description": "Key which is used for decryption"
          }
        }
      },
      "ExpressDecryptResponse": {
        "type": "object",
        "properties": {
          "decrypted": {
            "type": "string"
          }
        }
      },
      "ExpressCalculateMinerFeeInfoRequest": {
        "type": "object",
        "properties": {
          "feeRate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrString"
              },
              {
                "description": "Custom minimum fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. If the applied `feeRate` does not meet a coin's required minimum transaction fee amount, the minimum is still applied (for example, 1000 sat/kvByte or a flat 1000 microAlgos).\n"
              },
              {
                "example": 10000
              }
            ]
          },
          "nP2shInputs": {
            "type": "integer",
            "description": "Number of P2SH (multi-signature) inputs",
            "example": 2
          },
          "nP2pkhInputs": {
            "type": "integer",
            "description": "Number of P2PKH (single-signature) inputs",
            "example": 0
          },
          "nP2shP2wshInputs": {
            "type": "integer",
            "description": "Number of P2SH_P2WSH (wrapped segwit multi-signature) inputs",
            "example": 1
          },
          "nOutputs": {
            "type": "integer",
            "description": "Number of outputs",
            "example": 2
          }
        },
        "required": [
          "nOutputs"
        ]
      },
      "ExpressCalculateMinerFeeInfoResponse": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "description": "Estimated size of the transaction in bytes",
            "example": 776
          },
          "fee": {
            "type": "integer",
            "description": "Estimated fee in base units for the transaction",
            "example": 38800
          },
          "feeRate": {
            "type": "integer",
            "description": "The fee rate in base units per kB used to estimate the fee for the transaction",
            "example": 50000
          }
        }
      },
      "ExpressCreateKeychainResponse": {
        "type": "object",
        "description": "Generated key pair",
        "properties": {
          "prv": {
            "type": "string",
            "description": "Private key",
            "example": "xprv9s21ZrQH143K2Y4th5Bn8sCRCMNjVr3sm9TLj9yw9SRKxYbJdB18bpc7cZFHKKWKuWZUBATfbDVE26u7w2iUhmWD8Gsp8UkaemhLEfopC35"
          },
          "pub": {
            "$ref": "#/components/schemas/Pub"
          }
        }
      },
      "ExpressGenerateWalletRequest": {
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/WalletLabel"
          },
          "passphrase": {
            "type": "string",
            "description": "Passphrase to be used to encrypt the user key on the wallet"
          },
          "userKey": {
            "type": "string",
            "description": "User provided public key"
          },
          "backupXpub": {
            "$ref": "#/components/schemas/Pub"
          },
          "backupXpubProvider": {
            "type": "string",
            "enum": [
              "keyternal"
            ],
            "description": "Optional key recovery service to provide and store the backup key"
          },
          "enterprise": {
            "$ref": "#/components/schemas/Id",
            "description": "Enterprise id. This is required for Ethereum wallets since they can only be created as part of an enterprise"
          },
          "disableTransactionNotifications": {
            "type": "boolean",
            "description": "Flag for disabling wallet transaction notifications"
          },
          "passcodeEncryptionCode": {
            "type": "string",
            "description": "The passphrase used for decrypting the encrypted user private key during wallet recovery"
          },
          "coldDerivationSeed": {
            "type": "string",
            "description": "Seed used to derive an extended user key for a cold wallet"
          },
          "gasPrice": {
            "type": "integer",
            "description": "Gas price to use when deploying an Ethereum wallet"
          },
          "disableKRSEmail": {
            "type": "boolean",
            "description": "Flag for preventing KRS from sending email after creating backup key"
          },
          "walletVersion": {
            "type": "integer",
            "default": 1,
            "description": "(ETH only) Specify the wallet creation contract version used when creating a wallet contract. Use 0 for the old wallet creation, 1 for the new wallet creation, where it is only deployed upon receiving funds.",
            "minimum": 0,
            "maximum": 1
          }
        },
        "required": [
          "label"
        ]
      },
      "ExpressWallet": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "users": {
            "type": "array",
            "description": "Ids of users with access to the wallet",
            "items": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/components/schemas/Id"
                },
                "permissions": {
                  "type": "array",
                  "description": "Array of permissions for the user",
                  "items": {
                    "type": "string",
                    "example": [
                      "admin",
                      "view",
                      "spend"
                    ]
                  }
                }
              }
            }
          },
          "coin": {
            "type": "string",
            "description": "Name of the blockchain the wallet is on",
            "example": "tbtc"
          },
          "label": {
            "type": "string",
            "description": "Name the user assigned to the wallet",
            "example": "My TBTC Wallet"
          },
          "m": {
            "type": "integer",
            "description": "Number of signatures required for the wallet to send",
            "example": 2
          },
          "n": {
            "type": "integer",
            "description": "Number of signers on the wallet",
            "example": 3
          },
          "keys": {
            "type": "array",
            "description": "Ids of wallet keys",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "keySignatures": {
            "type": "object",
            "description": "Signatures for the backup and BitGo public keys signed by the user key",
            "properties": {
              "backupPub": {
                "type": "string",
                "description": "Signature for the backup pub",
                "example": "1fe81d0c91457d89993b01475bfb9e5809067ae046926faeab6e63beea009d8dd460387e0c3843034570798a9c2bcc1dbbea2988ee5a36979e0bbe6e02f7840af2"
              },
              "bitgoPub": {
                "type": "string",
                "description": "Signature for the BitGo pub",
                "example": "209d0e9a6d4352b66fae0a35ce62c1059bcc4db9e2883abc4f1b3d20481c5cebb7299c581efd9e0151abaf2496da7c6d75d276de36ed3de37c94e9cc5a2ea77e59"
              }
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags set on the wallet",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "receiveAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "balance": {
            "type": "integer",
            "description": "Wallet balance as number",
            "example": 0
          },
          "balanceString": {
            "type": "string",
            "description": "Wallet balance as string",
            "example": "0"
          },
          "confirmedBalance": {
            "type": "integer",
            "description": "Confirmed wallet balance as number",
            "example": 0
          },
          "confirmedBalanceString": {
            "type": "string",
            "description": "Confirmed wallet balance as string",
            "example": "0"
          },
          "spendableBalance": {
            "type": "integer",
            "description": "Spendable wallet balance as number",
            "example": 0
          },
          "spendableBalanceString": {
            "type": "string",
            "description": "Spendable wallet balance as string",
            "example": "0"
          },
          "deleted": {
            "type": "boolean",
            "description": "Flag which indicates the wallet has been deleted",
            "example": false
          },
          "isCold": {
            "type": "boolean",
            "description": "Flag for identifying cold wallets",
            "example": false
          },
          "freeze": {
            "type": "object",
            "description": "Freeze state (used to stop the wallet from spending)",
            "properties": {
              "time": {
                "type": "string",
                "format": "date-time",
                "description": "Time when the wallet becomes frozen"
              },
              "expires": {
                "type": "string",
                "format": "date-time",
                "description": "Time when the wallet is unfrozen and allowed to spend"
              }
            },
            "example": {}
          },
          "disableTransactionNotifications": {
            "type": "boolean",
            "description": "Flag for disabling wallet transaction notifications",
            "example": false
          },
          "admin": {
            "type": "object",
            "description": "Admin data (wallet policies)",
            "example": {}
          },
          "approvalsRequired": {
            "type": "integer",
            "description": "Number of admin approvals required for an action to fire",
            "example": 1
          },
          "pendingApprovals": {
            "type": "array",
            "description": "Pending approvals on the wallet",
            "items": {
              "$ref": "#/components/schemas/PendingApproval"
            },
            "example": []
          },
          "allowBackupKeySigning": {
            "type": "boolean",
            "description": "Flag for allowing signing with backup key",
            "example": false
          },
          "coinSpecific": {
            "type": "object",
            "description": "Coin-specific data"
          },
          "clientFlags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recoverable": {
            "type": "boolean",
            "description": "Flag indicating whether this wallet's user key is recoverable with the passphrase held by the user."
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Time when this wallet was created"
          },
          "hasLargeNumberOfAddresses": {
            "type": "boolean",
            "description": "Flag indicating that this wallet is large (more than 100,000 addresses). If this is set, some APIs may omit\nproperties which are expensive to calculate for wallets with many addresses (for example, the total address\ncounts returned by the List Addresses API).\n"
          },
          "config": {
            "type": "object",
            "description": "Custom configuration options for this wallet"
          }
        }
      },
      "ExpressGenerateWalletResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExpressWallet"
          },
          {
            "type": "object",
            "description": "Wallet with user, bitgo and backup keychains (when `includeKeychains` query param is `true`).",
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/ExpressWallet"
              },
              "userKeychain": {
                "type": "object",
                "description": "User keychain",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Id"
                  },
                  "encryptedPrv": {
                    "type": "string",
                    "description": "User private key encrypted with the user passphrase",
                    "example": "{\"iv\":\"TEd5eouui6hKashuVi5WHQ==\",\"v\":1,\"iter\":10000,\"ks\":256,\"ts\":64,\"mode\":\"ccm\",\"adata\":\"\",\"cipher\":\"aes\",\"salt\":\"dHu4PWoX2M8=\",\"ct\":\"fYr9Y/6kU40AosONkV0xi+fWsyhpYSew0L2YKH/qEZjOlxeDjpC2aTJ0Yc/KdmXheUGolcAxGSx93ykN21Zim1DGc/UGa25IUA/3ARgX7gBsYnYEy5e5Ol0YZYb9pa7KFeaDZSLMXrxxoahg5zL4AJsUx90Pwcg=\"}"
                  },
                  "prv": {
                    "type": "string",
                    "description": "User private key",
                    "example": "xprv9s21ZrQH143K3e1981rUcbKjJ9G57SDCDZ9HY4Sqhx5ZqMoyK1j49kAf1vuM1G9nhRr6kzqbUQb3gj5zuzrsvNRQ84tYf32EcyapRgBNpp4"
                  },
                  "pub": {
                    "$ref": "#/components/schemas/Pub"
                  },
                  "ethAddress": {
                    "type": "string",
                    "description": "Ethereum address corresponding to this keychain",
                    "example": "0xf5b7cca8621691f9dde304cb7128b6bb3d409363"
                  },
                  "source": {
                    "type": "string",
                    "description": "Party that created the key",
                    "example": "user"
                  },
                  "coinSpecific": {
                    "type": "object",
                    "description": "Coin specific key data"
                  }
                }
              },
              "backupKeychain": {
                "type": "object",
                "description": "Backup keychain",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Id"
                  },
                  "prv": {
                    "type": "string",
                    "description": "Backup private key",
                    "example": "xprv9s21ZrQH143K47iEnAFZRJz36E5ZxuEDBJETFYxJTsTVxuPc9z7oGWADUK6icX5P3ruoe244yxMt9uZ2LjWhddvnJJ4zB7zK93qBtxYrmN6"
                  },
                  "pub": {
                    "$ref": "#/components/schemas/Pub"
                  },
                  "source": {
                    "type": "string",
                    "description": "Party that created the key",
                    "example": "backup"
                  },
                  "ethAddress": {
                    "type": "string",
                    "description": "Ethereum address corresponding to this keychain",
                    "example": "0xf5b7cca8621691f9dde304cb7128b6bb3d409363"
                  },
                  "coinSpecific": {
                    "type": "object",
                    "description": "Coin specific key data"
                  }
                }
              },
              "bitgoKeychain": {
                "type": "object",
                "description": "BitGo keychain",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Id"
                  },
                  "pub": {
                    "$ref": "#/components/schemas/Pub"
                  },
                  "isBitGo": {
                    "type": "boolean",
                    "description": "Flag for identifying keychain as created by BitGo",
                    "example": true
                  },
                  "source": {
                    "type": "string",
                    "description": "Party that created the key",
                    "example": "bitgo"
                  },
                  "ethAddress": {
                    "type": "string",
                    "description": "Ethereum address corresponding to this keychain",
                    "example": "0xa487900d0de75107b1cc7ade0e2662980e5ce940"
                  },
                  "coinSpecific": {
                    "type": "object",
                    "description": "Coin specific key data"
                  }
                }
              },
              "warning": {
                "type": "string",
                "description": "If the backup key is held by the user, this is a message warning the user to securely backup their backup keychain.",
                "example": "Be sure to backup the backup keychain -- it is not stored anywhere else!"
              }
            }
          }
        ]
      },
      "ExpressShareWalletRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user being invited",
            "example": "foo@bar.com"
          },
          "permissions": {
            "type": "string",
            "allOf": [
              {
                "description": "Comma-separated list of permissions which are granted by this share"
              },
              {
                "$ref": "#/components/schemas/WalletPermission"
              }
            ],
            "example": "spend,view"
          },
          "walletPassphrase": {
            "type": "string",
            "description": "Wallet passphrase of the user sharing the wallet"
          },
          "message": {
            "type": "string",
            "description": "User readable message to display to the share recipient"
          },
          "reshare": {
            "type": "boolean",
            "description": "Flag for reinviting a user to the wallet <br/> This is required if the invitee has already been invited to the wallet, but has changed their password and needs a new invite"
          },
          "skipKeychain": {
            "type": "boolean",
            "description": "Skips using a shared key (for when the wallet is shared without spend permission)"
          },
          "disableEmail": {
            "type": "boolean",
            "description": "Flag for disabling invite notification email"
          }
        },
        "required": [
          "email",
          "permissions"
        ]
      },
      "ExpressAcceptShareRequest": {
        "type": "object",
        "properties": {
          "userPassword": {
            "type": "string",
            "description": "User's password to decrypt the shared wallet (required if the wallet was shared with spend permission)"
          },
          "newWalletPassphrase": {
            "type": "string",
            "description": "New wallet passphrase for saving the shared wallet private key If not provided and the wallet was shared with spend permission, then the userPassword is used"
          },
          "overrideEncryptedPrv": {
            "type": "string",
            "description": "Encrypted private key received out-of-band"
          }
        }
      },
      "ExpressAcceptShareResponse": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "allOf": [
              {
                "description": "State of the share"
              },
              {
                "$ref": "#/components/schemas/WalletShareState"
              }
            ]
          },
          "changed": {
            "type": "boolean",
            "description": "Indicates if the share changed"
          }
        }
      },
      "UtxoTxInfo": {
        "type": "object",
        "description": "txInfo (UTXO)",
        "properties": {
          "changeAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressString"
            }
          },
          "nOutputs": {
            "type": "integer",
            "description": "Number of outputs",
            "example": 2
          },
          "nP2SHInputs": {
            "type": "integer",
            "example": 0
          },
          "nSegwitInputs": {
            "type": "integer",
            "example": 1
          },
          "unspents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Unspent"
            }
          },
          "walletAddressDetails": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "XlmTxInfo": {
        "type": "object",
        "description": "txInfo (XLM)",
        "properties": {
          "fee": {
            "type": "integer",
            "description": "Network fee",
            "example": 100
          },
          "operations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "string",
                  "description": "Amount in Lumens as string",
                  "example": "10.5"
                },
                "asset": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "XLM"
                    }
                  }
                },
                "destination": {
                  "type": "string",
                  "example": "GCNFRU774FPHLV3HAB6CR54XJYFYITOLU6KS2J5BNCLDPYN7I3DOMIPY"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "payment",
                    "createAccount"
                  ],
                  "example": "payment"
                }
              }
            }
          },
          "sequence": {
            "type": "string",
            "example": "35995558267060226"
          },
          "source": {
            "type": "string",
            "example": "GBSGOXQNPULNPBX7XTHXP2GDBOZMHPIZOOA7CQXYTLHYKF5J2JDCF7LT"
          }
        }
      },
      "ExpressSignTxRequest": {
        "type": "object",
        "properties": {
          "prv": {
            "type": "string",
            "description": "user private key",
            "example": "xprv9s21ZrQH143K3xQwj4yx3fHjDieEdqFDweBvFxn28qGvfQGvweUWuUuDRpepDu6opq3jiWHU9h3yYTKk5vvu4ykRuGA4i4Kz1vmFMPLTsoC"
          },
          "txPrebuild": {
            "type": "object",
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Id"
              },
              "txHex": {
                "type": "string",
                "description": "Serialized transaction hex"
              },
              "txBase64": {
                "type": "string",
                "description": "Serialized transaction base64 (applies to XLM only) The request must include this or a txHex"
              },
              "txInfo": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UtxoTxInfo"
                  },
                  {
                    "$ref": "#/components/schemas/XlmTxInfo"
                  }
                ]
              },
              "feeInfo": {
                "type": "object",
                "properties": {
                  "size": {
                    "type": "integer",
                    "description": "Estimated size of the transaction in bytes",
                    "example": 776
                  },
                  "fee": {
                    "type": "integer",
                    "description": "Estimated fee in base units for the transaction",
                    "example": 38800
                  },
                  "feeRate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IntegerOrString"
                      },
                      {
                        "description": "Custom minimum fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. If the applied `feeRate` does not meet a coin's required minimum transaction fee amount, the minimum is still applied (for example, 1000 sat/kvByte or a flat 1000 microAlgos).\n"
                      },
                      {
                        "example": 10000
                      }
                    ]
                  },
                  "payGoFee": {
                    "type": "integer",
                    "description": "BitGo fee of the transaction (in base units)",
                    "example": 0
                  },
                  "payGoFeeString": {
                    "type": "integer",
                    "description": "BitGo fee of the transaction (in base units) represented as a String",
                    "example": "0"
                  }
                }
              }
            }
          },
          "isLastSignature": {
            "type": "boolean",
            "description": "Should be set to true if you are signing the second time, attaching the final signature. Default to false."
          },
          "pubs": {
            "type": "array",
            "description": "Public Keys (user, backup, bitgo) for the wallet (UTXO coins only)",
            "items": {
              "type": "string"
            },
            "example": [
              "string",
              "string",
              "string"
            ]
          }
        }
      },
      "TxHex": {
        "type": "string",
        "description": "Serialized transaction hex",
        "example": "01000000000101d58f82d996dd872012675adadf4606734906b25a413f6e2ee535c0c10aef96020000000000ffffffff028de888000000000017a914c91aa24f65827eecec775037d886f2952b73cbe48740420f000000000017a9149304d18497b9bfe9532778a0f06d9fff3b3befaf870500473044022023d7210ba6d8bbd7a28b8af226f40f7235caab79156f93f9c9969fc459ea7f73022050fbdca788fba3de686b66b3501853695ff9d6f375867470207d233b099576e001000069522103d4788cda52f91c1f6c82eb91491ca76108c9c5f0839bc4f02eccc55fedb3311c210391bcef9dcc89570a79ba3c7514e65cd48e766a8868eca2769fa9242fdcc796662102ef3c5ebac4b54df70dea1bb2655126368be10ca0462382fcb730e55cddd2dd6a53aec8b11400"
      },
      "TxBase64": {
        "type": "string",
        "description": "Serialized transaction base64 (applies to XLM only)",
        "example": "AAAAAGRnXg19FteG/7zPd+jDC7LDvRlzgfFC+JrPhRep0kYiAAAAZAB/4cUAAAACAAAAAAAAAAAAAAABAAAAAQAAAABkZ14NfRbXhv+8z3fowwuyw70Zc4HxQviaz4UXqdJGIgAAAAEAAAAAmljT/+FedddnAHwo95dOC4RNy6eVLSehaJY34b9GxuYAAAAAAAAAAAehIAAAAAAAAAAAAUrgwAkAAABAOExcvVJIUJv9HuVfbV0y7lRPRARv4wDtcdhHG7QN40h5wQ2uwPF52OGQ8KY+66a1A/8lNKB75sgj2xj44s8lDQ=="
      },
      "ExpressSignTxResponse": {
        "type": "object",
        "properties": {
          "txInfo": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "txHex": {
                    "$ref": "#/components/schemas/TxHex"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "halfSigned": {
                    "type": "object",
                    "properties": {
                      "txBase64": {
                        "$ref": "#/components/schemas/TxBase64"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "UtxoFeeInfo": {
        "type": "object",
        "description": "feeInfo (UTXO)",
        "properties": {
          "size": {
            "type": "integer",
            "description": "Estimated size of the transaction in bytes",
            "example": 776
          },
          "fee": {
            "type": "integer",
            "description": "Estimated fee in base unit for the transaction",
            "example": 38800
          },
          "feeRate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrString"
              },
              {
                "description": "Custom minimum fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. If the applied `feeRate` does not meet a coin's required minimum transaction fee amount, the minimum is still applied (for example, 1000 sat/kvByte or a flat 1000 microAlgos).\n"
              },
              {
                "example": 10000
              }
            ]
          },
          "payGoFee": {
            "type": "integer",
            "description": "BitGo fee of the transaction (in base units)",
            "example": 0
          },
          "payGoFeeString": {
            "type": "integer",
            "description": "BitGo fee of the transaction (in base units) represented as a String",
            "example": "0"
          }
        }
      },
      "XlmFeeInfo": {
        "type": "object",
        "description": "feeInfo (XLM)",
        "properties": {
          "height": {
            "type": "integer",
            "description": "Height of the ledger that provided the values",
            "example": 123456
          },
          "xlmBaseFee": {
            "type": "string",
            "description": "Base network fee per transaction operation",
            "example": "100"
          },
          "xlmBaseReserve": {
            "type": "string",
            "description": "Base reserve used to calculate the minimum balance required by the network",
            "example": "5000000"
          }
        }
      },
      "ExpressWalletSignTxRequest": {
        "type": "object",
        "properties": {
          "keychain": {
            "type": "object",
            "properties": {
              "encryptedPrv": {
                "type": "string",
                "description": "Encrypted user private key"
              }
            },
            "description": "The user's keychain object with an `encryptedPrv` property. The `walletPassphrase` parameter is required when using `keychain`. Any request must include either `keychain` or `prv`.\n"
          },
          "prv": {
            "type": "string",
            "description": "User private key\n\nNote: The request must include either `prv` or `keychain`\n",
            "example": "xprv9s21ZrQH143K3xQwj4yx3fHjDieEdqFDweBvFxn28qGvfQGvweUWuUuDRpepDu6opq3jiWHU9h3yYTKk5vvu4ykRuGA4i4Kz1vmFMPLTsoC"
          },
          "txPrebuild": {
            "type": "object",
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Id"
              },
              "txHex": {
                "type": "string",
                "description": "Serialized transaction hex"
              },
              "txBase64": {
                "type": "string",
                "description": "Serialized transaction base64 (applies to XLM only). <br/> The request must include this or a txHex"
              },
              "txInfo": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UtxoTxInfo"
                  },
                  {
                    "$ref": "#/components/schemas/XlmTxInfo"
                  }
                ]
              },
              "feeInfo": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UtxoFeeInfo"
                  },
                  {
                    "$ref": "#/components/schemas/XlmFeeInfo"
                  }
                ]
              }
            },
            "description": "The transaction description object as created by 'Build Transaction'"
          },
          "coldDerivationSeed": {
            "type": "string",
            "description": "A seed used to create a deterministic BIP-32 path which is then used to derive a private key. This is useful when one wants to create multiple BitGo cold wallets but only protect a single master private key. Using the seed one can create a child key for a specific wallet, for instance an Ethereum wallet could use the \"eth\" seed while an XRP wallet could use \"xrp\" as a seed. Both of these child keys would be derived from a single master key and so only the master key needs to be stored and protected.\n"
          },
          "walletPassphrase": {
            "type": "string",
            "description": "Passphrase to decrypt the user keychain. `walletPassphrase` is a required parameter when the parameter `keychain` is provided.\n"
          },
          "recipients": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Array of objects describing the recipients. See buildTransaction for more detail. Required on ETH."
          }
        }
      },
      "ExpressWalletRecoverTokenRequest": {
        "type": "object",
        "properties": {
          "tokenContractAddress": {
            "type": "string",
            "description": "Contract address of the unsupported token"
          },
          "recipient": {
            "type": "string",
            "description": "Destination address recovered tokens should be sent to"
          },
          "walletPassphrase": {
            "type": "string",
            "description": "Wallet passphrase"
          },
          "prv": {
            "type": "string",
            "description": "User private key"
          }
        }
      },
      "ExpressWalletRecoverTokenResponse": {
        "type": "object",
        "properties": {
          "halfSigned": {
            "type": "object",
            "properties": {
              "contractSequenceId": {
                "type": "integer",
                "example": 1101
              },
              "expireTime": {
                "type": "integer",
                "example": 1550088020
              },
              "gasLimit": {
                "type": "integer",
                "example": 500000
              },
              "gasPrice": {
                "type": "integer",
                "example": 20000000000
              },
              "operationHash": {
                "type": "string",
                "example": 9.44792020725999e+76
              },
              "recipient": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "example": 4.7261295088313645e+47
                  },
                  "amount": {
                    "type": "string",
                    "example": "2400"
                  }
                }
              },
              "signature": {
                "type": "string",
                "example": 1.9519588812712557e+156
              },
              "tokenContractAddress": {
                "type": "string",
                "example": 3.8941146273864216e+46
              },
              "walletId": {
                "$ref": "#/components/schemas/Id"
              }
            }
          }
        }
      },
      "ConsolidationCoins": {
        "type": "string",
        "enum": [
          "algo",
          "talgo",
          "xtz",
          "txtz"
        ],
        "description": "This route is only available for Algorand and Tezos."
      },
      "ConsolidateAccountBuildRequest": {
        "type": "object",
        "properties": {
          "consolidateAddresses": {
            "description": "Optional: restrict the consolidation to the specified receive addresses. If not provided, will consolidate the\nfunds from all receive addresses.\n",
            "maximum": 500,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ConsolidateAccountBuildResponse": {
        "type": "object",
        "properties": {
          "keyDerivationPath": {
            "type": "string"
          }
        }
      },
      "ExpressConsolidateUnspentsRequest": {
        "type": "object",
        "properties": {
          "walletPassphrase": {
            "type": "string",
            "description": "Passphrase to decrypt the user key on the wallet"
          },
          "xprv": {
            "type": "string",
            "description": "Private key in string form, if walletPassphrase is not available"
          },
          "feeRate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrString"
              },
              {
                "description": "Custom minimum fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. If the applied `feeRate` does not meet a coin's required minimum transaction fee amount, the minimum is still applied (for example, 1000 sat/kvByte or a flat 1000 microAlgos).\n"
              },
              {
                "example": 10000
              }
            ]
          },
          "maxFeeRate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrIntegerString"
              },
              {
                "description": "Custom upper limit for fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. `maxFeeRate` can be used to limit a fee rate estimate generated with `numBlocks`.\n"
              },
              {
                "example": 20000
              }
            ]
          },
          "maxFeePercentage": {
            "type": "integer",
            "description": "Maximum relative portion that can be spent towards fees"
          },
          "feeTxConfirmTarget": {
            "type": "integer",
            "description": "Block target for fee estimation"
          },
          "minValue": {
            "type": "integer",
            "description": "Minimum value of unspents to use in base units (e.g. satoshis). Can be used to skip very small unspents when consolidating at higher fee rates.",
            "example": 10000
          },
          "maxValue": {
            "type": "integer",
            "description": "Maximum value of unspents to use in base units (e.g. satoshis). Should be used to prevent larger unspents from being consolidated needlessly, and that some funds remain available for spending while the consolidation transactions are in flight.\n",
            "example": 1000000
          },
          "minHeight": {
            "type": "integer",
            "description": "Minimum height of unspents on the block chain to use"
          },
          "minConfirms": {
            "type": "integer",
            "description": "Minimum confirmation threshold for external inputs"
          },
          "enforceMinConfirmsForChange": {
            "type": "boolean",
            "description": "Flag for enforcing minConfirms for change inputs"
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of unspents to use in the transaction"
          },
          "numUnspentsToMake": {
            "type": "integer",
            "description": "Number of new unspents to make"
          },
          "targetAddress": {
            "type": "string",
            "description": "address to use for generated outputs. Must be wallet address."
          }
        }
      },
      "ExpressFanOutUnspentsRequest": {
        "type": "object",
        "properties": {
          "walletPassphrase": {
            "type": "string",
            "description": "Passphrase to decrypt the user key on the wallet"
          },
          "xprv": {
            "type": "string",
            "description": "Private key in string form, if walletPassphrase is not available"
          },
          "feeRate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrString"
              },
              {
                "description": "Custom minimum fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. If the applied `feeRate` does not meet a coin's required minimum transaction fee amount, the minimum is still applied (for example, 1000 sat/kvByte or a flat 1000 microAlgos).\n"
              },
              {
                "example": 10000
              }
            ]
          },
          "maxFeeRate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrIntegerString"
              },
              {
                "description": "Custom upper limit for fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. `maxFeeRate` can be used to limit a fee rate estimate generated with `numBlocks`.\n"
              },
              {
                "example": 20000
              }
            ]
          },
          "maxFeePercentage": {
            "type": "integer",
            "description": "Maximum relative portion that can be spent towards fees"
          },
          "feeTxConfirmTarget": {
            "type": "integer",
            "description": "Block target for fee estimation"
          },
          "minValue": {
            "type": "integer",
            "description": "Minimum value of unspents to use in base units (e.g. satoshis)"
          },
          "maxValue": {
            "type": "integer",
            "description": "Maximum value of unspents to use in base units (e.g. satoshis)"
          },
          "minHeight": {
            "type": "integer",
            "description": "Minimum height of unspents on the block chain to use"
          },
          "minConfirms": {
            "type": "integer",
            "description": "Minimum confirmation threshold for external inputs"
          },
          "enforceMinConfirmsForChange": {
            "type": "boolean",
            "description": "Flag for enforcing minConfirms for change inputs"
          },
          "maxNumInputsToUse": {
            "type": "integer",
            "description": "Maximum number of unspents to use in the transaction"
          },
          "numUnspentsToMake": {
            "type": "integer",
            "description": "Number of new unspents to make"
          },
          "targetAddress": {
            "type": "string",
            "description": "address to use for generated outputs. Must be wallet address."
          }
        }
      },
      "ExpressSweepRequest": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The destination address for the sweep transaction"
          },
          "walletPassphrase": {
            "type": "string",
            "description": "Passphrase to decrypt the user key on the wallet"
          },
          "xprv": {
            "type": "string",
            "description": "Private key in string form, if walletPassphrase is not available"
          },
          "otp": {
            "type": "string",
            "description": "Two factor auth code to enable sending the transaction"
          },
          "feeTxConfirmTarget": {
            "type": "string",
            "description": "Number of blocks to wait to confirm the transaction"
          },
          "feeRate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrString"
              },
              {
                "description": "Custom minimum fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. If the applied `feeRate` does not meet a coin's required minimum transaction fee amount, the minimum is still applied (for example, 1000 sat/kvByte or a flat 1000 microAlgos).\n"
              },
              {
                "example": 10000
              }
            ]
          },
          "maxFeeRate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegerOrIntegerString"
              },
              {
                "description": "Custom upper limit for fee rate in a coin's base unit per kilobyte (or virtual kilobyte)--for example, satoshis per kvByte or microAlgos per kByte. `maxFeeRate` can be used to limit a fee rate estimate generated with `numBlocks`.\n"
              },
              {
                "example": 20000
              }
            ]
          },
          "allowPartialSweep": {
            "type": "boolean",
            "default": false,
            "description": "Use `allowPartialSweep: true` to sweep part of a wallet when there are too many unspents to empty the wallet in a\nsingle transaction. While the expected outcome of a single sweep call would usually be an empty wallet, using the\nallowPartialSweep option may leave some funds in the wallet. Making repeated calls with the allowPartialSweep\noption allows emptying wallets with many unspents without consolidating first.\n"
          }
        }
      },
      "Bitcoin": {
        "type": "string",
        "enum": [
          "btc",
          "tbtc"
        ],
        "description": "This route is only available for Bitcoin."
      },
      "ExpressAccelerateTxRequest": {
        "type": "object",
        "properties": {
          "cpfpTxIds": {
            "type": "array",
            "description": "txids of the transactions to bump\n\n**Notes**:\nEach target unconfirmed transaction must be sending funds to the calling wallet.\nAccepts only a single txid at this stage.\n",
            "items": {
              "$ref": "#/components/schemas/TxId"
            }
          },
          "cpfpFeeRate": {
            "type": "integer",
            "description": "Desired effective feerate of the bumped transactions and the CPFP transaction in satoshi per kilobyte"
          },
          "maxFee": {
            "type": "integer",
            "description": "Maximum allowed fee for the CPFP transaction in satoshi\n\n**Note**:\nA CPFP transaction accelerates the target transactions and all of the unconfirmed transactions the target transactions depends on.\nAs it can be difficult to discern the complete transaction ancestry at times, we recommend limiting the total fee for each CPFP attempt as a safety net to prevent CPFP transactions that exceed your cost expectations.\n"
          }
        }
      },
      "UpdateCommentRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The new comment for the transfer."
          }
        }
      },
      "ChangeFeeRequest": {
        "type": "object",
        "properties": {
          "txid": {
            "type": "string",
            "description": "The transaction id of the transaction for which we are changing fee.\n",
            "$ref": "#/components/schemas/Id"
          },
          "fee": {
            "type": "integer",
            "description": "The new fee for the transaction."
          },
          "eip1559": {
            "type": "object",
            "properties": {
              "maxPriorityFeePerGas": {
                "type": "string",
                "description": "Max priority tip price for EIP1559 transactions. Only for ETH and ERC20 tokens."
              },
              "maxFeePerGas": {
                "type": "string",
                "description": "Max total gasPrice for EIP1559 transactions. Only for ETH and ERC20 tokens."
              }
            },
            "required": [
              "maxPriorityFeePerGas",
              "maxFeePerGas"
            ]
          }
        }
      },
      "ChangeFeeResponse": {
        "type": "object",
        "properties": {
          "txid": {
            "type": "string",
            "description": "Transaction id of the newly created transaction with increased fee rate.\n",
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "ExpressCanonicalAddressRequest": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address to canonicalize"
          },
          "version": {
            "type": "string",
            "description": "Version of the desired address (defaults to 'base58')",
            "enum": [
              "base58",
              "bech32"
            ]
          }
        }
      },
      "ExpressVerifyCoinAddressRequest": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "allOf": [
              {
                "description": "Address which should be verified for correct format"
              },
              {
                "$ref": "#/components/schemas/AddressString"
              }
            ]
          }
        }
      },
      "ExpressResolvePendingApprovalRequest": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "New state for the pending approval",
            "enum": [
              "approved",
              "rejected"
            ]
          },
          "walletPassphrase": {
            "type": "string",
            "description": "Passphrase to decrypt the user key on the wallet"
          },
          "xprv": {
            "type": "string",
            "description": "Private key in string form, if walletPassphrase is not available"
          },
          "otp": {
            "$ref": "#/components/schemas/Otp"
          }
        }
      },
      "AuditLogType": {
        "type": "string",
        "enum": [
          "addPolicy",
          "addUser",
          "addWebhook",
          "adminRenameEnterprise",
          "adminUpdateBankAccount",
          "adminUpdatePasswordReset",
          "approveEnterpriseUser",
          "approvePolicy",
          "approveTransaction",
          "approveUser",
          "bitgoSigned",
          "changePolicy",
          "createAccessToken",
          "createBankAccount",
          "createEnterprise",
          "createPasswordReset",
          "createReset2FA",
          "createSendLabel",
          "createTransaction",
          "createWallet",
          "deleteAccessToken",
          "deletePasswordReset",
          "deleteSendLabel",
          "freezeEnterprise",
          "freezeWallet",
          "labelAddress",
          "oAuthAuthorize",
          "policyUpdated",
          "rejectEnterpriseUser",
          "rejectPolicy",
          "rejectTransaction",
          "rejectUser",
          "removePolicy",
          "removeUser",
          "removeWallet",
          "removeWebhook",
          "renameWallet",
          "shareUser",
          "shareUserAccept",
          "shareUserCancel",
          "shareUserDecline",
          "supportReset2FA",
          "unlabelAddress",
          "updateApprovalsRequired",
          "updateBankAccount",
          "updateComment",
          "updateEnterpriseUser",
          "updateNotificationSettings",
          "updateSendLabel",
          "updateTag",
          "updateWalletCoinSpecific",
          "user2FAAdd",
          "user2FARemove",
          "userFailedLogin",
          "userLogin",
          "userPasswordChange",
          "userPasswordReset",
          "userSettingsChange",
          "userSignup",
          "userSourceVerified",
          "verifyReset2FA"
        ]
      },
      "AuditLog": {
        "type": "object",
        "properties": {
          "coin": {
            "$ref": "#/components/schemas/Coin"
          },
          "data": {
            "type": "object",
            "description": "Properties that apply to the given audit log type"
          },
          "date": {
            "$ref": "#/components/schemas/DateTime"
          },
          "enterpriseId": {
            "$ref": "#/components/schemas/Id"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ip"
              },
              {
                "description": "The client IP that caused the AuditLog entry to be written"
              }
            ]
          },
          "target": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              },
              {
                "description": "Object that the AuditLog entry is associated with"
              }
            ]
          },
          "type": {
            "$ref": "#/components/schemas/AuditLogType"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              },
              {
                "description": "The user that caused the AuditLog entry to be written"
              }
            ]
          },
          "walletId": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "AuditLogsResponse": {
        "type": "object",
        "properties": {
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLog"
            }
          },
          "nextBatchPrevId": {
            "$ref": "#/components/schemas/NextBatchPrevId"
          }
        },
        "required": [
          "logs"
        ]
      },
      "BalanceStaked": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "the address of the wallet",
              "$ref": "#/components/schemas/AddressString"
            },
            "balances": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "an object containing of validators and the current staked amount",
                "properties": {
                  "validator": {
                    "type": "string",
                    "description": "the validator",
                    "$ref": "#/components/schemas/AddressString"
                  },
                  "staked_amount": {
                    "type": "string",
                    "description": "the amount delegated to the validator",
                    "example": "5000000000"
                  }
                }
              }
            }
          }
        }
      },
      "BalanceTotalRewards": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "the address of the wallet",
              "$ref": "#/components/schemas/AddressString"
            },
            "rewards": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "an object containing the reward recipient address and the total rewards received",
                "properties": {
                  "reward_recipient": {
                    "type": "string",
                    "description": "the receiving address",
                    "$ref": "#/components/schemas/AddressString"
                  },
                  "reward_amount": {
                    "type": "string",
                    "description": "the total rewards received",
                    "example": "5000000000"
                  }
                }
              }
            }
          }
        }
      },
      "LightningWithdrawRequest": {
        "type": "object",
        "properties": {
          "value": {
            "description": "The amount to withdraw denominated in satoshis",
            "type": "number",
            "example": 50000000
          },
          "destination": {
            "description": "An address that will receive the on-chain funds. This address must belong\nto the BitGo wallet for which the withdrawal request is being made.\n",
            "type": "string",
            "example": "bc1q2la002q4rylgx9luzlv7dyr5ykeh0n46xnf02w"
          },
          "sequenceId": {
            "type": "string",
            "description": "Your own unique ID for this withdrawal. This acts as a unique identifier\nfor the withdrawal. Requests with the same values as a previous request\nwill be rejected to prevent duplicate withdrawals.\n"
          }
        },
        "required": [
          "value",
          "destination",
          "sequenceId"
        ]
      },
      "LightningWithdrawResponse": {
        "type": "object",
        "properties": {
          "transfer": {
            "$ref": "#/components/schemas/Transfer"
          },
          "status": {
            "$ref": "#/components/schemas/TransferState"
          }
        }
      },
      "LightningAddressResponse": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/AddressString"
          }
        }
      },
      "LightningGetInvoicesResponse": {
        "type": "object",
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "paymentHash": {
                  "description": "The payment hash of the invoice",
                  "type": "string",
                  "example": "63d9ce82e09d16761a85116ed8b65407db4fb22f85d03573de09c480f2c6d175"
                },
                "value": {
                  "description": "The value of the invoice in satoshis",
                  "type": "number",
                  "example": 50000
                },
                "expiresAt": {
                  "description": "ISO-8601 string representing when the invoice will expire",
                  "type": "string",
                  "example": "2022-04-01T18:46:24.677Z"
                },
                "createdAt": {
                  "description": "ISO-8601 string representing when the invoice was created",
                  "type": "string",
                  "example": "2022-04-01T17:46:24.677Z"
                },
                "updatedAt": {
                  "description": "ISO-8601 string representing when the invoice was updated last",
                  "type": "string",
                  "example": "2022-04-01T18:16:24.677Z"
                },
                "status": {
                  "description": "The status of the invoice",
                  "type": "string",
                  "enum": [
                    "open",
                    "settled",
                    "canceled"
                  ]
                },
                "walletId": {
                  "$ref": "#/components/schemas/Id",
                  "description": "The wallet to which this invoice belongs"
                },
                "amtPaidSats": {
                  "description": "The actual amount paid to the invoice in satoshis",
                  "type": "number",
                  "example": 50000
                }
              }
            }
          }
        }
      },
      "CreateInvoiceRequest": {
        "type": "object",
        "properties": {
          "value": {
            "description": "The value of the invoice in satoshis",
            "type": "number",
            "example": 50000
          },
          "memo": {
            "description": "A memo or description to include in the invoice",
            "type": "string",
            "example": "Latte macchiato"
          },
          "expiry": {
            "description": "The number of seconds before the invoice expires",
            "type": "number",
            "default": 3600
          }
        }
      },
      "LightningInvoice": {
        "type": "object",
        "properties": {
          "invoice": {
            "description": "The BOLT \\#11 encoded invoice",
            "example": "lnbc500n1p3zv5vkpp5x0thcaz8wep54clc2xt5895azjdzmthyskzzh9yslggy74qtvl6sdpdg3hkuct5d9hkugrxdaezqjn0dphk2fmnypkk2mtsdahkccqzpgxqyz5vqsp5v80q4vq4pwakq2l0hcqgtelgajsymv4ud4jdcrqtnzhvet55qlus9qyyssquqh2wl2m866qs5n72c5vg6wmqx9vzwhs5ypualq4mcu76h2tdkcq3jtjwtggfff7xwtdqxlnwqk8cxpzryjghrmmq3syraswp9vjr7cqry9l96",
            "type": "string"
          },
          "paymentHash": {
            "description": "The payment hash of the invoice",
            "type": "string",
            "example": "63d9ce82e09d16761a85116ed8b65407db4fb22f85d03573de09c480f2c6d175"
          },
          "value": {
            "description": "The value of the invoice in satoshis",
            "type": "number",
            "example": 50000
          },
          "memo": {
            "description": "A memo or description for the invoice",
            "type": "string",
            "example": "Latte macchiato"
          },
          "expiresAt": {
            "description": "ISO-8601 string representing when the invoice will expire",
            "type": "string",
            "example": "2022-04-01T18:46:24.677Z"
          },
          "status": {
            "description": "The status of the invoice",
            "type": "string",
            "enum": [
              "open",
              "settled",
              "canceled"
            ]
          },
          "walletId": {
            "$ref": "#/components/schemas/Id",
            "description": "The wallet to which this invoice belongs"
          }
        }
      },
      "LightningBalanceResponse": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "description": "The lightning balance for the wallet in satoshis",
            "example": 25000000
          },
          "availableBalance": {
            "type": "number",
            "description": "The available lightning balance in satoshis minus holds\nfor pending payments or withdrawals.\n",
            "example": 24000000
          }
        }
      },
      "LightningPaymentRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "An optional memo for the transaction.",
            "maxLength": 256
          },
          "sequenceId": {
            "type": "string",
            "description": "Your own unique ID"
          },
          "feeLimitRatio": {
            "type": "number",
            "description": "The maximum fee in proportion to the payment amount that may be paid as a\nfee for the payment. This number is multiplied by the value of the\ninvoice to determine the fee limit. Only one of feeLimit or feeLimitRatio\nshould be specified, if neither is specified then the greater of 25\nsatoshis or 5% of the invoice amount is used for the fee limit.\n",
            "example": 0.03
          },
          "feeLimit": {
            "type": "number",
            "description": "The maximum number of satoshis that may be paid as a fee for the payment.\nOnly one of feeLimit or feeLimitRatio should be specified, if neither is\nspecified then the greater of 25 satoshis or 5% of the invoice amount is\nused for the fee limit.\n",
            "example": 200
          }
        }
      },
      "LightningInvoicePaymentRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LightningPaymentRequest"
          },
          {
            "properties": {
              "invoice": {
                "description": "The BOLT \\#11 encoded invoice to pay",
                "example": "lnbc500n1p3zv5vkpp5x0thcaz8wep54clc2xt5895azjdzmthyskzzh9yslggy74qtvl6sdpdg3hkuct5d9hkugrxdaezqjn0dphk2fmnypkk2mtsdahkccqzpgxqyz5vqsp5v80q4vq4pwakq2l0hcqgtelgajsymv4ud4jdcrqtnzhvet55qlus9qyyssquqh2wl2m866qs5n72c5vg6wmqx9vzwhs5ypualq4mcu76h2tdkcq3jtjwtggfff7xwtdqxlnwqk8cxpzryjghrmmq3syraswp9vjr7cqry9l96",
                "type": "string"
              },
              "amount": {
                "type": "number",
                "description": "A specific amount of satoshis to pay for this request. This is used to\npay more than the amount requested by the invoice, such as for zero\nvalue invoices that will accept any size payment. Must be greater than\nor equal to any amount specified by the invoice.\n"
              }
            }
          }
        ],
        "required": [
          "invoice"
        ]
      },
      "LightningLnurlPaymentRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LightningPaymentRequest"
          },
          {
            "properties": {
              "lnurl": {
                "type": "string",
                "description": "The encoded LNURL pay request",
                "example": "lnurl1dp68gurn8ghj7mrww4exctt5dahkccn00qhxget8wfjk2um0veax2un09e3k7mf0w5lhz0fhve3nsdenxejkzdenxscxxv33x93kxc3evymkycesvymxxdfj8qcrgdfkv93nxvfev9jngcejv9nxxvpevgergepnxa3xgep58qukyakqmda"
              },
              "amount": {
                "type": "number",
                "description": "A specific amount of satoshis to pay for this request. This is used\nwhen an LNURL pay request offers a range of acceptable payment sizes.\n"
              },
              "maxAmount": {
                "type": "number",
                "description": "The maximum amount in satoshis that should be paid for this LNURL-pay\nrequest. This may prevent overpaying when the LNURL-pay request requires\nmore than expected for a given payment.\n",
                "default": 1000000
              }
            }
          }
        ],
        "required": [
          "lnurl"
        ]
      },
      "LightningPaymentResponse": {
        "type": "object",
        "properties": {
          "transfer": {
            "$ref": "#/components/schemas/Transfer"
          },
          "status": {
            "$ref": "#/components/schemas/TransferState"
          },
          "paymentHash": {
            "description": "The unique payment hash used for this payment..",
            "type": "string",
            "example": "63d9ce82e09d16761a85116ed8b65407db4fb22f85d03573de09c480f2c6d175"
          }
        }
      },
      "TradePayload": {
        "title": "Trade Payload",
        "description": "This payload must be cryptographically signed with a trading account's private key to authorize the movement of funds",
        "type": "string",
        "example": "{\"version\":\"1.2.0\",\"accountId\":\"59cd72485007a239fb00282ed480da1f\",\"amounts\":[{\"accountId\":\"5e20faa843795147000da79b8a01f757\",\"sendSubtotal\":\"1000000\",\"sendAmount\":\"1000000\",\"sendCurrency\":\"ofctusd\",\"receiveAmount\":\"1000000\",\"receiveCurrency\":\"ofctbtc\"},{\"accountId\":\"59cd72485007a239fb00282ed480da1f\",\"sendSubtotal\":\"1000000\",\"sendAmount\":\"1000000\",\"sendCurrency\":\"ofctbtc\",\"receiveAmount\":\"1000000\",\"receiveCurrency\":\"ofctusd\"}],\"nonceHold\":\"zq/aCtZC4XOlDyRGFdlsww==\",\"nonceSettle\":\"FnG6xbzehNn0o/0Qt3UeUg==\"}"
      },
      "ApiError-2": {
        "type": "object",
        "description": "An API error returned by the service.",
        "properties": {
          "error": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "errorName": {
            "type": "string",
            "description": "Immutable error code for API integration"
          },
          "reqId": {
            "type": "string",
            "description": "Client request id"
          }
        },
        "required": [
          "error",
          "errorName",
          "reqId"
        ],
        "example": {
          "error": "Missing required parameter: accountId",
          "errorName": "MissingRequiredParameter",
          "reqId": "3fa3fb673ce950a95fd2d395e245efbe"
        }
      },
      "SettlementStatus": {
        "description": "The current status of the settlement",
        "type": "string",
        "enum": [
          "canceled",
          "pending",
          "rejected",
          "settled",
          "failed"
        ],
        "example": "pending"
      },
      "AffirmationStatus": {
        "description": "The current status of the affirmation",
        "type": "string",
        "enum": [
          "pending",
          "overdue",
          "rejected",
          "affirmed",
          "failed",
          "canceled"
        ],
        "example": "pending"
      },
      "LockStatus": {
        "description": "The current status of the settlement",
        "type": "string",
        "enum": [
          "active",
          "settled",
          "failed",
          "requested",
          "released"
        ],
        "example": "active"
      },
      "Lock": {
        "title": "Lock",
        "description": "Assets locked up on a trading account",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Lock ID"
          },
          "accountId": {
            "type": "string",
            "description": "Trading account ID that has funds locked up"
          },
          "status": {
            "$ref": "#/components/schemas/LockStatus"
          },
          "amount": {
            "type": "string",
            "description": "Amount of funds locked in fractional units"
          },
          "currency": {
            "type": "string",
            "description": "Currency of funds locked"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO date string"
          }
        },
        "example": {
          "id": "b44616d8-142d-41d7-8037-b6b08f65919f",
          "accountId": "5ca309aa4b389efa274c7fbc8cfc1c72",
          "status": "active",
          "amount": "1000000",
          "currency": "USD",
          "createdAt": "2019-05-02T00:37:48.696Z"
        }
      },
      "Affirmation": {
        "title": "Affirmation",
        "description": "A record of agreement or rejection to a trade by a counterparty.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Affirmation ID",
            "format": "uuid"
          },
          "counterpartyAccountId": {
            "type": "string",
            "description": "The account ID of the counterparty",
            "format": "uuid"
          },
          "counterpartyName": {
            "type": "string",
            "description": "The name of the counterparty's trading account"
          },
          "partyAccountId": {
            "type": "string",
            "description": "Trading account that the Affirmation belongs to",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/AffirmationStatus"
          },
          "settlement": {
            "type": "string",
            "format": "uuid",
            "description": "Settlement ID associated with this Affirmation"
          },
          "lock": {
            "$ref": "#/components/schemas/Lock"
          },
          "payload": {
            "type": "string",
            "description": "Stringified JSON of trade payload. If the Affirmation signature is not found, then `payload` is automatically calculated and populated here"
          },
          "signature": {
            "type": "string",
            "description": "The `payload` cryptographically signed by trading account. Used to authorize the movement of funds"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO date string"
          },
          "expireAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO date string"
          }
        },
        "example": {
          "id": "ff88a76c-af71-4f70-b136-ecb3e9b8dcbc",
          "counterpartyAccountId": "5e20faa843795147000da79b8a01f757",
          "counterpartyName": "Trader Account",
          "partyAccountId": "59cd72485007a239fb00282ed480da1f",
          "status": "pending",
          "settlement": "5be99b8a-6eb5-4ed6-b135-894bb22c5454",
          "lock": {
            "id": "b44616d8-142d-41d7-8037-b6b08f65919f",
            "accountId": "5ca309aa4b389efa274c7fbc8cfc1c72",
            "status": "active",
            "amount": "1000000",
            "currency": "ofctusd",
            "createdAt": "2019-05-02T00:37:48.696Z"
          },
          "payload": "{\"version\":\"1.2.0\",\"accountId\":\"59cd72485007a239fb00282ed480da1f\",\"amounts\":[{\"accountId\":\"5e20faa843795147000da79b8a01f757\",\"sendSubtotal\":\"1000000\",\"sendAmount\":\"1000000\",\"sendCurrency\":\"ofctusd\",\"receiveAmount\":\"1000000\",\"receiveCurrency\":\"ofctbtc\"},{\"accountId\":\"59cd72485007a239fb00282ed480da1f\",\"sendSubtotal\":\"1000000\",\"sendAmount\":\"1000000\",\"sendCurrency\":\"ofctbtc\",\"receiveAmount\":\"1000000\",\"receiveCurrency\":\"ofctusd\"}],\"nonceHold\":\"zq/aCtZC4XOlDyRGFdlsww==\",\"nonceSettle\":\"FnG6xbzehNn0o/0Qt3UeUg==\"}",
          "createdAt": "2019-05-02T00:37:48.804Z",
          "expireAt": "2019-05-03T00:37:49.196Z"
        }
      },
      "TradeStatus": {
        "description": "The status of the trade",
        "type": "string",
        "enum": [
          "pending",
          "overdue",
          "rejected",
          "affirmed",
          "settled",
          "failed"
        ],
        "example": "pending"
      },
      "Trade-2": {
        "title": "Trade",
        "description": "An agreed-upon swap of two assets for another (fiat or crypto) between two counterparties.",
        "type": "object",
        "required": [
          "baseAccountId",
          "quoteAccountId",
          "status",
          "timestamp",
          "baseAmount",
          "baseCurrency",
          "quoteAmount",
          "quoteCurrency"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Trade ID"
          },
          "baseAccountId": {
            "type": "string",
            "description": "Trading account ID that is sending base currency"
          },
          "quoteAccountId": {
            "type": "string",
            "description": "Trading account ID that is sending quote currency"
          },
          "status": {
            "$ref": "#/components/schemas/TradeStatus"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "ISO date string"
          },
          "baseAmount": {
            "type": "string",
            "description": "Amount of base currency in fractional units"
          },
          "quoteAmount": {
            "type": "string",
            "description": "Amount of quote currency in fractional units"
          },
          "baseCurrency": {
            "type": "string",
            "description": "Base offchain currency of currency pair. (eg. for trading pair BTC/USD, ofcbtc would be `baseCurrency`)"
          },
          "quoteCurrency": {
            "type": "string",
            "description": "Quote offchain currency of currency pair. (eg. for trading pair BTC/USD, ofcusd would be `quoteCurrency`)"
          },
          "baseReceiveAmount": {
            "type": "string",
            "description": "Amount of base receive currency that the baseAccount expects to receive (in fractional units)"
          },
          "quoteReceiveAmount": {
            "type": "string",
            "description": "Amount of quote receive currency that the quoteAccount expects to receive (in fractional units)"
          },
          "baseReceiveCurrency": {
            "type": "string",
            "description": "Base offchain currency of currency pair that the baseAccount expects to receive (eg. for trading pair BTC/USD, ofusd would be `baseReceiveCurrency`). Only required for agency settlement."
          },
          "quoteReceiveCurrency": {
            "type": "string",
            "description": "Quote offchain currency of currency pair that the quoteAccount expects to receive. (eg. for trading pair BTC/USD, ofcbtc would be `quoteReceiveCurrency`). Only required for agency settlement."
          },
          "costBasis": {
            "type": "string",
            "description": "Price of base currency per quote currency (optional field set by customer for their own use.)"
          },
          "costBasisCurrency": {
            "type": "string",
            "description": "Fiat currency used for `costBasis`"
          },
          "externalId": {
            "type": "string",
            "description": "Trade ID used in your system"
          }
        },
        "example": {
          "id": "f4e94c8b-9d4f-40c8-815d-87cf2cec5d2d",
          "baseAccountId": "5e20faa943795147000da7b2f5d063fe",
          "quoteAccountId": "5e20faa843795147000da79b8a01f757",
          "status": "executed",
          "timestamp": "2020-01-17T00:07:13.057Z",
          "baseAmount": "781592",
          "quoteAmount": "842032",
          "baseCurrency": "ofctbtc",
          "quoteCurrency": "ofctusd",
          "baseReceiveAmount": "842032",
          "quoteReceiveAmount": "781592",
          "baseReceiveCurrency": "ofctusd",
          "quoteReceiveCurrency": "ofctbtc",
          "costBasis": "200",
          "costBasisCurrency": "usd",
          "externalId": "q1zuut12yza9dpcaukej0atn48jrpw9q"
        }
      },
      "Settlement": {
        "title": "Settlement",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Settlement ID",
            "example": "5be99b8a-6eb5-4ed6-b135-894bb22c5454"
          },
          "requesterAccountId": {
            "type": "string",
            "description": "Trading account that is requesting settlement",
            "example": "5caed8b6e9abd8e865e3a942a74967d3"
          },
          "requesterAccountName": {
            "type": "string",
            "description": "Name of trading account that is requesting settlement",
            "example": "Enterprise A Trading Account"
          },
          "status": {
            "$ref": "#/components/schemas/SettlementStatus"
          },
          "type": {
            "description": "The current status of the settlement",
            "type": "string",
            "enum": [
              "direct",
              "agency"
            ],
            "example": "direct"
          },
          "affirmations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Affirmation"
            }
          },
          "expireAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO date string"
          },
          "finalizedAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO date string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO date string"
          },
          "trades": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trade-2"
            }
          }
        }
      },
      "WalletId": {
        "type": "string",
        "example": "59cd72485007a239fb00282ed480da1f"
      },
      "FeeRates": {
        "title": "FeeRate",
        "description": "Fee rates set for a given account",
        "type": "object",
        "properties": {
          "settlement": {
            "type": "number",
            "description": "Fee rate for settlements. This value is specified in basis points (hundredths of a percent)",
            "example": 5
          }
        }
      },
      "AccountSettings": {
        "title": "Trading Account Settings",
        "type": "object",
        "properties": {
          "accountId": {
            "$ref": "#/components/schemas/WalletId",
            "description": "ID of the trading account for which these settings apply"
          },
          "affirmationExpirationTime": {
            "type": "number",
            "description": "Expiration time for new settlements and affirmations, in milliseconds. If this amount of time passes before a settlement is affirmed, rejected, or canceled, the settlement will be marked as failed",
            "example": 86400000
          },
          "feeRates": {
            "$ref": "#/components/schemas/FeeRates"
          },
          "referralCode": {
            "type": "string",
            "description": "Referral code of given account",
            "example": "FC8G"
          }
        }
      },
      "TradingPartnerStatus": {
        "description": "Partnership status between two trading accounts",
        "type": "string",
        "enum": [
          "accepted",
          "rejected",
          "canceled",
          "pending",
          "unknown"
        ],
        "example": "accepted"
      },
      "TradingPartnerType": {
        "description": "Partnership type between two trading accounts ",
        "type": "string",
        "enum": [
          "direct",
          "agency"
        ],
        "example": "direct"
      },
      "TradingPartner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "unique ID of the trading partnership, used for updating partnerships"
          },
          "primaryAccountId": {
            "type": "string",
            "description": "primary account ID of the partnership"
          },
          "primaryEnterpriseName": {
            "type": "string",
            "description": "enterprise name of the primary account ID"
          },
          "secondaryAccountId": {
            "type": "string",
            "description": "secondary account ID of the partnership"
          },
          "secondaryEnterpriseName": {
            "type": "string",
            "description": "enterprise name of the secondary account ID"
          },
          "status": {
            "$ref": "#/components/schemas/TradingPartnerStatus"
          },
          "type": {
            "$ref": "#/components/schemas/TradingPartnerType"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO date string"
          },
          "requesterAccountId": {
            "type": "string",
            "description": "account ID that initiated the trading partner request"
          }
        },
        "example": {
          "id": "456ed60d-3fd7-4463-88ba-1e489a48c530",
          "primaryEnterpriseName": "Trading Partner Co.",
          "primaryAccountId": "585cf0c85573c3a8416ac85f",
          "secondaryEnterpriseName": "Requester Co.",
          "secondaryAccountId": "585ci0c855g3c3a8416ac85g",
          "status": "accepted",
          "type": "direct",
          "updatedAt": "2019-05-03T00:37:49.196Z",
          "requesterAccountId": "585ci0c855g3c3a8416ac85g"
        }
      },
      "TradingReferralRequesterSide": {
        "description": "Requester is the primary or the secondary account in the trading partnership. e.g. If the requester wants their partner as the agent, then they are secondary account and their partner is the primary account.",
        "type": "string",
        "enum": [
          "primary",
          "secondary"
        ],
        "example": "primary"
      }
    },
    "examples": {
      "EthStakingRequestPOSTBodyExample": {
        "summary": "Ethereum Staking Request POST Body Example",
        "value": {
          "clientId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "amount": 64000000000000000000,
          "gasPrice": 1000000000000000,
          "type": "STAKE"
        }
      },
      "NearStakingRequestPOSTBodyExample": {
        "summary": "Near Staking Request POST Body Example",
        "value": {
          "clientId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "amount": 12000000000000000000,
          "type": "STAKE"
        }
      },
      "SolStakingRequestPOSTBodyExample": {
        "summary": "Sol Staking Request POST Body Example",
        "value": {
          "clientId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "amount": 1000,
          "type": "STAKE"
        }
      },
      "NearUnStakingRequestPOSTBodyExample": {
        "summary": "Near UnStaking Request POST Body Example",
        "value": {
          "clientId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "amount": 12000000000000000000,
          "type": "UNSTAKE"
        }
      },
      "SolUnStakingRequestPOSTBodyExample": {
        "summary": "Sol UnStaking Request POST Body Example",
        "value": {
          "clientId": "d055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "delegationId": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "type": "UNSTAKE"
        }
      },
      "EthStakingRequestWithoutDelegationsExample": {
        "summary": "Ethereum Staking Request Example",
        "value": {
          "id": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "clientId": "f054adbc-26a3-4acd-8a9d-726a05bca0dr",
          "requestUserId": "6092e75c451052000636831deb797bd1",
          "enterpriseId": "1032e75c451052000436831deb797af1",
          "walletId": "2032e75g451052000636831abd797bd3",
          "walletType": "custodial",
          "type": "STAKE",
          "coin": "eth",
          "createdDate": "2022-01-10T14:32:28Z",
          "statusModifiedDate": "2022-01-10T14:32:28Z",
          "status": "NEW",
          "withdrawalAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c",
          "amount": 6400000000000000000,
          "gasPrice": 1000000000000000
        }
      },
      "EthStakingResultsExample": {
        "summary": "Ethereum Staking Request Results Example",
        "value": {
          "page": 1,
          "totalPages": 1,
          "totalElements": 1,
          "requests": [
            {
              "id": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "clientId": "f054adbc-26a3-4acd-8a9d-726a05bca0dr",
              "requestUserId": "6092e75c451052000636831deb797bd1",
              "enterpriseId": "1032e75c451052000436831deb797af1",
              "walletId": "2032e75g451052000636831abd797bd3",
              "walletType": "custodial",
              "type": "STAKE",
              "coin": "eth",
              "createdDate": "2022-01-10T14:32:28Z",
              "statusModifiedDate": "2022-01-10T14:32:28Z",
              "status": "NEW",
              "withdrawalAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c",
              "delegations": [
                {
                  "id": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf",
                  "delegationAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5",
                  "withdrawalAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c",
                  "delegated": 3200000000000000000,
                  "status": "PENDING",
                  "rewards": 0,
                  "pendingUnstake": 3200000000000000000,
                  "apy": 8.3,
                  "coin": "eth",
                  "walletId": "2032e75g451052000636831abd797bd3",
                  "unstakingFee": 100000000000000,
                  "unstakingMin": 0
                },
                {
                  "id": "e0225adbc-55b43-5tta-9a9d-726a05bca0ai",
                  "delegationAddress": "0x3b6406c9710f588ca733360bfa8033d0ef9ecre4",
                  "withdrawalAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c",
                  "delegated": 3200000000000000000,
                  "status": "PENDING",
                  "rewards": 0,
                  "pendingUnstake": 3200000000000000000,
                  "apy": 8.3,
                  "coin": "eth",
                  "walletId": "2032e75g451052000636831abd797bd3",
                  "unstakingFee": 1000000000000000,
                  "unstakingMin": 0
                }
              ],
              "transactions": [
                {
                  "id": "d0355adbc-55b43-5tta-9a9d-726a05bca0ai",
                  "stakingRequestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
                  "createdDate": "2022-01-10T14:32:28Z",
                  "statusModifiedDate": "2022-01-10T14:32:28Z",
                  "status": "PENDING",
                  "amount": 3200000000000000000,
                  "transactionType": "delegate",
                  "delegationId": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf",
                  "buildParams": {
                    "recipients": {
                      "amount": 3200000000000000000,
                      "address": "0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b",
                      "data": "fds0934rnnio390nw"
                    },
                    "stakingParams": {
                      "requestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
                      "amount": 3200000000000000000,
                      "validator": "0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5",
                      "actionType": "delegate"
                    },
                    "gasPrice": 1000000000000000,
                    "gasLimit": 3000000000000000
                  }
                },
                {
                  "id": "i0500adbc-55b43-5tta-9a9d-726a05bca0op",
                  "stakingRequestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
                  "createdDate": "2022-01-10T14:32:28Z",
                  "statusModifiedDate": "2022-01-10T14:32:28Z",
                  "status": "PENDING",
                  "amount": 3200000000000000000,
                  "transactionType": "delegate",
                  "delegationId": "e0225adbc-55b43-5tta-9a9d-726a05bca0ai",
                  "buildParams": {
                    "recipients": {
                      "amount": 3200000000000000000,
                      "address": "0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b",
                      "data": "fds0934rnnio390nw"
                    },
                    "stakingParams": {
                      "requestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
                      "amount": 3200000000000000000,
                      "validator": "0x3b6406c9710f588ca733360bfa8033d0ef9ecre4",
                      "actionType": "delegate"
                    },
                    "gasPrice": 1000000000000000,
                    "gasLimit": 3000000000000000
                  }
                }
              ],
              "amount": 6400000000000000000,
              "gasPrice": 1000000000000000
            }
          ]
        }
      },
      "EthStakingRequestWithTransactionsExample": {
        "summary": "Ethereum Staking Request Example",
        "value": {
          "id": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "clientId": "f054adbc-26a3-4acd-8a9d-726a05bca0dr",
          "requestUserId": "6092e75c451052000636831deb797bd1",
          "enterpriseId": "1032e75c451052000436831deb797af1",
          "walletId": "2032e75g451052000636831abd797bd3",
          "walletType": "custodial",
          "type": "STAKE",
          "coin": "eth",
          "createdDate": "2022-01-10T14:32:28Z",
          "statusModifiedDate": "2022-01-10T14:32:28Z",
          "status": "NEW",
          "withdrawalAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c",
          "delegations": [
            {
              "id": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "delegationAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5",
              "withdrawalAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c",
              "delegated": 3200000000000000000,
              "status": "PENDING",
              "rewards": 0,
              "pendingUnstake": 3200000000000000000,
              "apy": 8.3,
              "coin": "eth",
              "walletId": "2032e75g451052000636831abd797bd3",
              "unstakingFee": 100000000000000,
              "unstakingMin": 0
            },
            {
              "id": "e0225adbc-55b43-5tta-9a9d-726a05bca0ai",
              "delegationAddress": "0x3b6406c9710f588ca733360bfa8033d0ef9ecre4",
              "withdrawalAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c",
              "delegated": 3200000000000000000,
              "status": "PENDING",
              "rewards": 0,
              "pendingUnstake": 3200000000000000000,
              "apy": 8.3,
              "coin": "eth",
              "walletId": "2032e75g451052000636831abd797bd3",
              "unstakingFee": 1000000000000000,
              "unstakingMin": 0
            }
          ],
          "transactions": [
            {
              "id": "d0355adbc-55b43-5tta-9a9d-726a05bca0ai",
              "stakingRequestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "createdDate": "2022-01-10T14:32:28Z",
              "statusModifiedDate": "2022-01-10T14:32:28Z",
              "status": "PENDING",
              "amount": 3200000000000000000,
              "transactionType": "delegate",
              "delegationId": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "buildParams": {
                "recipients": {
                  "amount": 3200000000000000000,
                  "address": "0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b",
                  "data": "fds0934rnnio390nw"
                },
                "stakingParams": {
                  "requestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
                  "amount": 3200000000000000000,
                  "validator": "0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5",
                  "actionType": "delegate"
                },
                "gasPrice": 1000000000000000,
                "gasLimit": 3000000000000000
              }
            },
            {
              "id": "i0500adbc-55b43-5tta-9a9d-726a05bca0op",
              "stakingRequestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "createdDate": "2022-01-10T14:32:28Z",
              "statusModifiedDate": "2022-01-10T14:32:28Z",
              "status": "PENDING",
              "amount": 3200000000000000000,
              "transactionType": "delegate",
              "delegationId": "e0225adbc-55b43-5tta-9a9d-726a05bca0ai",
              "buildParams": {
                "recipients": {
                  "amount": 3200000000000000000,
                  "address": "0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b",
                  "data": "fds0934rnnio390nw"
                },
                "stakingParams": {
                  "requestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
                  "amount": 3200000000000000000,
                  "validator": "0x3b6406c9710f588ca733360bfa8033d0ef9ecre4",
                  "actionType": "delegate"
                },
                "gasPrice": 1000000000000000,
                "gasLimit": 3000000000000000
              }
            }
          ],
          "amount": 6400000000000000000,
          "gasPrice": 1000000000000000
        }
      },
      "NearStakingRequestWithoutDelegationsExample": {
        "summary": "Near Staking Request Example",
        "value": {
          "id": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "clientId": "f054adbc-26a3-4acd-8a9d-726a05bca0dr",
          "requestUserId": "6092e75c451052000636831deb797bd1",
          "enterpriseId": "1032e75c451052000436831deb797af1",
          "walletId": "2032e75g451052000636831abd797bd3",
          "withdrawalAddress": "b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55",
          "walletType": "custodial",
          "type": "STAKE",
          "coin": "near",
          "createdDate": "2022-01-10T14:32:28Z",
          "statusModifiedDate": "2022-01-10T14:32:28Z",
          "status": "NEW",
          "amount": 1300000000000000000
        }
      },
      "NearStakingRequestWithTransactionsExample": {
        "summary": "Near Staking Request Example",
        "value": {
          "id": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "clientId": "f054adbc-26a3-4acd-8a9d-726a05bca0dr",
          "requestUserId": "6092e75c451052000636831deb797bd1",
          "enterpriseId": "1032e75c451052000436831deb797af1",
          "walletId": "2032e75g451052000636831abd797bd3",
          "withdrawalAddress": "b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55",
          "walletType": "custodial",
          "type": "STAKE",
          "coin": "near",
          "createdDate": "2022-01-10T14:32:28Z",
          "statusModifiedDate": "2022-01-10T14:32:28Z",
          "status": "NEW",
          "delegations": [
            {
              "id": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "delegationAddress": "string",
              "withdrawalAddress": "b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55",
              "delegated": 1300000000000000000,
              "status": "ACTIVE",
              "rewards": 0,
              "pendingUnstake": 1300000000000000000,
              "apy": 8.3,
              "unstakingFee": 100000000,
              "unstakingMin": 0
            }
          ],
          "transactions": [
            {
              "id": "i0500adbc-55b43-5tta-9a9d-726a05bca0op",
              "stakingRequestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "createdDate": "2022-01-10T14:32:28Z",
              "statusModifiedDate": "2022-01-10T14:32:28Z",
              "status": "NEW",
              "amount": 1300000000000000000,
              "transactionType": "delegate",
              "delegationId": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf"
            }
          ],
          "amount": 1300000000000000000
        }
      },
      "NearUnStakingRequestWithoutDelegationsExample": {
        "summary": "Near UnStaking Request Example",
        "value": {
          "id": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "clientId": "f054adbc-26a3-4acd-8a9d-726a05bca0dr",
          "requestUserId": "6092e75c451052000636831deb797bd1",
          "enterpriseId": "1032e75c451052000436831deb797af1",
          "walletId": "2032e75g451052000636831abd797bd3",
          "withdrawalAddress": "b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55",
          "walletType": "custodial",
          "type": "UNSTAKE",
          "coin": "near",
          "createdDate": "2022-01-10T14:32:28Z",
          "statusModifiedDate": "2022-01-10T14:32:28Z",
          "status": "NEW",
          "amount": 1310000000000000000
        }
      },
      "NearUnStakingRequestWithTransactionsExample": {
        "summary": "Near UnStaking Request Example",
        "value": {
          "id": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "clientId": "f054adbc-26a3-4acd-8a9d-726a05bca0dr",
          "requestUserId": "6092e75c451052000636831deb797bd1",
          "enterpriseId": "1032e75c451052000436831deb797af1",
          "walletId": "2032e75g451052000636831abd797bd3",
          "withdrawalAddress": "b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55",
          "walletType": "custodial",
          "type": "UNSTAKE",
          "coin": "near",
          "createdDate": "2022-01-10T14:32:28Z",
          "statusModifiedDate": "2022-01-10T14:32:28Z",
          "status": "NEW",
          "delegations": [
            {
              "id": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "delegationAddress": "string",
              "withdrawalAddress": "b80db6c80057404d4ed82f8e007a007192aac2499563af81909212a6a2c33d55",
              "delegated": 1310000000000000000,
              "status": "ACTIVE",
              "rewards": 100000000000000000,
              "pendingUnstake": 1310000000000000000,
              "apy": 8.3,
              "unstakingFee": 100000000,
              "unstakingMin": 0
            }
          ],
          "transactions": [
            {
              "id": "i0500adbc-55b43-5tta-9a9d-726a05bca0op",
              "stakingRequestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "createdDate": "2022-01-10T14:32:28Z",
              "statusModifiedDate": "2022-01-10T14:32:28Z",
              "status": "NEW",
              "amount": 1300000000000000000,
              "transactionType": "delegate",
              "delegationId": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf"
            }
          ],
          "amount": 1300000000000000000
        }
      },
      "SolStakingRequestWithoutDelegationsExample": {
        "summary": "Sol Staking Request Example",
        "value": {
          "id": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "clientId": "f054adbc-26a3-4acd-8a9d-726a05bca0dr",
          "requestUserId": "6092e75c451052000636831deb797bd1",
          "enterpriseId": "1032e75c451052000436831deb797af1",
          "walletId": "2032e75g451052000636831abd797bd3",
          "withdrawalAddress": "3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i",
          "walletType": "custodial",
          "type": "STAKE",
          "coin": "sol",
          "createdDate": "2022-01-10T14:32:28Z",
          "statusModifiedDate": "2022-01-10T14:32:28Z",
          "status": "NEW",
          "amount": 1000000000
        }
      },
      "SolStakingRequestWithTransactionsExample": {
        "summary": "Sol Staking Request Example",
        "value": {
          "id": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "clientId": "f054adbc-26a3-4acd-8a9d-726a05bca0dr",
          "requestUserId": "6092e75c451052000636831deb797bd1",
          "enterpriseId": "1032e75c451052000436831deb797af1",
          "walletId": "2032e75g451052000636831abd797bd3",
          "withdrawalAddress": "3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i",
          "walletType": "custodial",
          "type": "STAKE",
          "coin": "sol",
          "createdDate": "2022-01-10T14:32:28Z",
          "statusModifiedDate": "2022-01-10T14:32:28Z",
          "status": "NEW",
          "delegations": [
            {
              "id": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "delegationAddress": "string",
              "withdrawalAddress": "3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i",
              "delegated": 1000000000,
              "status": "ACTIVE",
              "rewards": 0,
              "pendingUnstake": 0,
              "apy": 8.3,
              "unstakingFee": 1000000,
              "unstakingMin": 0
            }
          ],
          "transactions": [
            {
              "id": "i0500adbc-55b43-5tta-9a9d-726a05bca0op",
              "stakingRequestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "createdDate": "2022-01-10T14:32:28Z",
              "statusModifiedDate": "2022-01-10T14:32:28Z",
              "status": "CONFIRMED",
              "amount": 1000000000,
              "transactionType": "delegate",
              "delegationId": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf"
            }
          ],
          "amount": 1000000000
        }
      },
      "SolUnStakingRequestWithoutDelegationsExample": {
        "summary": "Sol UnStaking Request Example",
        "value": {
          "id": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "clientId": "f054adbc-26a3-4acd-8a9d-726a05bca0dr",
          "requestUserId": "6092e75c451052000636831deb797bd1",
          "enterpriseId": "1032e75c451052000436831deb797af1",
          "walletId": "2032e75g451052000636831abd797bd3",
          "withdrawalAddress": "3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i",
          "walletType": "custodial",
          "type": "UNSTAKE",
          "coin": "sol",
          "createdDate": "2022-01-10T14:32:28Z",
          "statusModifiedDate": "2022-01-10T14:32:28Z",
          "status": "NEW",
          "amount": 1012000000
        }
      },
      "SolUnStakingRequestWithTransactionsExample": {
        "summary": "Sol UnStaking Request Example",
        "value": {
          "id": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
          "clientId": "f054adbc-26a3-4acd-8a9d-726a05bca0dr",
          "requestUserId": "6092e75c451052000636831deb797bd1",
          "enterpriseId": "1032e75c451052000436831deb797af1",
          "walletId": "2032e75g451052000636831abd797bd3",
          "withdrawalAddress": "3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i",
          "walletType": "custodial",
          "type": "UNSTAKE",
          "coin": "sol",
          "createdDate": "2022-01-10T14:32:28Z",
          "statusModifiedDate": "2022-01-10T14:32:28Z",
          "status": "NEW",
          "delegations": [
            {
              "id": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "delegationAddress": "string",
              "withdrawalAddress": "3Lwg4hE19Kg4BdUkuDh4v8xXoyoRQkbDMM6wX7zjQP6i",
              "delegated": 1012000000,
              "status": "ACTIVE",
              "rewards": 12000000,
              "pendingUnstake": 1012000000,
              "apy": 8.3,
              "unstakingFee": 1000000,
              "unstakingMin": 0
            }
          ],
          "transactions": [
            {
              "id": "i0500adbc-55b43-5tta-9a9d-726a05bca0op",
              "stakingRequestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "createdDate": "2022-01-10T14:32:28Z",
              "statusModifiedDate": "2022-01-10T14:32:28Z",
              "status": "READY",
              "amount": 1012,
              "transactionType": "undelegate",
              "delegationId": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf"
            },
            {
              "id": "p0500adbc-55b43-5tta-9a9d-726a05bca0dr",
              "stakingRequestId": "e055adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "createdDate": "2022-01-10T14:32:28Z",
              "statusModifiedDate": "2022-01-10T14:32:28Z",
              "status": "WAITING",
              "amount": 1012000000,
              "transactionType": "withdraw_undelegated",
              "delegationId": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf"
            }
          ],
          "amount": 1012000000
        }
      },
      "EthDelegationResultsExample": {
        "summary": "Ethereum Delegation Results Example",
        "value": {
          "page": 1,
          "totalPages": 1,
          "totalElements": 2,
          "delegations": [
            {
              "id": "e0225adbc-66a3-4ccd-9a9d-726a05bca0cf",
              "delegationAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecdy5",
              "withdrawalAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c",
              "delegated": 3200000000000000000,
              "status": "ACTIVE",
              "rewards": 0,
              "pendingUnstake": 3200000000000000000,
              "apy": 8.3,
              "coin": "eth",
              "walletId": "2032e75g451052000636831abd797bd3",
              "unstakingFee": 100000000000000,
              "unstakingMin": 0
            },
            {
              "id": "e0225adbc-55b43-5tta-9a9d-726a05bca0ai",
              "delegationAddress": "0x3b6406c9710f588ca733360bfa8033d0ef9ecre4",
              "withdrawalAddress": "0x5a6406c9710f588ca733360bfa8033d0ef9ecd7c",
              "delegated": 3200000000000000000,
              "status": "ACTIVE",
              "rewards": 0,
              "pendingUnstake": 0,
              "apy": 8.3,
              "coin": "eth",
              "walletId": "2032e75g451052000636831abd797bd3",
              "unstakingFee": 1000000000000000,
              "unstakingMin": 0
            }
          ]
        }
      }
    }
  }
}